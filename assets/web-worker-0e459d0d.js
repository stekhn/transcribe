var Om=Object.defineProperty;var zm=(js,Hn,Or)=>Hn in js?Om(js,Hn,{enumerable:!0,configurable:!0,writable:!0,value:Or}):js[Hn]=Or;var Te=(js,Hn,Or)=>(zm(js,typeof Hn!="symbol"?Hn+"":Hn,Or),Or);(function(){"use strict";var js={"./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm":(xt,me,l)=>{xt.exports=l.p+"ort-wasm-simd-threaded.jsep.wasm"},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(xt,me,l)=>{l.r(me),l.d(me,{Environment:()=>Xe,Interpreter:()=>lt,Template:()=>vt,parse:()=>$e,tokenize:()=>P});var x=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro"}),H=Object.freeze({set:x.Set,for:x.For,in:x.In,is:x.Is,if:x.If,else:x.Else,endif:x.EndIf,elif:x.ElseIf,endfor:x.EndFor,and:x.And,or:x.Or,not:x.Not,"not in":x.NotIn,macro:x.Macro,endmacro:x.EndMacro,true:x.BooleanLiteral,false:x.BooleanLiteral,True:x.BooleanLiteral,False:x.BooleanLiteral}),we=class{constructor(M,W){this.value=M,this.type=W}};function be(M){return/\w/.test(M)}function xe(M){return/[0-9]/.test(M)}var B=[["{%",x.OpenStatement],["%}",x.CloseStatement],["{{",x.OpenExpression],["}}",x.CloseExpression],["(",x.OpenParen],[")",x.CloseParen],["{",x.OpenCurlyBracket],["}",x.CloseCurlyBracket],["[",x.OpenSquareBracket],["]",x.CloseSquareBracket],[",",x.Comma],[".",x.Dot],[":",x.Colon],["|",x.Pipe],["<=",x.ComparisonBinaryOperator],[">=",x.ComparisonBinaryOperator],["==",x.ComparisonBinaryOperator],["!=",x.ComparisonBinaryOperator],["<",x.ComparisonBinaryOperator],[">",x.ComparisonBinaryOperator],["+",x.AdditiveBinaryOperator],["-",x.AdditiveBinaryOperator],["*",x.MultiplicativeBinaryOperator],["/",x.MultiplicativeBinaryOperator],["%",x.MultiplicativeBinaryOperator],["=",x.Equals]],$=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function N(M,W={}){return M.endsWith(`
`)&&(M=M.slice(0,-1)),M=M.replace(/{#.*?#}/gs,"{##}"),W.lstrip_blocks&&(M=M.replace(/^[ \t]*({[#%])/gm,"$1")),W.trim_blocks&&(M=M.replace(/([#%]})\n/g,"$1")),M.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}function P(M,W={}){var et,At,mt;const S=[],Q=N(M,W);let fe=0;const Ye=Se=>{let E="";for(;Se(Q[fe]);){if(Q[fe]==="\\"){if(++fe,fe>=Q.length)throw new SyntaxError("Unexpected end of input");const X=Q[fe++],ye=$.get(X);if(ye===void 0)throw new SyntaxError(`Unexpected escaped character: ${X}`);E+=ye;continue}if(E+=Q[fe++],fe>=Q.length)throw new SyntaxError("Unexpected end of input")}return E};e:for(;fe<Q.length;){const Se=(et=S.at(-1))==null?void 0:et.type;if(Se===void 0||Se===x.CloseStatement||Se===x.CloseExpression){let X="";for(;fe<Q.length&&!(Q[fe]==="{"&&(Q[fe+1]==="%"||Q[fe+1]==="{"));)X+=Q[fe++];if(X.length>0){S.push(new we(X,x.Text));continue}}Ye(X=>/\s/.test(X));const E=Q[fe];if(E==="-"||E==="+"){const X=(At=S.at(-1))==null?void 0:At.type;if(X===x.Text||X===void 0)throw new SyntaxError(`Unexpected character: ${E}`);switch(X){case x.Identifier:case x.NumericLiteral:case x.BooleanLiteral:case x.StringLiteral:case x.CloseParen:case x.CloseSquareBracket:break;default:{++fe;const ye=Ye(xe);S.push(new we(`${E}${ye}`,ye.length>0?x.NumericLiteral:x.UnaryOperator));continue}}}for(const[X,ye]of B)if(Q.slice(fe,fe+X.length)===X){S.push(new we(X,ye)),fe+=X.length;continue e}if(E==="'"||E==='"'){++fe;const X=Ye(ye=>ye!==E);S.push(new we(X,x.StringLiteral)),++fe;continue}if(xe(E)){const X=Ye(xe);S.push(new we(X,x.NumericLiteral));continue}if(be(E)){const X=Ye(be),ye=Object.hasOwn(H,X)?H[X]:x.Identifier;ye===x.In&&((mt=S.at(-1))==null?void 0:mt.type)===x.Not?(S.pop(),S.push(new we("not in",x.NotIn))):S.push(new we(X,ye));continue}throw new SyntaxError(`Unexpected character: ${E}`)}return S}var ee=class{constructor(){Te(this,"type","Statement")}},Z=class extends ee{constructor(W){super();Te(this,"type","Program");this.body=W}},ie=class extends ee{constructor(W,S,Q){super();Te(this,"type","If");this.test=W,this.body=S,this.alternate=Q}},ae=class extends ee{constructor(W,S,Q,fe){super();Te(this,"type","For");this.loopvar=W,this.iterable=S,this.body=Q,this.defaultBlock=fe}},z=class extends ee{constructor(W,S){super();Te(this,"type","Set");this.assignee=W,this.value=S}},te=class extends ee{constructor(W,S,Q){super();Te(this,"type","Macro");this.name=W,this.args=S,this.body=Q}},G=class extends ee{constructor(){super(...arguments);Te(this,"type","Expression")}},re=class extends G{constructor(W,S,Q){super();Te(this,"type","MemberExpression");this.object=W,this.property=S,this.computed=Q}},pe=class extends G{constructor(W,S){super();Te(this,"type","CallExpression");this.callee=W,this.args=S}},L=class extends G{constructor(W){super();Te(this,"type","Identifier");this.value=W}},O=class extends G{constructor(W){super();Te(this,"type","Literal");this.value=W}},j=class extends O{constructor(){super(...arguments);Te(this,"type","NumericLiteral")}},A=class extends O{constructor(){super(...arguments);Te(this,"type","StringLiteral")}},_e=class extends O{constructor(){super(...arguments);Te(this,"type","BooleanLiteral")}},Me=class extends O{constructor(){super(...arguments);Te(this,"type","ArrayLiteral")}},Ce=class extends O{constructor(){super(...arguments);Te(this,"type","TupleLiteral")}},ke=class extends O{constructor(){super(...arguments);Te(this,"type","ObjectLiteral")}},De=class extends G{constructor(W,S,Q){super();Te(this,"type","BinaryExpression");this.operator=W,this.left=S,this.right=Q}},Je=class extends G{constructor(W,S){super();Te(this,"type","FilterExpression");this.operand=W,this.filter=S}},Ue=class extends G{constructor(W,S){super();Te(this,"type","SelectExpression");this.iterable=W,this.test=S}},bt=class extends G{constructor(W,S,Q){super();Te(this,"type","TestExpression");this.operand=W,this.negate=S,this.test=Q}},ge=class extends G{constructor(W,S){super();Te(this,"type","UnaryExpression");this.operator=W,this.argument=S}},V=class extends G{constructor(W=void 0,S=void 0,Q=void 0){super();Te(this,"type","SliceExpression");this.start=W,this.stop=S,this.step=Q}},he=class extends G{constructor(W,S){super();Te(this,"type","KeywordArgumentExpression");this.key=W,this.value=S}};function $e(M){const W=new Z([]);let S=0;function Q(Ze,$t){const Bt=M[S++];if(!Bt||Bt.type!==Ze)throw new Error(`Parser Error: ${$t}. ${Bt.type} !== ${Ze}.`);return Bt}function fe(){switch(M[S].type){case x.Text:return At();case x.OpenStatement:return mt();case x.OpenExpression:return Se();default:throw new SyntaxError(`Unexpected token type: ${M[S].type}`)}}function Ye(...Ze){return S+Ze.length<=M.length&&Ze.some(($t,Bt)=>$t!==M[S+Bt].type)}function et(...Ze){return S+Ze.length<=M.length&&Ze.every(($t,Bt)=>$t===M[S+Bt].type)}function At(){return new A(Q(x.Text,"Expected text token").value)}function mt(){Q(x.OpenStatement,"Expected opening statement token");let Ze;switch(M[S].type){case x.Set:++S,Ze=E(),Q(x.CloseStatement,"Expected closing statement token");break;case x.If:++S,Ze=X(),Q(x.OpenStatement,"Expected {% token"),Q(x.EndIf,"Expected endif token"),Q(x.CloseStatement,"Expected %} token");break;case x.Macro:++S,Ze=ye(),Q(x.OpenStatement,"Expected {% token"),Q(x.EndMacro,"Expected endmacro token"),Q(x.CloseStatement,"Expected %} token");break;case x.For:++S,Ze=Ae(),Q(x.OpenStatement,"Expected {% token"),Q(x.EndFor,"Expected endfor token"),Q(x.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${M[S].type}`)}return Ze}function Se(){Q(x.OpenExpression,"Expected opening expression token");const Ze=Ne();return Q(x.CloseExpression,"Expected closing expression token"),Ze}function E(){const Ze=Ne();if(et(x.Equals)){++S;const $t=E();return new z(Ze,$t)}return Ze}function X(){var Hr,jn,An,Rr,Jr,jr,$n,Pr;const Ze=Ne();Q(x.CloseStatement,"Expected closing statement token");const $t=[],Bt=[];for(;!(((Hr=M[S])==null?void 0:Hr.type)===x.OpenStatement&&(((jn=M[S+1])==null?void 0:jn.type)===x.ElseIf||((An=M[S+1])==null?void 0:An.type)===x.Else||((Rr=M[S+1])==null?void 0:Rr.type)===x.EndIf));)$t.push(fe());if(((Jr=M[S])==null?void 0:Jr.type)===x.OpenStatement&&((jr=M[S+1])==null?void 0:jr.type)!==x.EndIf)if(++S,et(x.ElseIf))Q(x.ElseIf,"Expected elseif token"),Bt.push(X());else for(Q(x.Else,"Expected else token"),Q(x.CloseStatement,"Expected closing statement token");!((($n=M[S])==null?void 0:$n.type)===x.OpenStatement&&((Pr=M[S+1])==null?void 0:Pr.type)===x.EndIf);)Bt.push(fe());return new ie(Ze,$t,Bt)}function ye(){const Ze=Cr();if(Ze.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const $t=Nt();Q(x.CloseStatement,"Expected closing statement token");const Bt=[];for(;Ye(x.OpenStatement,x.EndMacro);)Bt.push(fe());return new te(Ze,$t,Bt)}function Be(Ze=!1){const $t=Ze?Cr:Ne,Bt=[$t()],Hr=et(x.Comma);for(;Hr&&(++S,Bt.push($t()),!!et(x.Comma)););return Hr?new Ce(Bt):Bt[0]}function Ae(){const Ze=Be(!0);if(!(Ze instanceof L||Ze instanceof Ce))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${Ze.type} instead`);Q(x.In,"Expected `in` keyword following loop variable");const $t=Ne();Q(x.CloseStatement,"Expected closing statement token");const Bt=[];for(;Ye(x.OpenStatement,x.EndFor)&&Ye(x.OpenStatement,x.Else);)Bt.push(fe());const Hr=[];if(et(x.OpenStatement,x.Else))for(++S,++S,Q(x.CloseStatement,"Expected closing statement token");Ye(x.OpenStatement,x.EndFor);)Hr.push(fe());return new ae(Ze,$t,Bt,Hr)}function Ne(){return ut()}function ut(){const Ze=nt();if(et(x.If)){++S;const $t=nt();if(et(x.Else)){++S;const Bt=nt();return new ie($t,[Ze],[Bt])}else return new Ue(Ze,$t)}return Ze}function nt(){let Ze=Mt();for(;et(x.Or);){const $t=M[S];++S;const Bt=Mt();Ze=new De($t,Ze,Bt)}return Ze}function Mt(){let Ze=ht();for(;et(x.And);){const $t=M[S];++S;const Bt=ht();Ze=new De($t,Ze,Bt)}return Ze}function ht(){let Ze;for(;et(x.Not);){const $t=M[S];++S;const Bt=ht();Ze=new ge($t,Bt)}return Ze??Ct()}function Ct(){let Ze=Rt();for(;et(x.ComparisonBinaryOperator)||et(x.In)||et(x.NotIn);){const $t=M[S];++S;const Bt=Rt();Ze=new De($t,Ze,Bt)}return Ze}function Rt(){let Ze=Wt();for(;et(x.AdditiveBinaryOperator);){const $t=M[S];++S;const Bt=Wt();Ze=new De($t,Ze,Bt)}return Ze}function Qe(){const Ze=er();return et(x.OpenParen)?Vt(Ze):Ze}function Vt(Ze){let $t=new pe(Ze,Nt());return et(x.OpenParen)&&($t=Vt($t)),$t}function Nt(){Q(x.OpenParen,"Expected opening parenthesis for arguments list");const Ze=Ht();return Q(x.CloseParen,"Expected closing parenthesis for arguments list"),Ze}function Ht(){const Ze=[];for(;!et(x.CloseParen);){let $t=Ne();if(et(x.Equals)){if(++S,!($t instanceof L))throw new SyntaxError("Expected identifier for keyword argument");const Bt=Ne();$t=new he($t,Bt)}Ze.push($t),et(x.Comma)&&++S}return Ze}function Xt(){const Ze=[];let $t=!1;for(;!et(x.CloseSquareBracket);)et(x.Colon)?(Ze.push(void 0),++S,$t=!0):(Ze.push(Ne()),et(x.Colon)&&(++S,$t=!0));if(Ze.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if($t){if(Ze.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new V(...Ze)}return Ze[0]}function er(){let Ze=Cr();for(;et(x.Dot)||et(x.OpenSquareBracket);){const $t=M[S];++S;let Bt;const Hr=$t.type!==x.Dot;if(Hr)Bt=Xt(),Q(x.CloseSquareBracket,"Expected closing square bracket");else if(Bt=Cr(),Bt.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");Ze=new re(Ze,Bt,Hr)}return Ze}function Wt(){let Ze=Tr();for(;et(x.MultiplicativeBinaryOperator);){const $t=M[S];++S;const Bt=Tr();Ze=new De($t,Ze,Bt)}return Ze}function Tr(){let Ze=Ur();for(;et(x.Is);){++S;const $t=et(x.Not);$t&&++S;let Bt=Cr();if(Bt instanceof _e&&(Bt=new L(Bt.value.toString())),!(Bt instanceof L))throw new SyntaxError("Expected identifier for the test");Ze=new bt(Ze,$t,Bt)}return Ze}function Ur(){let Ze=Qe();for(;et(x.Pipe);){++S;let $t=Cr();if(!($t instanceof L))throw new SyntaxError("Expected identifier for the filter");et(x.OpenParen)&&($t=Vt($t)),Ze=new Je(Ze,$t)}return Ze}function Cr(){const Ze=M[S];switch(Ze.type){case x.NumericLiteral:return++S,new j(Number(Ze.value));case x.StringLiteral:return++S,new A(Ze.value);case x.BooleanLiteral:return++S,new _e(Ze.value.toLowerCase()==="true");case x.Identifier:return++S,new L(Ze.value);case x.OpenParen:{++S;const $t=Be();if(M[S].type!==x.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${M[S].type} instead`);return++S,$t}case x.OpenSquareBracket:{++S;const $t=[];for(;!et(x.CloseSquareBracket);)$t.push(Ne()),et(x.Comma)&&++S;return++S,new Me($t)}case x.OpenCurlyBracket:{++S;const $t=new Map;for(;!et(x.CloseCurlyBracket);){const Bt=Ne();Q(x.Colon,"Expected colon between key and value in object literal");const Hr=Ne();$t.set(Bt,Hr),et(x.Comma)&&++S}return++S,new ke($t)}default:throw new SyntaxError(`Unexpected token: ${Ze.type}`)}}for(;S<M.length;)W.body.push(fe());return W}function ne(M,W,S=1){W===void 0&&(W=M,M=0);const Q=[];for(let fe=M;fe<W;fe+=S)Q.push(fe);return Q}function Ke(M,W,S,Q=1){const fe=Math.sign(Q);fe>=0?(W=(W??(W=0))<0?Math.max(M.length+W,0):Math.min(W,M.length),S=(S??(S=M.length))<0?Math.max(M.length+S,0):Math.min(S,M.length)):(W=(W??(W=M.length-1))<0?Math.max(M.length+W,-1):Math.min(W,M.length-1),S=(S??(S=-1))<-1?Math.max(M.length+S,-1):Math.min(S,M.length-1));const Ye=[];for(let et=W;fe*et<fe*S;et+=Q)Ye.push(M[et]);return Ye}function ct(M){return M.replace(/\b\w/g,W=>W.toUpperCase())}var rt=class{constructor(M=void 0){Te(this,"type","RuntimeValue");Te(this,"value");Te(this,"builtins",new Map);this.value=M}__bool__(){return new st(!!this.value)}},ot=class extends rt{constructor(){super(...arguments);Te(this,"type","NumericValue")}},Re=class extends rt{constructor(){super(...arguments);Te(this,"type","StringValue");Te(this,"builtins",new Map([["upper",new je(()=>new Re(this.value.toUpperCase()))],["lower",new je(()=>new Re(this.value.toLowerCase()))],["strip",new je(()=>new Re(this.value.trim()))],["title",new je(()=>new Re(ct(this.value)))],["length",new ot(this.value.length)]]))}},st=class extends rt{constructor(){super(...arguments);Te(this,"type","BooleanValue")}},Tt=class extends rt{constructor(){super(...arguments);Te(this,"type","ObjectValue");Te(this,"builtins",new Map([["get",new je(([W,S])=>{if(!(W instanceof Re))throw new Error(`Object key must be a string: got ${W.type}`);return this.value.get(W.value)??S??new qe})],["items",new je(()=>new se(Array.from(this.value.entries()).map(([W,S])=>new se([new Re(W),S]))))]]))}__bool__(){return new st(this.value.size>0)}},ze=class extends Tt{constructor(){super(...arguments);Te(this,"type","KeywordArgumentsValue")}},se=class extends rt{constructor(){super(...arguments);Te(this,"type","ArrayValue");Te(this,"builtins",new Map([["length",new ot(this.value.length)]]))}__bool__(){return new st(this.value.length>0)}},Ee=class extends se{constructor(){super(...arguments);Te(this,"type","TupleValue")}},je=class extends rt{constructor(){super(...arguments);Te(this,"type","FunctionValue")}},qe=class extends rt{constructor(){super(...arguments);Te(this,"type","NullValue")}},Ve=class extends rt{constructor(){super(...arguments);Te(this,"type","UndefinedValue")}},Xe=class{constructor(M){Te(this,"variables",new Map([["namespace",new je(M=>{if(M.length===0)return new Tt(new Map);if(M.length!==1||!(M[0]instanceof Tt))throw new Error("`namespace` expects either zero arguments or a single object argument");return M[0]})]]));Te(this,"tests",new Map([["boolean",M=>M.type==="BooleanValue"],["callable",M=>M instanceof je],["odd",M=>{if(M.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${M.type}`);return M.value%2!==0}],["even",M=>{if(M.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${M.type}`);return M.value%2===0}],["false",M=>M.type==="BooleanValue"&&!M.value],["true",M=>M.type==="BooleanValue"&&M.value],["string",M=>M.type==="StringValue"],["number",M=>M.type==="NumericValue"],["integer",M=>M.type==="NumericValue"&&Number.isInteger(M.value)],["iterable",M=>M instanceof se||M instanceof Re],["lower",M=>{const W=M.value;return M.type==="StringValue"&&W===W.toLowerCase()}],["upper",M=>{const W=M.value;return M.type==="StringValue"&&W===W.toUpperCase()}],["none",M=>M.type==="NullValue"],["defined",M=>M.type!=="UndefinedValue"],["undefined",M=>M.type==="UndefinedValue"],["equalto",(M,W)=>M.value===W.value],["eq",(M,W)=>M.value===W.value]]));this.parent=M}set(M,W){return this.declareVariable(M,ft(W))}declareVariable(M,W){if(this.variables.has(M))throw new SyntaxError(`Variable already declared: ${M}`);return this.variables.set(M,W),W}setVariable(M,W){return this.variables.set(M,W),W}resolve(M){if(this.variables.has(M))return this;if(this.parent)return this.parent.resolve(M);throw new Error(`Unknown variable: ${M}`)}lookupVariable(M){try{return this.resolve(M).variables.get(M)??new Ve}catch{return new Ve}}},lt=class{constructor(M){Te(this,"global");this.global=M??new Xe}run(M){return this.evaluate(M,this.global)}evaluateBinaryExpression(M,W){const S=this.evaluate(M.left,W);switch(M.operator.value){case"and":return S.__bool__().value?this.evaluate(M.right,W):S;case"or":return S.__bool__().value?S:this.evaluate(M.right,W)}const Q=this.evaluate(M.right,W);switch(M.operator.value){case"==":return new st(S.value==Q.value);case"!=":return new st(S.value!=Q.value)}if(S instanceof Ve||Q instanceof Ve)throw new Error("Cannot perform operation on undefined values");if(S instanceof qe||Q instanceof qe)throw new Error("Cannot perform operation on null values");if(S instanceof ot&&Q instanceof ot)switch(M.operator.value){case"+":return new ot(S.value+Q.value);case"-":return new ot(S.value-Q.value);case"*":return new ot(S.value*Q.value);case"/":return new ot(S.value/Q.value);case"%":return new ot(S.value%Q.value);case"<":return new st(S.value<Q.value);case">":return new st(S.value>Q.value);case">=":return new st(S.value>=Q.value);case"<=":return new st(S.value<=Q.value)}else if(S instanceof se&&Q instanceof se)switch(M.operator.value){case"+":return new se(S.value.concat(Q.value))}else if(Q instanceof se){const fe=Q.value.find(Ye=>Ye.value===S.value)!==void 0;switch(M.operator.value){case"in":return new st(fe);case"not in":return new st(!fe)}}if(S instanceof Re||Q instanceof Re)switch(M.operator.value){case"+":return new Re(S.value.toString()+Q.value.toString())}if(S instanceof Re&&Q instanceof Re)switch(M.operator.value){case"in":return new st(Q.value.includes(S.value));case"not in":return new st(!Q.value.includes(S.value))}if(S instanceof Re&&Q instanceof Tt)switch(M.operator.value){case"in":return new st(Q.value.has(S.value));case"not in":return new st(!Q.value.has(S.value))}throw new SyntaxError(`Unknown operator "${M.operator.value}" between ${S.type} and ${Q.type}`)}evaluateArguments(M,W){const S=[],Q=new Map;for(const fe of M)if(fe.type==="KeywordArgumentExpression"){const Ye=fe;Q.set(Ye.key.value,this.evaluate(Ye.value,W))}else{if(Q.size>0)throw new Error("Positional arguments must come before keyword arguments");S.push(this.evaluate(fe,W))}return[S,Q]}evaluateFilterExpression(M,W){const S=this.evaluate(M.operand,W);if(M.filter.type==="Identifier"){const Q=M.filter;if(Q.value==="tojson")return new Re(gt(S));if(S instanceof se)switch(Q.value){case"list":return S;case"first":return S.value[0];case"last":return S.value[S.value.length-1];case"length":return new ot(S.value.length);case"reverse":return new se(S.value.reverse());case"sort":return new se(S.value.sort((fe,Ye)=>{if(fe.type!==Ye.type)throw new Error(`Cannot compare different types: ${fe.type} and ${Ye.type}`);switch(fe.type){case"NumericValue":return fe.value-Ye.value;case"StringValue":return fe.value.localeCompare(Ye.value);default:throw new Error(`Cannot compare type: ${fe.type}`)}}));default:throw new Error(`Unknown ArrayValue filter: ${Q.value}`)}else if(S instanceof Re)switch(Q.value){case"length":return new ot(S.value.length);case"upper":return new Re(S.value.toUpperCase());case"lower":return new Re(S.value.toLowerCase());case"title":return new Re(ct(S.value));case"capitalize":return new Re(S.value.charAt(0).toUpperCase()+S.value.slice(1));case"trim":return new Re(S.value.trim());case"indent":return new Re(S.value.split(`
`).map((fe,Ye)=>Ye===0||fe.length===0?fe:"    "+fe).join(`
`));case"string":return S;default:throw new Error(`Unknown StringValue filter: ${Q.value}`)}else if(S instanceof ot)switch(Q.value){case"abs":return new ot(Math.abs(S.value));default:throw new Error(`Unknown NumericValue filter: ${Q.value}`)}else if(S instanceof Tt)switch(Q.value){case"items":return new se(Array.from(S.value.entries()).map(([fe,Ye])=>new se([new Re(fe),Ye])));case"length":return new ot(S.value.size);default:throw new Error(`Unknown ObjectValue filter: ${Q.value}`)}throw new Error(`Cannot apply filter "${Q.value}" to type: ${S.type}`)}else if(M.filter.type==="CallExpression"){const Q=M.filter;if(Q.callee.type!=="Identifier")throw new Error(`Unknown filter: ${Q.callee.type}`);const fe=Q.callee.value;if(fe==="tojson"){const[,Ye]=this.evaluateArguments(Q.args,W),et=Ye.get("indent")??new qe;if(!(et instanceof ot||et instanceof qe))throw new Error("If set, indent must be a number");return new Re(gt(S,et.value))}if(S instanceof se){switch(fe){case"selectattr":{if(S.value.some(E=>!(E instanceof Tt)))throw new Error("`selectattr` can only be applied to array of objects");if(Q.args.some(E=>E.type!=="StringLiteral"))throw new Error("arguments of `selectattr` must be strings");const[Ye,et,At]=Q.args.map(E=>this.evaluate(E,W));let mt;if(et){const E=W.tests.get(et.value);if(!E)throw new Error(`Unknown test: ${et.value}`);mt=E}else mt=(...E)=>E[0].__bool__().value;const Se=S.value.filter(E=>{const X=E.value.get(Ye.value);return X?mt(X,At):!1});return new se(Se)}case"map":{const[,Ye]=this.evaluateArguments(Q.args,W);if(Ye.has("attribute")){const et=Ye.get("attribute");if(!(et instanceof Re))throw new Error("attribute must be a string");const At=Ye.get("default"),mt=S.value.map(Se=>{if(!(Se instanceof Tt))throw new Error("items in map must be an object");return Se.value.get(et.value)??At??new Ve});return new se(mt)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${fe}`)}else if(S instanceof Re){switch(fe){case"indent":{const[Ye,et]=this.evaluateArguments(Q.args,W),At=Ye.at(0)??et.get("width")??new ot(4);if(!(At instanceof ot))throw new Error("width must be a number");const mt=Ye.at(1)??et.get("first")??new st(!1),Se=Ye.at(2)??et.get("blank")??new st(!1),E=S.value.split(`
`),X=" ".repeat(At.value),ye=E.map((Be,Ae)=>!mt.value&&Ae===0||!Se.value&&Be.length===0?Be:X+Be);return new Re(ye.join(`
`))}}throw new Error(`Unknown StringValue filter: ${fe}`)}else throw new Error(`Cannot apply filter "${fe}" to type: ${S.type}`)}throw new Error(`Unknown filter: ${M.filter.type}`)}evaluateTestExpression(M,W){const S=this.evaluate(M.operand,W),Q=W.tests.get(M.test.value);if(!Q)throw new Error(`Unknown test: ${M.test.value}`);const fe=Q(S);return new st(M.negate?!fe:fe)}evaluateUnaryExpression(M,W){const S=this.evaluate(M.argument,W);switch(M.operator.value){case"not":return new st(!S.value);default:throw new SyntaxError(`Unknown operator: ${M.operator.value}`)}}evalProgram(M,W){return this.evaluateBlock(M.body,W)}evaluateBlock(M,W){let S="";for(const Q of M){const fe=this.evaluate(Q,W);fe.type!=="NullValue"&&fe.type!=="UndefinedValue"&&(S+=fe.value)}return new Re(S)}evaluateIdentifier(M,W){return W.lookupVariable(M.value)}evaluateCallExpression(M,W){const[S,Q]=this.evaluateArguments(M.args,W);Q.size>0&&S.push(new ze(Q));const fe=this.evaluate(M.callee,W);if(fe.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${fe.type}`);return fe.value(S,W)}evaluateSliceExpression(M,W,S){if(!(M instanceof se||M instanceof Re))throw new Error("Slice object must be an array or string");const Q=this.evaluate(W.start,S),fe=this.evaluate(W.stop,S),Ye=this.evaluate(W.step,S);if(!(Q instanceof ot||Q instanceof Ve))throw new Error("Slice start must be numeric or undefined");if(!(fe instanceof ot||fe instanceof Ve))throw new Error("Slice stop must be numeric or undefined");if(!(Ye instanceof ot||Ye instanceof Ve))throw new Error("Slice step must be numeric or undefined");return M instanceof se?new se(Ke(M.value,Q.value,fe.value,Ye.value)):new Re(Ke(Array.from(M.value),Q.value,fe.value,Ye.value).join(""))}evaluateMemberExpression(M,W){const S=this.evaluate(M.object,W);let Q;if(M.computed){if(M.property.type==="SliceExpression")return this.evaluateSliceExpression(S,M.property,W);Q=this.evaluate(M.property,W)}else Q=new Re(M.property.value);let fe;if(S instanceof Tt){if(!(Q instanceof Re))throw new Error(`Cannot access property with non-string: got ${Q.type}`);fe=S.value.get(Q.value)??S.builtins.get(Q.value)}else if(S instanceof se||S instanceof Re)if(Q instanceof ot)fe=S.value.at(Q.value),S instanceof Re&&(fe=new Re(S.value.at(Q.value)));else if(Q instanceof Re)fe=S.builtins.get(Q.value);else throw new Error(`Cannot access property with non-string/non-number: got ${Q.type}`);else{if(!(Q instanceof Re))throw new Error(`Cannot access property with non-string: got ${Q.type}`);fe=S.builtins.get(Q.value)}return fe instanceof rt?fe:new Ve}evaluateSet(M,W){const S=this.evaluate(M.value,W);if(M.assignee.type==="Identifier"){const Q=M.assignee.value;W.setVariable(Q,S)}else if(M.assignee.type==="MemberExpression"){const Q=M.assignee,fe=this.evaluate(Q.object,W);if(!(fe instanceof Tt))throw new Error("Cannot assign to member of non-object");if(Q.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");fe.value.set(Q.property.value,S)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(M.assignee)}`);return new qe}evaluateIf(M,W){const S=this.evaluate(M.test,W);return this.evaluateBlock(S.__bool__().value?M.body:M.alternate,W)}evaluateFor(M,W){const S=new Xe(W);let Q,fe;if(M.iterable.type==="SelectExpression"){const Se=M.iterable;fe=this.evaluate(Se.iterable,S),Q=Se.test}else fe=this.evaluate(M.iterable,S);if(!(fe instanceof se))throw new Error(`Expected iterable type in for loop: got ${fe.type}`);const Ye=[],et=[];for(let Se=0;Se<fe.value.length;++Se){const E=new Xe(S),X=fe.value[Se];let ye;if(M.loopvar.type==="Identifier")ye=Be=>Be.setVariable(M.loopvar.value,X);else if(M.loopvar.type==="TupleLiteral"){const Be=M.loopvar;if(X.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${X.type}`);const Ae=X;if(Be.value.length!==Ae.value.length)throw new Error(`Too ${Be.value.length>Ae.value.length?"few":"many"} items to unpack`);ye=Ne=>{for(let ut=0;ut<Be.value.length;++ut){if(Be.value[ut].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Be.value[ut].type}`);Ne.setVariable(Be.value[ut].value,Ae.value[ut])}}}else throw new Error(`Invalid loop variable(s): ${M.loopvar.type}`);Q&&(ye(E),!this.evaluate(Q,E).__bool__().value)||(Ye.push(X),et.push(ye))}let At="",mt=!0;for(let Se=0;Se<Ye.length;++Se){const E=new Map([["index",new ot(Se+1)],["index0",new ot(Se)],["revindex",new ot(Ye.length-Se)],["revindex0",new ot(Ye.length-Se-1)],["first",new st(Se===0)],["last",new st(Se===Ye.length-1)],["length",new ot(Ye.length)],["previtem",Se>0?Ye[Se-1]:new Ve],["nextitem",Se<Ye.length-1?Ye[Se+1]:new Ve]]);S.setVariable("loop",new Tt(E)),et[Se](S);const X=this.evaluateBlock(M.body,S);At+=X.value,mt=!1}if(mt){const Se=this.evaluateBlock(M.defaultBlock,S);At+=Se.value}return new Re(At)}evaluateMacro(M,W){return W.setVariable(M.name.value,new je((S,Q)=>{var et;const fe=new Xe(Q);S=S.slice();let Ye;((et=S.at(-1))==null?void 0:et.type)==="KeywordArgumentsValue"&&(Ye=S.pop());for(let At=0;At<M.args.length;++At){const mt=M.args[At],Se=S[At];if(mt.type==="Identifier"){const E=mt;if(!Se)throw new Error(`Missing positional argument: ${E.value}`);fe.setVariable(E.value,Se)}else if(mt.type==="KeywordArgumentExpression"){const E=mt,X=Se??(Ye==null?void 0:Ye.value.get(E.key.value))??this.evaluate(E.value,fe);fe.setVariable(E.key.value,X)}else throw new Error(`Unknown argument type: ${mt.type}`)}return this.evaluateBlock(M.body,fe)})),new qe}evaluate(M,W){if(M===void 0)return new Ve;switch(M.type){case"Program":return this.evalProgram(M,W);case"Set":return this.evaluateSet(M,W);case"If":return this.evaluateIf(M,W);case"For":return this.evaluateFor(M,W);case"Macro":return this.evaluateMacro(M,W);case"NumericLiteral":return new ot(Number(M.value));case"StringLiteral":return new Re(M.value);case"BooleanLiteral":return new st(M.value);case"ArrayLiteral":return new se(M.value.map(S=>this.evaluate(S,W)));case"TupleLiteral":return new Ee(M.value.map(S=>this.evaluate(S,W)));case"ObjectLiteral":{const S=new Map;for(const[Q,fe]of M.value){const Ye=this.evaluate(Q,W);if(!(Ye instanceof Re))throw new Error(`Object keys must be strings: got ${Ye.type}`);S.set(Ye.value,this.evaluate(fe,W))}return new Tt(S)}case"Identifier":return this.evaluateIdentifier(M,W);case"CallExpression":return this.evaluateCallExpression(M,W);case"MemberExpression":return this.evaluateMemberExpression(M,W);case"UnaryExpression":return this.evaluateUnaryExpression(M,W);case"BinaryExpression":return this.evaluateBinaryExpression(M,W);case"FilterExpression":return this.evaluateFilterExpression(M,W);case"TestExpression":return this.evaluateTestExpression(M,W);default:throw new SyntaxError(`Unknown node type: ${M.type}`)}}};function ft(M){switch(typeof M){case"number":return new ot(M);case"string":return new Re(M);case"boolean":return new st(M);case"undefined":return new Ve;case"object":return M===null?new qe:Array.isArray(M)?new se(M.map(ft)):new Tt(new Map(Object.entries(M).map(([W,S])=>[W,ft(S)])));case"function":return new je((W,S)=>{const Q=M(...W.map(fe=>fe.value))??null;return ft(Q)});default:throw new Error(`Cannot convert to runtime value: ${M}`)}}function gt(M,W,S){const Q=S??0;switch(M.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(M.value);case"ArrayValue":case"ObjectValue":{const fe=W?" ".repeat(W):"",Ye=`
`+fe.repeat(Q),et=Ye+fe;if(M.type==="ArrayValue"){const At=M.value.map(mt=>gt(mt,W,Q+1));return W?`[${et}${At.join(`,${et}`)}${Ye}]`:`[${At.join(", ")}]`}else{const At=Array.from(M.value.entries()).map(([mt,Se])=>{const E=`"${mt}": ${gt(Se,W,Q+1)}`;return W?`${et}${E}`:E});return W?`{${At.join(",")}${Ye}}`:`{${At.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${M.type}`)}}var vt=class{constructor(M){Te(this,"parsed");const W=P(M,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=$e(W)}render(M){const W=new Xe;W.set("false",!1),W.set("true",!0),W.set("raise_exception",fe=>{throw new Error(fe)}),W.set("range",ne);for(const[fe,Ye]of Object.entries(M))W.set(fe,Ye);return new lt(W).run(this.parsed).value}}},"./node_modules/onnxruntime-common/dist/esm/backend-impl.js":(xt,me,l)=>{l.r(me),l.d(me,{registerBackend:()=>we,resolveBackendAndExecutionProviders:()=>xe});const x=new Map,H=[],we=(B,$,N)=>{if($&&typeof $.init=="function"&&typeof $.createInferenceSessionHandler=="function"){const P=x.get(B);if(P===void 0)x.set(B,{backend:$,priority:N});else{if(P.priority>N)return;if(P.priority===N&&P.backend!==$)throw new Error(`cannot register backend "${B}" using priority ${N}`)}if(N>=0){const ee=H.indexOf(B);ee!==-1&&H.splice(ee,1);for(let Z=0;Z<H.length;Z++)if(x.get(H[Z]).priority<=N){H.splice(Z,0,B);return}H.push(B)}return}throw new TypeError("not a valid backend")},be=async B=>{const $=x.get(B);if(!$)return"backend not found.";if($.initialized)return $.backend;if($.aborted)return $.error;{const N=!!$.initPromise;try{return N||($.initPromise=$.backend.init(B)),await $.initPromise,$.initialized=!0,$.backend}catch(P){return N||($.error=`${P}`,$.aborted=!0),$.error}finally{delete $.initPromise}}},xe=async B=>{const $=B.executionProviders||[],N=$.map(z=>typeof z=="string"?z:z.name),P=N.length===0?H:N;let ee;const Z=[],ie=new Set;for(const z of P){const te=await be(z);typeof te=="string"?Z.push({name:z,err:te}):(ee||(ee=te),ee===te&&ie.add(z))}if(!ee)throw new Error(`no available backend found. ERR: ${Z.map(z=>`[${z.name}] ${z.err}`).join(", ")}`);for(const{name:z,err:te}of Z)N.includes(z)&&console.warn(`removing requested execution provider "${z}" from session options because it is not available: ${te}`);const ae=$.filter(z=>ie.has(typeof z=="string"?z:z.name));return[ee,new Proxy(B,{get:(z,te)=>te==="executionProviders"?ae:Reflect.get(z,te)})]}},"./node_modules/onnxruntime-common/dist/esm/backend.js":(xt,me,l)=>{l.r(me),l.d(me,{registerBackend:()=>x.registerBackend});var x=l("./node_modules/onnxruntime-common/dist/esm/backend-impl.js")},"./node_modules/onnxruntime-common/dist/esm/env-impl.js":(xt,me,l)=>{l.r(me),l.d(me,{env:()=>we});var x=l("./node_modules/onnxruntime-common/dist/esm/version.js");let H="warning";const we={wasm:{},webgl:{},webgpu:{},versions:{common:x.version},set logLevel(be){if(be!==void 0){if(typeof be!="string"||["verbose","info","warning","error","fatal"].indexOf(be)===-1)throw new Error(`Unsupported logging level: ${be}`);H=be}},get logLevel(){return H}};Object.defineProperty(we,"logLevel",{enumerable:!0})},"./node_modules/onnxruntime-common/dist/esm/env.js":(xt,me,l)=>{l.r(me),l.d(me,{env:()=>H});var x=l("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const H=x.env},"./node_modules/onnxruntime-common/dist/esm/index.js":(xt,me,l)=>{l.r(me),l.d(me,{InferenceSession:()=>we.InferenceSession,TRACE:()=>xe.TRACE,TRACE_FUNC_BEGIN:()=>xe.TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>xe.TRACE_FUNC_END,Tensor:()=>be.Tensor,TrainingSession:()=>B.TrainingSession,env:()=>H.env,registerBackend:()=>x.registerBackend});var x=l("./node_modules/onnxruntime-common/dist/esm/backend.js"),H=l("./node_modules/onnxruntime-common/dist/esm/env.js"),we=l("./node_modules/onnxruntime-common/dist/esm/inference-session.js"),be=l("./node_modules/onnxruntime-common/dist/esm/tensor.js");l("./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"),l("./node_modules/onnxruntime-common/dist/esm/tensor-factory.js");var xe=l("./node_modules/onnxruntime-common/dist/esm/trace.js");l("./node_modules/onnxruntime-common/dist/esm/onnx-model.js"),l("./node_modules/onnxruntime-common/dist/esm/onnx-value.js");var B=l("./node_modules/onnxruntime-common/dist/esm/training-session.js")},"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js":(xt,me,l)=>{l.r(me),l.d(me,{InferenceSession:()=>be});var x=l("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),H=l("./node_modules/onnxruntime-common/dist/esm/tensor.js"),we=l("./node_modules/onnxruntime-common/dist/esm/trace.js");class be{constructor(B){this.handler=B}async run(B,$,N){(0,we.TRACE_FUNC_BEGIN)();const P={};let ee={};if(typeof B!="object"||B===null||B instanceof H.Tensor||Array.isArray(B))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let Z=!0;if(typeof $=="object"){if($===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if($ instanceof H.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray($)){if($.length===0)throw new TypeError("'fetches' cannot be an empty array.");Z=!1;for(const z of $){if(typeof z!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(z)===-1)throw new RangeError(`'fetches' contains invalid output name: ${z}.`);P[z]=null}if(typeof N=="object"&&N!==null)ee=N;else if(typeof N<"u")throw new TypeError("'options' must be an object.")}else{let z=!1;const te=Object.getOwnPropertyNames($);for(const G of this.outputNames)if(te.indexOf(G)!==-1){const re=$[G];(re===null||re instanceof H.Tensor)&&(z=!0,Z=!1,P[G]=re)}if(z){if(typeof N=="object"&&N!==null)ee=N;else if(typeof N<"u")throw new TypeError("'options' must be an object.")}else ee=$}}else if(typeof $<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const z of this.inputNames)if(typeof B[z]>"u")throw new Error(`input '${z}' is missing in 'feeds'.`);if(Z)for(const z of this.outputNames)P[z]=null;const ie=await this.handler.run(B,P,ee),ae={};for(const z in ie)if(Object.hasOwnProperty.call(ie,z)){const te=ie[z];te instanceof H.Tensor?ae[z]=te:ae[z]=new H.Tensor(te.type,te.data,te.dims)}return(0,we.TRACE_FUNC_END)(),ae}async release(){return this.handler.dispose()}static async create(B,$,N,P){(0,we.TRACE_FUNC_BEGIN)();let ee,Z={};if(typeof B=="string"){if(ee=B,typeof $=="object"&&$!==null)Z=$;else if(typeof $<"u")throw new TypeError("'options' must be an object.")}else if(B instanceof Uint8Array){if(ee=B,typeof $=="object"&&$!==null)Z=$;else if(typeof $<"u")throw new TypeError("'options' must be an object.")}else if(B instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&B instanceof SharedArrayBuffer){const te=B;let G=0,re=B.byteLength;if(typeof $=="object"&&$!==null)Z=$;else if(typeof $=="number"){if(G=$,!Number.isSafeInteger(G))throw new RangeError("'byteOffset' must be an integer.");if(G<0||G>=te.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${te.byteLength}).`);if(re=B.byteLength-G,typeof N=="number"){if(re=N,!Number.isSafeInteger(re))throw new RangeError("'byteLength' must be an integer.");if(re<=0||G+re>te.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${te.byteLength-G}].`);if(typeof P=="object"&&P!==null)Z=P;else if(typeof P<"u")throw new TypeError("'options' must be an object.")}else if(typeof N<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof $<"u")throw new TypeError("'options' must be an object.");ee=new Uint8Array(te,G,re)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[ie,ae]=await(0,x.resolveBackendAndExecutionProviders)(Z),z=await ie.createInferenceSessionHandler(ee,ae);return(0,we.TRACE_FUNC_END)(),new be(z)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}},"./node_modules/onnxruntime-common/dist/esm/inference-session.js":(xt,me,l)=>{l.r(me),l.d(me,{InferenceSession:()=>H});var x=l("./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js");const H=x.InferenceSession},"./node_modules/onnxruntime-common/dist/esm/onnx-model.js":(xt,me,l)=>{l.r(me)},"./node_modules/onnxruntime-common/dist/esm/onnx-value.js":(xt,me,l)=>{l.r(me)},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js":(xt,me,l)=>{l.r(me),l.d(me,{tensorToDataURL:()=>x,tensorToImageData:()=>H});const x=(we,be)=>{const xe=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);xe.width=we.dims[3],xe.height=we.dims[2];const B=xe.getContext("2d");if(B!=null){let $,N;(be==null?void 0:be.tensorLayout)!==void 0&&be.tensorLayout==="NHWC"?($=we.dims[2],N=we.dims[3]):($=we.dims[3],N=we.dims[2]);const P=(be==null?void 0:be.format)!==void 0?be.format:"RGB",ee=be==null?void 0:be.norm;let Z,ie;ee===void 0||ee.mean===void 0?Z=[255,255,255,255]:typeof ee.mean=="number"?Z=[ee.mean,ee.mean,ee.mean,ee.mean]:(Z=[ee.mean[0],ee.mean[1],ee.mean[2],0],ee.mean[3]!==void 0&&(Z[3]=ee.mean[3])),ee===void 0||ee.bias===void 0?ie=[0,0,0,0]:typeof ee.bias=="number"?ie=[ee.bias,ee.bias,ee.bias,ee.bias]:(ie=[ee.bias[0],ee.bias[1],ee.bias[2],0],ee.bias[3]!==void 0&&(ie[3]=ee.bias[3]));const ae=N*$;let z=0,te=ae,G=ae*2,re=-1;P==="RGBA"?(z=0,te=ae,G=ae*2,re=ae*3):P==="RGB"?(z=0,te=ae,G=ae*2):P==="RBG"&&(z=0,G=ae,te=ae*2);for(let pe=0;pe<N;pe++)for(let L=0;L<$;L++){const O=(we.data[z++]-ie[0])*Z[0],j=(we.data[te++]-ie[1])*Z[1],A=(we.data[G++]-ie[2])*Z[2],_e=re===-1?255:(we.data[re++]-ie[3])*Z[3];B.fillStyle="rgba("+O+","+j+","+A+","+_e+")",B.fillRect(L,pe,1,1)}if("toDataURL"in xe)return xe.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},H=(we,be)=>{const xe=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let B;if(xe!=null){let $,N,P;(be==null?void 0:be.tensorLayout)!==void 0&&be.tensorLayout==="NHWC"?($=we.dims[2],N=we.dims[1],P=we.dims[3]):($=we.dims[3],N=we.dims[2],P=we.dims[1]);const ee=be!==void 0&&be.format!==void 0?be.format:"RGB",Z=be==null?void 0:be.norm;let ie,ae;Z===void 0||Z.mean===void 0?ie=[255,255,255,255]:typeof Z.mean=="number"?ie=[Z.mean,Z.mean,Z.mean,Z.mean]:(ie=[Z.mean[0],Z.mean[1],Z.mean[2],255],Z.mean[3]!==void 0&&(ie[3]=Z.mean[3])),Z===void 0||Z.bias===void 0?ae=[0,0,0,0]:typeof Z.bias=="number"?ae=[Z.bias,Z.bias,Z.bias,Z.bias]:(ae=[Z.bias[0],Z.bias[1],Z.bias[2],0],Z.bias[3]!==void 0&&(ae[3]=Z.bias[3]));const z=N*$;if(be!==void 0&&(be.format!==void 0&&P===4&&be.format!=="RGBA"||P===3&&be.format!=="RGB"&&be.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const te=4;let G=0,re=1,pe=2,L=3,O=0,j=z,A=z*2,_e=-1;ee==="RGBA"?(O=0,j=z,A=z*2,_e=z*3):ee==="RGB"?(O=0,j=z,A=z*2):ee==="RBG"&&(O=0,A=z,j=z*2),B=xe.createImageData($,N);for(let Me=0;Me<N*$;G+=te,re+=te,pe+=te,L+=te,Me++)B.data[G]=(we.data[O++]-ae[0])*ie[0],B.data[re]=(we.data[j++]-ae[1])*ie[1],B.data[pe]=(we.data[A++]-ae[2])*ie[2],B.data[L]=_e===-1?255:(we.data[_e++]-ae[3])*ie[3]}else throw new Error("Can not access image data");return B}},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js":(xt,me,l)=>{l.r(me)},"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js":(xt,me,l)=>{l.r(me),l.d(me,{bufferToTensor:()=>H,tensorFromGpuBuffer:()=>xe,tensorFromImage:()=>we,tensorFromPinnedBuffer:()=>B,tensorFromTexture:()=>be});var x=l("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const H=($,N)=>{if($===void 0)throw new Error("Image buffer must be defined");if(N.height===void 0||N.width===void 0)throw new Error("Image height and width must be defined");if(N.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:P,width:ee}=N,Z=N.norm??{mean:255,bias:0};let ie,ae;typeof Z.mean=="number"?ie=[Z.mean,Z.mean,Z.mean,Z.mean]:ie=[Z.mean[0],Z.mean[1],Z.mean[2],Z.mean[3]??255],typeof Z.bias=="number"?ae=[Z.bias,Z.bias,Z.bias,Z.bias]:ae=[Z.bias[0],Z.bias[1],Z.bias[2],Z.bias[3]??0];const z=N.format!==void 0?N.format:"RGBA",te=N.tensorFormat!==void 0&&N.tensorFormat!==void 0?N.tensorFormat:"RGB",G=P*ee,re=te==="RGBA"?new Float32Array(G*4):new Float32Array(G*3);let pe=4,L=0,O=1,j=2,A=3,_e=0,Me=G,Ce=G*2,ke=-1;z==="RGB"&&(pe=3,L=0,O=1,j=2,A=-1),te==="RGBA"?ke=G*3:te==="RBG"?(_e=0,Ce=G,Me=G*2):te==="BGR"&&(Ce=0,Me=G,_e=G*2);for(let Je=0;Je<G;Je++,L+=pe,j+=pe,O+=pe,A+=pe)re[_e++]=($[L]+ae[0])/ie[0],re[Me++]=($[O]+ae[1])/ie[1],re[Ce++]=($[j]+ae[2])/ie[2],ke!==-1&&A!==-1&&(re[ke++]=($[A]+ae[3])/ie[3]);return te==="RGBA"?new x.Tensor("float32",re,[1,4,P,ee]):new x.Tensor("float32",re,[1,3,P,ee])},we=async($,N)=>{const P=typeof HTMLImageElement<"u"&&$ instanceof HTMLImageElement,ee=typeof ImageData<"u"&&$ instanceof ImageData,Z=typeof ImageBitmap<"u"&&$ instanceof ImageBitmap,ie=typeof $=="string";let ae,z=N??{};const te=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},G=re=>re instanceof HTMLCanvasElement||re instanceof OffscreenCanvas?re.getContext("2d"):null;if(P){const re=te();re.width=$.width,re.height=$.height;const pe=G(re);if(pe!=null){let L=$.height,O=$.width;if(N!==void 0&&N.resizedHeight!==void 0&&N.resizedWidth!==void 0&&(L=N.resizedHeight,O=N.resizedWidth),N!==void 0){if(z=N,N.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");z.tensorFormat="RGBA",z.height=L,z.width=O}else z.tensorFormat="RGBA",z.height=L,z.width=O;pe.drawImage($,0,0),ae=pe.getImageData(0,0,O,L).data}else throw new Error("Can not access image data")}else if(ee){let re,pe;if(N!==void 0&&N.resizedWidth!==void 0&&N.resizedHeight!==void 0?(re=N.resizedHeight,pe=N.resizedWidth):(re=$.height,pe=$.width),N!==void 0&&(z=N),z.format="RGBA",z.height=re,z.width=pe,N!==void 0){const L=te();L.width=pe,L.height=re;const O=G(L);if(O!=null)O.putImageData($,0,0),ae=O.getImageData(0,0,pe,re).data;else throw new Error("Can not access image data")}else ae=$.data}else if(Z){if(N===void 0)throw new Error("Please provide image config with format for Imagebitmap");const re=te();re.width=$.width,re.height=$.height;const pe=G(re);if(pe!=null){const L=$.height,O=$.width;return pe.drawImage($,0,0,O,L),ae=pe.getImageData(0,0,O,L).data,z.height=L,z.width=O,H(ae,z)}else throw new Error("Can not access image data")}else{if(ie)return new Promise((re,pe)=>{const L=te(),O=G(L);if(!$||!O)return pe();const j=new Image;j.crossOrigin="Anonymous",j.src=$,j.onload=()=>{L.width=j.width,L.height=j.height,O.drawImage(j,0,0,L.width,L.height);const A=O.getImageData(0,0,L.width,L.height);z.height=L.height,z.width=L.width,re(H(A.data,z))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(ae!==void 0)return H(ae,z);throw new Error("Input data provided is not supported - aborted tensor creation")},be=($,N)=>{const{width:P,height:ee,download:Z,dispose:ie}=N,ae=[1,ee,P,4];return new x.Tensor({location:"texture",type:"float32",texture:$,dims:ae,download:Z,dispose:ie})},xe=($,N)=>{const{dataType:P,dims:ee,download:Z,dispose:ie}=N;return new x.Tensor({location:"gpu-buffer",type:P??"float32",gpuBuffer:$,dims:ee,download:Z,dispose:ie})},B=($,N,P)=>new x.Tensor({location:"cpu-pinned",type:$,data:N,dims:P??[N.length]})},"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js":(xt,me,l)=>{l.r(me)},"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js":(xt,me,l)=>{l.r(me),l.d(me,{NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP:()=>H,NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP:()=>x,checkTypedArray:()=>be});const x=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),H=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let we=!1;const be=()=>{if(!we){we=!0;const xe=typeof BigInt64Array<"u"&&BigInt64Array.from,B=typeof BigUint64Array<"u"&&BigUint64Array.from,$=typeof Float16Array<"u"&&Float16Array.from;xe&&(x.set("int64",BigInt64Array),H.set(BigInt64Array,"int64")),B&&(x.set("uint64",BigUint64Array),H.set(BigUint64Array,"uint64")),$?(x.set("float16",Float16Array),H.set(Float16Array,"float16")):x.set("float16",Uint16Array)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js":(xt,me,l)=>{l.r(me),l.d(me,{Tensor:()=>xe});var x=l("./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"),H=l("./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"),we=l("./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"),be=l("./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js");class xe{constructor($,N,P){(0,we.checkTypedArray)();let ee,Z;if(typeof $=="object"&&"location"in $)switch(this.dataLocation=$.location,ee=$.type,Z=$.dims,$.location){case"cpu-pinned":{const ae=we.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(ee);if(!ae)throw new TypeError(`unsupported type "${ee}" to create tensor from pinned buffer`);if(!($.data instanceof ae))throw new TypeError(`buffer should be of type ${ae.name}`);this.cpuData=$.data;break}case"texture":{if(ee!=="float32")throw new TypeError(`unsupported type "${ee}" to create tensor from texture`);this.gpuTextureData=$.texture,this.downloader=$.download,this.disposer=$.dispose;break}case"gpu-buffer":{if(ee!=="float32"&&ee!=="float16"&&ee!=="int32"&&ee!=="int64"&&ee!=="uint32"&&ee!=="uint8"&&ee!=="bool")throw new TypeError(`unsupported type "${ee}" to create tensor from gpu buffer`);this.gpuBufferData=$.gpuBuffer,this.downloader=$.download,this.disposer=$.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let ae,z;if(typeof $=="string")if(ee=$,z=P,$==="string"){if(!Array.isArray(N))throw new TypeError("A string tensor's data must be a string array.");ae=N}else{const te=we.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get($);if(te===void 0)throw new TypeError(`Unsupported tensor type: ${$}.`);if(Array.isArray(N)){if($==="float16"&&te===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");$==="uint64"||$==="int64"?ae=te.from(N,BigInt):ae=te.from(N)}else if(N instanceof te)ae=N;else throw new TypeError(`A ${ee} tensor's data must be type of ${te}`)}else if(z=N,Array.isArray($)){if($.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const te=typeof $[0];if(te==="string")ee="string",ae=$;else if(te==="boolean")ee="bool",ae=Uint8Array.from($);else throw new TypeError(`Invalid element type of data array: ${te}.`)}else{const te=we.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get($.constructor);if(te===void 0)throw new TypeError(`Unsupported type for tensor data: ${$.constructor}.`);ee=te,ae=$}if(z===void 0)z=[ae.length];else if(!Array.isArray(z))throw new TypeError("A tensor's dims must be a number array");Z=z,this.cpuData=ae,this.dataLocation="cpu"}const ie=(0,be.calculateSize)(Z);if(this.cpuData&&ie!==this.cpuData.length)throw new Error(`Tensor's size(${ie}) does not match data length(${this.cpuData.length}).`);this.type=ee,this.dims=Z,this.size=ie}static async fromImage($,N){return(0,H.tensorFromImage)($,N)}static fromTexture($,N){return(0,H.tensorFromTexture)($,N)}static fromGpuBuffer($,N){return(0,H.tensorFromGpuBuffer)($,N)}static fromPinnedBuffer($,N,P){return(0,H.tensorFromPinnedBuffer)($,N,P)}toDataURL($){return(0,x.tensorToDataURL)(this,$)}toImageData($){return(0,x.tensorToImageData)(this,$)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData($){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const N=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=N,$&&this.disposer&&(this.disposer(),this.disposer=void 0),N}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape($){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return(0,be.tensorReshape)(this,$)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js":(xt,me,l)=>{l.r(me),l.d(me,{calculateSize:()=>H,tensorReshape:()=>we});var x=l("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const H=be=>{let xe=1;for(let B=0;B<be.length;B++){const $=be[B];if(typeof $!="number"||!Number.isSafeInteger($))throw new TypeError(`dims[${B}] must be an integer, got: ${$}`);if($<0)throw new RangeError(`dims[${B}] must be a non-negative integer, got: ${$}`);xe*=$}return xe},we=(be,xe)=>{switch(be.location){case"cpu":return new x.Tensor(be.type,be.data,xe);case"cpu-pinned":return new x.Tensor({location:"cpu-pinned",data:be.data,type:be.type,dims:xe});case"texture":return new x.Tensor({location:"texture",texture:be.texture,type:be.type,dims:xe});case"gpu-buffer":return new x.Tensor({location:"gpu-buffer",gpuBuffer:be.gpuBuffer,type:be.type,dims:xe});default:throw new Error(`tensorReshape: tensor location ${be.location} is not supported`)}}},"./node_modules/onnxruntime-common/dist/esm/tensor.js":(xt,me,l)=>{l.r(me),l.d(me,{Tensor:()=>H});var x=l("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const H=x.Tensor},"./node_modules/onnxruntime-common/dist/esm/trace.js":(xt,me,l)=>{l.r(me),l.d(me,{TRACE:()=>H,TRACE_FUNC_BEGIN:()=>be,TRACE_FUNC_END:()=>xe});var x=l("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const H=(B,$)=>{(typeof x.env.trace>"u"?!x.env.wasm.trace:!x.env.trace)||console.timeStamp(`${B}::ORT::${$}`)},we=(B,$)=>{var ee;const N=((ee=new Error().stack)==null?void 0:ee.split(/\r\n|\r|\n/g))||[];let P=!1;for(let Z=0;Z<N.length;Z++){if(P&&!N[Z].includes("TRACE_FUNC")){let ie=`FUNC_${B}::${N[Z].trim().split(" ")[1]}`;$&&(ie+=`::${$}`),H("CPU",ie);return}N[Z].includes("TRACE_FUNC")&&(P=!0)}},be=B=>{(typeof x.env.trace>"u"?!x.env.wasm.trace:!x.env.trace)||we("BEGIN",B)},xe=B=>{(typeof x.env.trace>"u"?!x.env.wasm.trace:!x.env.trace)||we("END",B)}},"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js":(xt,me,l)=>{l.r(me),l.d(me,{TrainingSession:()=>be});var x=l("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),H=l("./node_modules/onnxruntime-common/dist/esm/tensor.js");const we="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";class be{constructor(B,$,N){this.handler=B,this.hasOptimizerModel=$,this.hasEvalModel=N}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(B,$){const N=B.evalModel||"",P=B.optimizerModel||"",ee=$||{},[Z,ie]=await(0,x.resolveBackendAndExecutionProviders)(ee);if(Z.createTrainingSessionHandler){const ae=await Z.createTrainingSessionHandler(B.checkpointState,B.trainModel,N,P,ie);return new be(ae,!!B.optimizerModel,!!B.evalModel)}else throw new Error(we)}typeNarrowingForRunStep(B,$,N,P,ee){const Z={};let ie={};if(typeof N!="object"||N===null||N instanceof H.Tensor||Array.isArray(N))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let ae=!0;if(typeof P=="object"){if(P===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(P instanceof H.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(P)){if(P.length===0)throw new TypeError("'fetches' cannot be an empty array.");ae=!1;for(const z of P){if(typeof z!="string")throw new TypeError("'fetches' must be a string array or an object.");if($.indexOf(z)===-1)throw new RangeError(`'fetches' contains invalid output name: ${z}.`);Z[z]=null}if(typeof ee=="object"&&ee!==null)ie=ee;else if(typeof ee<"u")throw new TypeError("'options' must be an object.")}else{let z=!1;const te=Object.getOwnPropertyNames(P);for(const G of $)if(te.indexOf(G)!==-1){const re=P[G];(re===null||re instanceof H.Tensor)&&(z=!0,ae=!1,Z[G]=re)}if(z){if(typeof ee=="object"&&ee!==null)ie=ee;else if(typeof ee<"u")throw new TypeError("'options' must be an object.")}else ie=P}}else if(typeof P<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const z of B)if(typeof N[z]>"u")throw new Error(`input '${z}' is missing in 'feeds'.`);if(ae)for(const z of $)Z[z]=null;return[Z,ie]}convertHandlerReturnTypeToMapOfTensors(B){const $={};for(const N in B)if(Object.hasOwnProperty.call(B,N)){const P=B[N];P instanceof H.Tensor?$[N]=P:$[N]=new H.Tensor(P.type,P.data,P.dims)}return $}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(B,$,N){const[P,ee]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,B,$,N),Z=await this.handler.runTrainStep(B,P,ee);return this.convertHandlerReturnTypeToMapOfTensors(Z)}async runOptimizerStep(B){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(B||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(B,$,N){if(this.hasEvalModel){const[P,ee]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,B,$,N),Z=await this.handler.runEvalStep(B,P,ee);return this.convertHandlerReturnTypeToMapOfTensors(Z)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(B=!0){return this.handler.getParametersSize(B)}async loadParametersBuffer(B,$=!0){const N=await this.getParametersSize($);if(B.length!==4*N)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(B,$)}async getContiguousParameters(B=!0){return this.handler.getContiguousParameters(B)}async release(){return this.handler.dispose()}}},"./node_modules/onnxruntime-common/dist/esm/training-session.js":(xt,me,l)=>{l.r(me),l.d(me,{TrainingSession:()=>H});var x=l("./node_modules/onnxruntime-common/dist/esm/training-session-impl.js");const H=x.TrainingSession},"./node_modules/onnxruntime-common/dist/esm/version.js":(xt,me,l)=>{l.r(me),l.d(me,{version:()=>x});const x="1.18.0"},"./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs":(xt,me,l)=>{l.r(me),l.d(me,{InferenceSession:()=>gt,TRACE:()=>Ee,TRACE_FUNC_BEGIN:()=>qe,TRACE_FUNC_END:()=>Ve,Tensor:()=>ze,TrainingSession:()=>At,default:()=>_f,env:()=>A,registerBackend:()=>ie});/*!
 * ONNX Runtime Web v1.19.0-dev.20240804-ee2fe87e2d
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var x=Object.defineProperty,H=Object.getOwnPropertyDescriptor,we=Object.getOwnPropertyNames,be=Object.prototype.hasOwnProperty,xe=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),B=(e,t)=>()=>(e&&(t=e(e=0)),t),$=(e,t)=>{for(var r in t)x(e,r,{get:t[r],enumerable:!0})},N=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of we(t))!be.call(e,s)&&s!==r&&x(e,s,{get:()=>t[s],enumerable:!(n=H(t,s))||n.enumerable});return e},P=e=>N(x({},"__esModule",{value:!0}),e),ee,Z,ie,ae,z,te=B(()=>{ee=new Map,Z=[],ie=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=ee.get(e);if(n===void 0)ee.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let s=Z.indexOf(e);s!==-1&&Z.splice(s,1);for(let a=0;a<Z.length;a++)if(ee.get(Z[a]).priority<=r){Z.splice(a,0,e);return}Z.push(e)}return}throw new TypeError("not a valid backend")},ae=async e=>{let t=ee.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},z=async e=>{let t=e.executionProviders||[],r=t.map(c=>typeof c=="string"?c:c.name),n=r.length===0?Z:r,s,a=[],i=new Set;for(let c of n){let h=await ae(c);typeof h=="string"?a.push({name:c,err:h}):(s||(s=h),s===h&&i.add(c))}if(!s)throw new Error(`no available backend found. ERR: ${a.map(c=>`[${c.name}] ${c.err}`).join(", ")}`);for(let{name:c,err:h}of a)r.includes(c)&&console.warn(`removing requested execution provider "${c}" from session options because it is not available: ${h}`);let d=t.filter(c=>i.has(typeof c=="string"?c:c.name));return[s,new Proxy(e,{get:(c,h)=>h==="executionProviders"?d:Reflect.get(c,h)})]}}),G=B(()=>{te()}),re,pe=B(()=>{re="1.19.0-dev.20240730-530a2d7b41"}),L,O,j=B(()=>{pe(),L="warning",O={wasm:{},webgl:{},webgpu:{},versions:{common:re},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);L=e}},get logLevel(){return L}},Object.defineProperty(O,"logLevel",{enumerable:!0})}),A,_e=B(()=>{j(),A=O}),Me,Ce,ke=B(()=>{Me=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(n!=null){let s,a;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(s=e.dims[2],a=e.dims[3]):(s=e.dims[3],a=e.dims[2]);let i=(t==null?void 0:t.format)!==void 0?t.format:"RGB",d=t==null?void 0:t.norm,c,h;d===void 0||d.mean===void 0?c=[255,255,255,255]:typeof d.mean=="number"?c=[d.mean,d.mean,d.mean,d.mean]:(c=[d.mean[0],d.mean[1],d.mean[2],0],d.mean[3]!==void 0&&(c[3]=d.mean[3])),d===void 0||d.bias===void 0?h=[0,0,0,0]:typeof d.bias=="number"?h=[d.bias,d.bias,d.bias,d.bias]:(h=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(h[3]=d.bias[3]));let w=a*s,y=0,u=w,k=w*2,C=-1;i==="RGBA"?(y=0,u=w,k=w*2,C=w*3):i==="RGB"?(y=0,u=w,k=w*2):i==="RBG"&&(y=0,k=w,u=w*2);for(let I=0;I<a;I++)for(let U=0;U<s;U++){let q=(e.data[y++]-h[0])*c[0],R=(e.data[u++]-h[1])*c[1],ce=(e.data[k++]-h[2])*c[2],J=C===-1?255:(e.data[C++]-h[3])*c[3];n.fillStyle="rgba("+q+","+R+","+ce+","+J+")",n.fillRect(U,I,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Ce=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let s,a,i;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(s=e.dims[2],a=e.dims[1],i=e.dims[3]):(s=e.dims[3],a=e.dims[2],i=e.dims[1]);let d=t!==void 0&&t.format!==void 0?t.format:"RGB",c=t==null?void 0:t.norm,h,w;c===void 0||c.mean===void 0?h=[255,255,255,255]:typeof c.mean=="number"?h=[c.mean,c.mean,c.mean,c.mean]:(h=[c.mean[0],c.mean[1],c.mean[2],255],c.mean[3]!==void 0&&(h[3]=c.mean[3])),c===void 0||c.bias===void 0?w=[0,0,0,0]:typeof c.bias=="number"?w=[c.bias,c.bias,c.bias,c.bias]:(w=[c.bias[0],c.bias[1],c.bias[2],0],c.bias[3]!==void 0&&(w[3]=c.bias[3]));let y=a*s;if(t!==void 0&&(t.format!==void 0&&i===4&&t.format!=="RGBA"||i===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let u=4,k=0,C=1,I=2,U=3,q=0,R=y,ce=y*2,J=-1;d==="RGBA"?(q=0,R=y,ce=y*2,J=y*3):d==="RGB"?(q=0,R=y,ce=y*2):d==="RBG"&&(q=0,ce=y,R=y*2),n=r.createImageData(s,a);for(let oe=0;oe<a*s;k+=u,C+=u,I+=u,U+=u,oe++)n.data[k]=(e.data[q++]-w[0])*h[0],n.data[C]=(e.data[R++]-w[1])*h[1],n.data[I]=(e.data[ce++]-w[2])*h[2],n.data[U]=J===-1?255:(e.data[J++]-w[3])*h[3]}else throw new Error("Can not access image data");return n}}),De,Je,Ue,bt,ge,V=B(()=>{Tt(),De=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=t,s=t.norm??{mean:255,bias:0},a,i;typeof s.mean=="number"?a=[s.mean,s.mean,s.mean,s.mean]:a=[s.mean[0],s.mean[1],s.mean[2],s.mean[3]??255],typeof s.bias=="number"?i=[s.bias,s.bias,s.bias,s.bias]:i=[s.bias[0],s.bias[1],s.bias[2],s.bias[3]??0];let d=t.format!==void 0?t.format:"RGBA",c=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",h=r*n,w=c==="RGBA"?new Float32Array(h*4):new Float32Array(h*3),y=4,u=0,k=1,C=2,I=3,U=0,q=h,R=h*2,ce=-1;d==="RGB"&&(y=3,u=0,k=1,C=2,I=-1),c==="RGBA"?ce=h*3:c==="RBG"?(U=0,R=h,q=h*2):c==="BGR"&&(R=0,q=h,U=h*2);for(let J=0;J<h;J++,u+=y,C+=y,k+=y,I+=y)w[U++]=(e[u]+i[0])/a[0],w[q++]=(e[k]+i[1])/a[1],w[R++]=(e[C]+i[2])/a[2],ce!==-1&&I!==-1&&(w[ce++]=(e[I]+i[3])/a[3]);return c==="RGBA"?new st("float32",w,[1,4,r,n]):new st("float32",w,[1,3,r,n])},Je=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,s=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,a=typeof e=="string",i,d=t??{},c=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},h=w=>w instanceof HTMLCanvasElement||w instanceof OffscreenCanvas?w.getContext("2d"):null;if(r){let w=c();w.width=e.width,w.height=e.height;let y=h(w);if(y!=null){let u=e.height,k=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(u=t.resizedHeight,k=t.resizedWidth),t!==void 0){if(d=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");d.tensorFormat="RGBA",d.height=u,d.width=k}else d.tensorFormat="RGBA",d.height=u,d.width=k;y.drawImage(e,0,0),i=y.getImageData(0,0,k,u).data}else throw new Error("Can not access image data")}else if(n){let w,y;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(w=t.resizedHeight,y=t.resizedWidth):(w=e.height,y=e.width),t!==void 0&&(d=t),d.format="RGBA",d.height=w,d.width=y,t!==void 0){let u=c();u.width=y,u.height=w;let k=h(u);if(k!=null)k.putImageData(e,0,0),i=k.getImageData(0,0,y,w).data;else throw new Error("Can not access image data")}else i=e.data}else if(s){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let w=c();w.width=e.width,w.height=e.height;let y=h(w);if(y!=null){let u=e.height,k=e.width;return y.drawImage(e,0,0,k,u),i=y.getImageData(0,0,k,u).data,d.height=u,d.width=k,De(i,d)}else throw new Error("Can not access image data")}else{if(a)return new Promise((w,y)=>{let u=c(),k=h(u);if(!e||!k)return y();let C=new Image;C.crossOrigin="Anonymous",C.src=e,C.onload=()=>{u.width=C.width,u.height=C.height,k.drawImage(C,0,0,u.width,u.height);let I=k.getImageData(0,0,u.width,u.height);d.height=u.height,d.width=u.width,w(De(I.data,d))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(i!==void 0)return De(i,d);throw new Error("Input data provided is not supported - aborted tensor creation")},Ue=(e,t)=>{let{width:r,height:n,download:s,dispose:a}=t,i=[1,n,r,4];return new st({location:"texture",type:"float32",texture:e,dims:i,download:s,dispose:a})},bt=(e,t)=>{let{dataType:r,dims:n,download:s,dispose:a}=t;return new st({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:s,dispose:a})},ge=(e,t,r)=>new st({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})}),he,$e,ne,Ke,ct=B(()=>{he=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),$e=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),ne=!1,Ke=()=>{if(!ne){ne=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=typeof Float16Array<"u"&&Float16Array.from;e&&(he.set("int64",BigInt64Array),$e.set(BigInt64Array,"int64")),t&&(he.set("uint64",BigUint64Array),$e.set(BigUint64Array,"uint64")),r?(he.set("float16",Float16Array),$e.set(Float16Array,"float16")):he.set("float16",Uint16Array)}}}),rt,ot,Re=B(()=>{Tt(),rt=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},ot=(e,t)=>{switch(e.location){case"cpu":return new st(e.type,e.data,t);case"cpu-pinned":return new st({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new st({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new st({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),st,Tt=B(()=>{ke(),V(),ct(),Re(),st=class{constructor(e,t,r){Ke();let n,s;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,n=e.type,s=e.dims,e.location){case"cpu-pinned":{let i=he.get(n);if(!i)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(e.data instanceof i))throw new TypeError(`buffer should be of type ${i.name}`);this.cpuData=e.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let i,d;if(typeof e=="string")if(n=e,d=r,e==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");i=t}else{let c=he.get(e);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if(e==="float16"&&c===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");e==="uint64"||e==="int64"?i=c.from(t,BigInt):i=c.from(t)}else if(t instanceof c)i=t;else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(d=t,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let c=typeof e[0];if(c==="string")n="string",i=e;else if(c==="boolean")n="bool",i=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else{let c=$e.get(e.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=c,i=e}if(d===void 0)d=[i.length];else if(!Array.isArray(d))throw new TypeError("A tensor's dims must be a number array");s=d,this.cpuData=i,this.dataLocation="cpu"}let a=rt(s);if(this.cpuData&&a!==this.cpuData.length)throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=a}static async fromImage(e,t){return Je(e,t)}static fromTexture(e,t){return Ue(e,t)}static fromGpuBuffer(e,t){return bt(e,t)}static fromPinnedBuffer(e,t,r){return ge(e,t,r)}toDataURL(e){return Me(this,e)}toImageData(e){return Ce(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return ot(this,e)}}}),ze,se=B(()=>{Tt(),ze=st}),Ee,je,qe,Ve,Xe=B(()=>{j(),Ee=(e,t)=>{(typeof O.trace>"u"?!O.wasm.trace:!O.trace)||console.timeStamp(`${e}::ORT::${t}`)},je=(e,t)=>{var s;let r=((s=new Error().stack)==null?void 0:s.split(/\r\n|\r|\n/g))||[],n=!1;for(let a=0;a<r.length;a++){if(n&&!r[a].includes("TRACE_FUNC")){let i=`FUNC_${e}::${r[a].trim().split(" ")[1]}`;t&&(i+=`::${t}`),Ee("CPU",i);return}r[a].includes("TRACE_FUNC")&&(n=!0)}},qe=e=>{(typeof O.trace>"u"?!O.wasm.trace:!O.trace)||je("BEGIN",e)},Ve=e=>{(typeof O.trace>"u"?!O.wasm.trace:!O.trace)||je("END",e)}}),lt,ft=B(()=>{te(),se(),Xe(),lt=class Kh{constructor(t){this.handler=t}async run(t,r,n){qe();let s={},a={};if(typeof t!="object"||t===null||t instanceof ze||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof ze)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let h of r){if(typeof h!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(h)===-1)throw new RangeError(`'fetches' contains invalid output name: ${h}.`);s[h]=null}if(typeof n=="object"&&n!==null)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let h=!1,w=Object.getOwnPropertyNames(r);for(let y of this.outputNames)if(w.indexOf(y)!==-1){let u=r[y];(u===null||u instanceof ze)&&(h=!0,i=!1,s[y]=u)}if(h){if(typeof n=="object"&&n!==null)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else a=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let h of this.inputNames)if(typeof t[h]>"u")throw new Error(`input '${h}' is missing in 'feeds'.`);if(i)for(let h of this.outputNames)s[h]=null;let d=await this.handler.run(t,s,a),c={};for(let h in d)if(Object.hasOwnProperty.call(d,h)){let w=d[h];w instanceof ze?c[h]=w:c[h]=new ze(w.type,w.data,w.dims)}return Ve(),c}async release(){return this.handler.dispose()}static async create(t,r,n,s){qe();let a,i={};if(typeof t=="string"){if(a=t,typeof r=="object"&&r!==null)i=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(a=t,typeof r=="object"&&r!==null)i=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let w=t,y=0,u=t.byteLength;if(typeof r=="object"&&r!==null)i=r;else if(typeof r=="number"){if(y=r,!Number.isSafeInteger(y))throw new RangeError("'byteOffset' must be an integer.");if(y<0||y>=w.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${w.byteLength}).`);if(u=t.byteLength-y,typeof n=="number"){if(u=n,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||y+u>w.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${w.byteLength-y}].`);if(typeof s=="object"&&s!==null)i=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");a=new Uint8Array(w,y,u)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[d,c]=await z(i),h=await d.createInferenceSessionHandler(a,c);return Ve(),new Kh(h)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}),gt,vt=B(()=>{ft(),gt=lt}),M=B(()=>{}),W=B(()=>{}),S=B(()=>{}),Q=B(()=>{}),fe,Ye,et=B(()=>{te(),se(),fe="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Ye=class Xh{constructor(t,r,n){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let n=t.evalModel||"",s=t.optimizerModel||"",a=r||{},[i,d]=await z(a);if(i.createTrainingSessionHandler){let c=await i.createTrainingSessionHandler(t.checkpointState,t.trainModel,n,s,d);return new Xh(c,!!t.optimizerModel,!!t.evalModel)}else throw new Error(fe)}typeNarrowingForRunStep(t,r,n,s,a){let i={},d={};if(typeof n!="object"||n===null||n instanceof ze||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let c=!0;if(typeof s=="object"){if(s===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(s instanceof ze)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(s)){if(s.length===0)throw new TypeError("'fetches' cannot be an empty array.");c=!1;for(let h of s){if(typeof h!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(h)===-1)throw new RangeError(`'fetches' contains invalid output name: ${h}.`);i[h]=null}if(typeof a=="object"&&a!==null)d=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let h=!1,w=Object.getOwnPropertyNames(s);for(let y of r)if(w.indexOf(y)!==-1){let u=s[y];(u===null||u instanceof ze)&&(h=!0,c=!1,i[y]=u)}if(h){if(typeof a=="object"&&a!==null)d=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else d=s}}else if(typeof s<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let h of t)if(typeof n[h]>"u")throw new Error(`input '${h}' is missing in 'feeds'.`);if(c)for(let h of r)i[h]=null;return[i,d]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let n in t)if(Object.hasOwnProperty.call(t,n)){let s=t[n];s instanceof ze?r[n]=s:r[n]=new ze(s.type,s.data,s.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,n){let[s,a]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,n),i=await this.handler.runTrainStep(t,s,a);return this.convertHandlerReturnTypeToMapOfTensors(i)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,n){if(this.hasEvalModel){let[s,a]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,n),i=await this.handler.runEvalStep(t,s,a);return this.convertHandlerReturnTypeToMapOfTensors(i)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let n=await this.getParametersSize(r);if(t.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}}),At,mt=B(()=>{et(),At=Ye}),Se={};$(Se,{InferenceSession:()=>gt,TRACE:()=>Ee,TRACE_FUNC_BEGIN:()=>qe,TRACE_FUNC_END:()=>Ve,Tensor:()=>ze,TrainingSession:()=>At,env:()=>A,registerBackend:()=>ie});var E=B(()=>{G(),_e(),vt(),se(),M(),W(),Xe(),S(),Q(),mt()}),X=B(()=>{}),ye={};$(ye,{default:()=>Ne});var Be,Ae,Ne,ut=B(()=>{var e;fp(),Jr(),Ur(),Be="ort-wasm-proxy-worker",Ae=((e=globalThis.self)==null?void 0:e.name)===Be,Ae&&(self.onmessage=t=>{let{type:r,in:n}=t.data;try{switch(r){case"init-wasm":An(n.wasm).then(()=>{zd(n).then(()=>{postMessage({type:r})},s=>{postMessage({type:r,err:s})})},s=>{postMessage({type:r,err:s})});break;case"init-ep":{let{epName:s,env:a}=n;Dd(a,s).then(()=>{postMessage({type:r})},i=>{postMessage({type:r,err:i})});break}case"copy-from":{let{buffer:s}=n,a=pd(s);postMessage({type:r,out:a});break}case"create":{let{model:s,options:a}=n;Bd(s,a).then(i=>{postMessage({type:r,out:i})},i=>{postMessage({type:r,err:i})});break}case"release":Ld(n),postMessage({type:r});break;case"run":{let{sessionId:s,inputIndices:a,inputs:i,outputIndices:d,options:c}=n;Nd(s,a,i,d,new Array(d.length).fill(null),c).then(h=>{h.some(w=>w[3]!=="cpu")?postMessage({type:r,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:r,out:h},Vd([...i,...h]))},h=>{postMessage({type:r,err:h})});break}case"end-profiling":jd(n),postMessage({type:r});break;default:}}catch(s){postMessage({type:r,err:s})}}),Ne=Ae?null:t=>new Worker(t??Qe,{type:"module",name:Be})}),nt={};$(nt,{default:()=>Ct});var Mt,ht,Ct,Rt=B(()=>{var e;ht=(Mt=self.location.href,async function(t={}){function r(){return dr.buffer!=Zt.buffer&&pn(),Zt}function n(){return dr.buffer!=Zt.buffer&&pn(),fr}function s(){return dr.buffer!=Zt.buffer&&pn(),Le}function a(){return dr.buffer!=Zt.buffer&&pn(),jt}function i(){return dr.buffer!=Zt.buffer&&pn(),rr}function d(){return dr.buffer!=Zt.buffer&&pn(),Lr}function c(){return dr.buffer!=Zt.buffer&&pn(),Xr}function h(){return dr.buffer!=Zt.buffer&&pn(),En}var w,y,u=Object.assign({},t),k=new Promise((o,f)=>{w=o,y=f}),C=typeof window=="object",I=typeof importScripts=="function",U=I&&self.name=="em-pthread";u.mountExternalData=(o,f)=>{(u.Fb||(u.Fb=new Map)).set(o,f)},u.unmountExternalData=()=>{delete u.Fb};var q=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let R=()=>{let o=(b,v,D)=>(...de)=>{let We=rs,at=v==null?void 0:v();de=b(...de);let Et=v==null?void 0:v();return at!==Et&&(b=Et,D(at),v=D=null),rs!=We?new Promise((Ft,Kt)=>{ac={resolve:Ft,reject:Kt}}):de},f=b=>async(...v)=>{var D;try{if(u.Eb)throw Error("Session already started");let de=u.Eb={bc:v[0],errors:[]},We=await b(...v);if(u.Eb!==de)throw Error("Session mismatch");(D=u.Mb)==null||D.flush();let at=de.errors;if(0<at.length){let Et=await Promise.all(at);if(Et=Et.filter(Ft=>Ft),0<Et.length)throw Error(Et.join(`
`))}return We}finally{u.Eb=null}};u._OrtCreateSession=o(u._OrtCreateSession,()=>u._OrtCreateSession,b=>u._OrtCreateSession=b),u._OrtRun=f(o(u._OrtRun,()=>u._OrtRun,b=>u._OrtRun=b)),u._OrtRunWithBinding=f(o(u._OrtRunWithBinding,()=>u._OrtRunWithBinding,b=>u._OrtRunWithBinding=b)),u._OrtBindInput=o(u._OrtBindInput,()=>u._OrtBindInput,b=>u._OrtBindInput=b),R=void 0};u.jsepInit=(o,f)=>{if(R==null||R(),o==="webgpu"){[u.Mb,u.Tb,u.Xb,u.Nb,u.Wb,u.jb,u.Yb,u.$b,u.Ub,u.Vb,u.Zb]=f;let b=u.Mb;u.jsepRegisterBuffer=(v,D,de,We)=>b.registerBuffer(v,D,de,We),u.jsepGetBuffer=v=>b.getBuffer(v),u.jsepCreateDownloader=(v,D,de)=>b.createDownloader(v,D,de),u.jsepOnReleaseSession=v=>{b.onReleaseSession(v)},u.jsepOnRunStart=v=>b.onRunStart(v)}};var ce,J,oe=Object.assign({},u),tt="./this.program",Ge=(o,f)=>{throw f},dt="";(C||I)&&(I?dt=self.location.href:typeof document<"u"&&document.currentScript&&(dt=document.currentScript.src),Mt&&(dt=Mt),dt=dt.startsWith("blob:")?"":dt.substr(0,dt.replace(/[?#].*/,"").lastIndexOf("/")+1),I&&(J=o=>{var f=new XMLHttpRequest;return f.open("GET",o,!1),f.responseType="arraybuffer",f.send(null),new Uint8Array(f.response)}),ce=(o,f,b)=>{var v=new XMLHttpRequest;v.open("GET",o,!0),v.responseType="arraybuffer",v.onload=()=>{v.status==200||v.status==0&&v.response?f(v.response):b()},v.onerror=b,v.send(null)});var zt,Dt=console.log.bind(console),cr=console.error.bind(console),_r=Dt,nr=cr;if(Object.assign(u,oe),oe=null,U){let o=function(f){try{var b=f.data,v=b.cmd;if(v==="load"){let D=[];self.onmessage=de=>D.push(de),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let de of D)o(de);self.onmessage=o};for(let de of b.handlers)u[de]&&!u[de].proxy||(u[de]=(...We)=>{postMessage({Lb:"callHandler",kc:de,args:We})},de=="print"&&(_r=u[de]),de=="printErr"&&(nr=u[de]));dr=b.wasmMemory,pn(),Sr(b.wasmModule)}else if(v==="run"){dc(b.pthread_ptr,0,0,1,0,0),nc(b.pthread_ptr),yf(),Rp(),Wr||(Dh(),Wr=!0);try{bf(b.start_routine,b.arg)}catch(D){if(D!="unwind")throw D}}else v==="cancel"?Oa()&&Ed(-1):b.target!=="setimmediate"&&(v==="checkMailbox"?Wr&&gd():v&&(nr(`worker: received unknown command ${v}`),nr(b)))}catch(D){throw Bh(),D}};var Sr,Wr=!1;nr=function(...f){f=f.join(" "),console.error(f)},self.alert=function(...f){postMessage({Lb:"alert",text:f.join(" "),mc:Oa()})},u.instantiateWasm=(f,b)=>new Promise(v=>{Sr=D=>{D=new WebAssembly.Instance(D,Op()),b(D),v()}}),self.onunhandledrejection=f=>{throw f.reason||f},self.onmessage=o}u.wasmBinary&&(zt=u.wasmBinary);var dr,Nr,Lt,Zt,fr,Le,jt,rr,Lr,Xr,sn,zs,En,Pn=!1;function pn(){var o=dr.buffer;u.HEAP8=Zt=new Int8Array(o),u.HEAP16=Le=new Int16Array(o),u.HEAPU8=fr=new Uint8Array(o),u.HEAPU16=jt=new Uint16Array(o),u.HEAP32=rr=new Int32Array(o),u.HEAPU32=Lr=new Uint32Array(o),u.HEAPF32=Xr=new Float32Array(o),u.HEAPF64=En=new Float64Array(o),u.HEAP64=sn=new BigInt64Array(o),u.HEAPU64=zs=new BigUint64Array(o)}if(!U){if(!((dr=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof q))throw nr("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");pn()}var Ou=[],hn=[],yn=[],Ln=0,Ds=null;function md(){if(--Ln==0&&Ds){var o=Ds;Ds=null,o()}}function Aa(o){throw nr(o="Aborted("+o+")"),Pn=!0,Lt=1,o=new WebAssembly.RuntimeError(o+". Build with -sASSERTIONS for more info."),y(o),o}var Gd,Pp=o=>o.startsWith("data:application/octet-stream;base64,"),Ap=o=>o.startsWith("file://");function Ip(o){if(o==Gd&&zt)return new Uint8Array(zt);if(J)return J(o);throw"both async and sync fetching of the wasm failed"}function Fp(o,f,b){return function(v){if(!zt&&(C||I)){if(typeof fetch=="function"&&!Ap(v))return fetch(v,{credentials:"same-origin"}).then(D=>{if(!D.ok)throw`failed to load wasm binary file at '${v}'`;return D.arrayBuffer()}).catch(()=>Ip(v));if(ce)return new Promise((D,de)=>{ce(v,We=>D(new Uint8Array(We)),de)})}return Promise.resolve().then(()=>Ip(v))}(o).then(v=>WebAssembly.instantiate(v,f)).then(b,v=>{nr(`failed to asynchronously prepare wasm: ${v}`),Aa(v)})}function Op(){return{a:{M:wf,za:gf,b:vf,$:Up,z:qp,pa:Hp,X:Xp,Z:Qp,qa:Yp,na:Zp,ga:Jp,ma:eh,J:th,Y:rh,V:nh,oa:sh,W:ih,va:xf,D:Tf,P:Cf,O:$f,C:kf,s:Pf,p:Af,E:If,y:Rf,Q:Nf,ta:jf,ja:Vf,T:Uf,aa:Wf,F:Gf,ia:nc,sa:qf,u:Hf,B:Qf,o:Yf,m:Jf,c:tc,n:em,k:nm,Aa:sm,r:im,f:am,v:om,l:lm,g:um,i:dm,j:cm,h:pm,e:hm,da:fm,ea:mm,fa:_m,ba:yh,ca:bh,S:gm,d:wm,N:ym,G:bm,K:Mm,w:vm,ra:xm,U:Tm,t:vh,x:Cm,L:Em,R:$m,ya:Sm,xa:km,ka:Ch,la:Eh,_:Qd,A:$h,I:Sh,ha:kh,H:Ph,a:dr,wa:Xd,ua:Fh,q:Im}}}var qd={848436:(o,f,b,v)=>{if(u===void 0||!u.Fb)return 1;if((o=un(o>>>0)).startsWith("./")&&(o=o.substring(2)),!(o=u.Fb.get(o)))return 2;if(v>>>=0,(f>>>=0)+(b>>>=0)>o.byteLength)return 3;try{return n().set(o.subarray(f,f+b),v>>>0),0}catch{return 4}},848937:()=>{u.Ub()},848968:()=>{u.Vb()},848997:()=>{u.Zb()},849022:o=>u.Tb(o),849055:o=>u.Xb(o),849087:(o,f,b)=>{u.Nb(o,f,b,!0)},849126:(o,f,b)=>{u.Nb(o,f,b)},849159:()=>typeof wasmOffsetConverter<"u",849216:o=>{u.jb("Abs",o,void 0)},849267:o=>{u.jb("Neg",o,void 0)},849318:o=>{u.jb("Floor",o,void 0)},849371:o=>{u.jb("Ceil",o,void 0)},849423:o=>{u.jb("Reciprocal",o,void 0)},849481:o=>{u.jb("Sqrt",o,void 0)},849533:o=>{u.jb("Exp",o,void 0)},849584:o=>{u.jb("Erf",o,void 0)},849635:o=>{u.jb("Sigmoid",o,void 0)},849690:(o,f,b)=>{u.jb("HardSigmoid",o,{alpha:f,beta:b})},849769:o=>{u.jb("Log",o,void 0)},849820:o=>{u.jb("Sin",o,void 0)},849871:o=>{u.jb("Cos",o,void 0)},849922:o=>{u.jb("Tan",o,void 0)},849973:o=>{u.jb("Asin",o,void 0)},850025:o=>{u.jb("Acos",o,void 0)},850077:o=>{u.jb("Atan",o,void 0)},850129:o=>{u.jb("Sinh",o,void 0)},850181:o=>{u.jb("Cosh",o,void 0)},850233:o=>{u.jb("Asinh",o,void 0)},850286:o=>{u.jb("Acosh",o,void 0)},850339:o=>{u.jb("Atanh",o,void 0)},850392:o=>{u.jb("Tanh",o,void 0)},850444:o=>{u.jb("Not",o,void 0)},850495:(o,f,b)=>{u.jb("Clip",o,{min:f,max:b})},850564:o=>{u.jb("Clip",o,void 0)},850616:(o,f)=>{u.jb("Elu",o,{alpha:f})},850674:o=>{u.jb("Relu",o,void 0)},850726:(o,f)=>{u.jb("LeakyRelu",o,{alpha:f})},850790:(o,f)=>{u.jb("ThresholdedRelu",o,{alpha:f})},850860:(o,f)=>{u.jb("Cast",o,{to:f})},850918:o=>{u.jb("Add",o,void 0)},850969:o=>{u.jb("Sub",o,void 0)},851020:o=>{u.jb("Mul",o,void 0)},851071:o=>{u.jb("Div",o,void 0)},851122:o=>{u.jb("Pow",o,void 0)},851173:o=>{u.jb("Equal",o,void 0)},851226:o=>{u.jb("Greater",o,void 0)},851281:o=>{u.jb("GreaterOrEqual",o,void 0)},851343:o=>{u.jb("Less",o,void 0)},851395:o=>{u.jb("LessOrEqual",o,void 0)},851454:(o,f,b,v,D)=>{u.jb("ReduceMean",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},851613:(o,f,b,v,D)=>{u.jb("ReduceMax",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},851771:(o,f,b,v,D)=>{u.jb("ReduceMin",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},851929:(o,f,b,v,D)=>{u.jb("ReduceProd",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},852088:(o,f,b,v,D)=>{u.jb("ReduceSum",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},852246:(o,f,b,v,D)=>{u.jb("ReduceL1",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},852403:(o,f,b,v,D)=>{u.jb("ReduceL2",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},852560:(o,f,b,v,D)=>{u.jb("ReduceLogSum",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},852721:(o,f,b,v,D)=>{u.jb("ReduceSumSquare",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},852885:(o,f,b,v,D)=>{u.jb("ReduceLogSumExp",o,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},853049:o=>{u.jb("Where",o,void 0)},853102:(o,f,b)=>{u.jb("Transpose",o,{perm:f?Array.from(i().subarray(f>>>0,b>>>0)):[]})},853210:(o,f,b,v)=>{u.jb("DepthToSpace",o,{blocksize:f,mode:un(b),format:v?"NHWC":"NCHW"})},853343:(o,f,b,v)=>{u.jb("DepthToSpace",o,{blocksize:f,mode:un(b),format:v?"NHWC":"NCHW"})},853476:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe,ar)=>{u.jb("ConvTranspose",o,{format:Et?"NHWC":"NCHW",autoPad:f,dilations:[b],group:v,kernelShape:[D],pads:[de,We],strides:[at],wIsConst:()=>!!r()[Ft>>>0],outputPadding:Kt?Array.from(i().subarray(Kt>>>0,kr>>>0)):[],outputShape:Fr?Array.from(i().subarray(Fr>>>0,Oe>>>0)):[],activation:un(ar)})},853877:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe)=>{u.jb("ConvTranspose",o,{format:at?"NHWC":"NCHW",autoPad:f,dilations:Array.from(i().subarray(b>>>0,2+(b>>>0)>>>0)),group:v,kernelShape:Array.from(i().subarray(D>>>0,2+(D>>>0)>>>0)),pads:Array.from(i().subarray(de>>>0,4+(de>>>0)>>>0)),strides:Array.from(i().subarray(We>>>0,2+(We>>>0)>>>0)),wIsConst:()=>!!r()[Et>>>0],outputPadding:Ft?Array.from(i().subarray(Ft>>>0,Kt>>>0)):[],outputShape:kr?Array.from(i().subarray(kr>>>0,Fr>>>0)):[],activation:un(Oe)})},854442:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe,ar)=>{u.jb("ConvTranspose",o,{format:Et?"NHWC":"NCHW",autoPad:f,dilations:[b],group:v,kernelShape:[D],pads:[de,We],strides:[at],wIsConst:()=>!!r()[Ft>>>0],outputPadding:Kt?Array.from(i().subarray(Kt>>>0,kr>>>0)):[],outputShape:Fr?Array.from(i().subarray(Fr>>>0,Oe>>>0)):[],activation:un(ar)})},854843:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe)=>{u.jb("ConvTranspose",o,{format:at?"NHWC":"NCHW",autoPad:f,dilations:Array.from(i().subarray(b>>>0,2+(b>>>0)>>>0)),group:v,kernelShape:Array.from(i().subarray(D>>>0,2+(D>>>0)>>>0)),pads:Array.from(i().subarray(de>>>0,4+(de>>>0)>>>0)),strides:Array.from(i().subarray(We>>>0,2+(We>>>0)>>>0)),wIsConst:()=>!!r()[Et>>>0],outputPadding:Ft?Array.from(i().subarray(Ft>>>0,Kt>>>0)):[],outputShape:kr?Array.from(i().subarray(kr>>>0,Fr>>>0)):[],activation:un(Oe)})},855408:(o,f)=>{u.jb("GlobalAveragePool",o,{format:f?"NHWC":"NCHW"})},855499:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe,ar,zr)=>{u.jb("AveragePool",o,{format:zr?"NHWC":"NCHW",auto_pad:f,ceil_mode:b,count_include_pad:v,storage_order:D,dilations:[de,We],kernel_shape:[at,Et],pads:[Ft,Kt,kr,Fr],strides:[Oe,ar]})},855783:(o,f)=>{u.jb("GlobalAveragePool",o,{format:f?"NHWC":"NCHW"})},855874:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe,ar,zr)=>{u.jb("AveragePool",o,{format:zr?"NHWC":"NCHW",auto_pad:f,ceil_mode:b,count_include_pad:v,storage_order:D,dilations:[de,We],kernel_shape:[at,Et],pads:[Ft,Kt,kr,Fr],strides:[Oe,ar]})},856158:(o,f)=>{u.jb("GlobalMaxPool",o,{format:f?"NHWC":"NCHW"})},856245:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe,ar,zr)=>{u.jb("MaxPool",o,{format:zr?"NHWC":"NCHW",auto_pad:f,ceil_mode:b,count_include_pad:v,storage_order:D,dilations:[de,We],kernel_shape:[at,Et],pads:[Ft,Kt,kr,Fr],strides:[Oe,ar]})},856525:(o,f)=>{u.jb("GlobalMaxPool",o,{format:f?"NHWC":"NCHW"})},856612:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe,ar,zr)=>{u.jb("MaxPool",o,{format:zr?"NHWC":"NCHW",auto_pad:f,ceil_mode:b,count_include_pad:v,storage_order:D,dilations:[de,We],kernel_shape:[at,Et],pads:[Ft,Kt,kr,Fr],strides:[Oe,ar]})},856892:(o,f,b,v,D)=>{u.jb("Gemm",o,{alpha:f,beta:b,transA:v,transB:D})},856996:o=>{u.jb("MatMul",o,void 0)},857050:(o,f,b,v)=>{u.jb("ArgMax",o,{keepDims:!!f,selectLastIndex:!!b,axis:v})},857158:(o,f,b,v)=>{u.jb("ArgMin",o,{keepDims:!!f,selectLastIndex:!!b,axis:v})},857266:(o,f)=>{u.jb("Softmax",o,{axis:f})},857329:(o,f)=>{u.jb("Concat",o,{axis:f})},857389:(o,f,b,v,D)=>{u.jb("Split",o,{axis:f,numOutputs:b,splitSizes:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},857529:o=>{u.jb("Expand",o,void 0)},857583:(o,f)=>{u.jb("Gather",o,{axis:Number(f)})},857654:(o,f)=>{u.jb("GatherElements",o,{axis:Number(f)})},857733:(o,f,b,v,D,de,We,at,Et,Ft,Kt)=>{u.jb("Resize",o,{antialias:f,axes:b?Array.from(i().subarray(b>>>0,v>>>0)):[],coordinateTransformMode:un(D),cubicCoeffA:de,excludeOutside:We,extrapolationValue:at,keepAspectRatioPolicy:un(Et),mode:un(Ft),nearestMode:un(Kt)})},858079:(o,f,b,v,D,de,We)=>{u.jb("Slice",o,{starts:f?Array.from(i().subarray(f>>>0,b>>>0)):[],ends:v?Array.from(i().subarray(v>>>0,D>>>0)):[],axes:de?Array.from(i().subarray(de>>>0,We>>>0)):[]})},858295:o=>{u.jb("Tile",o,void 0)},858347:(o,f,b)=>{u.jb("InstanceNormalization",o,{epsilon:f,format:b?"NHWC":"NCHW"})},858461:(o,f,b)=>{u.jb("InstanceNormalization",o,{epsilon:f,format:b?"NHWC":"NCHW"})},858575:o=>{u.jb("Range",o,void 0)},858628:(o,f)=>{u.jb("Einsum",o,{equation:un(f)})},858709:(o,f,b,v,D)=>{u.jb("Pad",o,{mode:f,value:b,pads:v?Array.from(i().subarray(v>>>0,D>>>0)):[]})},858836:(o,f,b,v,D,de)=>{u.jb("BatchNormalization",o,{epsilon:f,momentum:b,spatial:!!D,trainingMode:!!v,format:de?"NHWC":"NCHW"})},859005:(o,f,b,v,D,de)=>{u.jb("BatchNormalization",o,{epsilon:f,momentum:b,spatial:!!D,trainingMode:!!v,format:de?"NHWC":"NCHW"})},859174:(o,f,b)=>{u.jb("CumSum",o,{exclusive:Number(f),reverse:Number(b)})},859271:(o,f,b,v,D,de,We,at,Et)=>{u.jb("Attention",o,{numHeads:f,isUnidirectional:b,maskFilterValue:v,scale:D,doRotary:de,qkvHiddenSizes:We?Array.from(i().subarray(Number(at)>>>0,Number(at)+We>>>0)):[],pastPresentShareBuffer:!!Et})},859543:o=>{u.jb("BiasAdd",o,void 0)},859598:o=>{u.jb("BiasSplitGelu",o,void 0)},859659:o=>{u.jb("FastGelu",o,void 0)},859715:(o,f,b,v,D,de,We,at,Et,Ft,Kt,kr,Fr,Oe,ar,zr)=>{u.jb("Conv",o,{format:kr?"NHWC":"NCHW",auto_pad:f,dilations:b?Array.from(i().subarray(b>>>0,v>>>0)):[],group:D,kernel_shape:de?Array.from(i().subarray(de>>>0,We>>>0)):[],pads:at?Array.from(i().subarray(at>>>0,Et>>>0)):[],strides:Ft?Array.from(i().subarray(Ft>>>0,Kt>>>0)):[],w_is_const:()=>!!r()[Fr>>>0],activation:un(Oe),activation_params:ar?Array.from(c().subarray(ar>>>0,zr>>>0)):[]})},860211:o=>{u.jb("Gelu",o,void 0)},860263:(o,f,b,v)=>{u.jb("GroupQueryAttention",o,{numHeads:f,kvNumHeads:b,scale:v})},860376:(o,f,b,v)=>{u.jb("LayerNormalization",o,{axis:f,epsilon:b,simplified:!!v})},860487:(o,f,b,v)=>{u.jb("LayerNormalization",o,{axis:f,epsilon:b,simplified:!!v})},860598:(o,f,b,v,D,de)=>{u.jb("MatMulNBits",o,{k:f,n:b,accuracyLevel:v,bits:D,blockSize:de})},860725:(o,f,b,v,D,de)=>{u.jb("MultiHeadAttention",o,{numHeads:f,isUnidirectional:b,maskFilterValue:v,scale:D,doRotary:de})},860884:(o,f)=>{u.jb("QuickGelu",o,{alpha:f})},860948:(o,f,b,v,D)=>{u.jb("RotaryEmbedding",o,{interleaved:!!f,numHeads:b,rotaryEmbeddingDim:v,scale:D})},861087:(o,f,b)=>{u.jb("SkipLayerNormalization",o,{epsilon:f,simplified:!!b})},861189:o=>{u.Yb(o)},861223:(o,f)=>u.$b(o,f,u.Eb.bc,u.Eb.errors),861335:(o,f,b)=>{u.jb("SkipLayerNormalization",o,{epsilon:f,simplified:!!b})}};function gf(o,f,b){return fh(async()=>{await u.Wb(o,f,b)})}function wf(){return typeof wasmOffsetConverter<"u"}function Hd(o){this.name="ExitStatus",this.message=`Program terminated with exit(${o})`,this.status=o}var Kd=o=>{o.terminate(),o.onmessage=()=>{}},zp=o=>{Bs.length==0&&(jp(),Np(Bs[0]));var f=Bs.pop();if(!f)return 6;ci.push(f),es[o.Ab]=f,f.Ab=o.Ab;var b={cmd:"run",start_routine:o.cc,arg:o.Pb,pthread_ptr:o.Ab};return f.postMessage(b,o.ic),0},di=0,Gr=(o,f,...b)=>{for(var v=2*b.length,D=hc(),de=pc(8*v),We=de>>>3,at=0;at<b.length;at++){var Et=b[at];typeof Et=="bigint"?(sn[We+2*at]=1n,sn[We+2*at+1]=Et):(sn[We+2*at]=0n,h()[We+2*at+1>>>0]=Et)}return o=Lh(o,0,v,de,f),$d(D),o};function Xd(o){if(U)return Gr(0,1,o);if(Lt=o,!(0<di)){for(var f of ci)Kd(f);for(f of Bs)Kd(f);Bs=[],ci=[],es=[],Pn=!0}Ge(o,new Hd(o))}function Dp(o){if(U)return Gr(1,0,o);Qd(o)}var Qd=o=>{if(Lt=o,U)throw Dp(o),"unwind";Xd(o)},Bs=[],ci=[],Bp=[],es={},Lp=o=>{var f=o.Ab;delete es[f],Bs.push(o),ci.splice(ci.indexOf(o),1),o.Ab=0,cc(f)};function Rp(){Bp.forEach(o=>o())}var Np=o=>new Promise(f=>{o.onmessage=D=>{var de=(D=D.data).cmd;if(D.targetThread&&D.targetThread!=Oa()){var We=es[D.targetThread];We?We.postMessage(D,D.transferList):nr(`Internal error! Worker sent a message "${de}" to target pthread ${D.targetThread}, but that thread no longer exists!`)}else de==="checkMailbox"?gd():de==="spawnThread"?zp(D):de==="cleanupThread"?Lp(es[D.thread]):de==="killThread"?(D=D.thread,de=es[D],delete es[D],Kd(de),cc(D),ci.splice(ci.indexOf(de),1),de.Ab=0):de==="cancelThread"?es[D.thread].postMessage({cmd:"cancel"}):de==="loaded"?(o.loaded=!0,f(o)):de==="alert"?alert(`Thread ${D.threadId}: ${D.text}`):D.target==="setimmediate"?o.postMessage(D):de==="callHandler"?u[D.handler](...D.args):de&&nr(`worker sent an unknown command ${de}`)},o.onerror=D=>{throw nr(`worker sent an error! ${D.filename}:${D.lineno}: ${D.message}`),D};var b,v=[];for(b of[])u.hasOwnProperty(b)&&v.push(b);o.postMessage({cmd:"load",handlers:v,wasmMemory:dr,wasmModule:Nr})});function jp(){var o=new Worker(new URL(self.location.href),{type:"module",workerData:"em-pthread",name:"em-pthread"});Bs.push(o)}var _d=o=>{for(;0<o.length;)o.shift()(u)},yf=()=>{var o=Oa(),f=d()[o+52>>>2>>>0];o=d()[o+56>>>2>>>0],Nh(f,f-o),$d(f)},bf=(o,f)=>{di=0,o=jh(o,f),0<di?Lt=o:Ed(o)};class Mf{constructor(f){this.Ib=f-24}}function vf(o,f,b){var v=new Mf(o>>>=0);throw f>>>=0,b>>>=0,d()[v.Ib+16>>>2>>>0]=0,d()[v.Ib+4>>>2>>>0]=f,d()[v.Ib+8>>>2>>>0]=b,o}function Vp(o,f,b,v){return U?Gr(2,1,o,f,b,v):Up(o,f,b,v)}function Up(o,f,b,v){if(o>>>=0,f>>>=0,b>>>=0,v>>>=0,q===void 0)return nr("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var D=[];return U&&D.length===0?Vp(o,f,b,v):(o={cc:b,Ab:o,Pb:v,ic:D},U?(o.Lb="spawnThread",postMessage(o,D),0):zp(o))}var Wp=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Gp=(o,f,b)=>{var v=(f>>>=0)+b;for(b=f;o[b]&&!(b>=v);)++b;if(16<b-f&&o.buffer&&Wp)return Wp.decode(o.buffer instanceof q?o.slice(f,b):o.subarray(f,b));for(v="";f<b;){var D=o[f++];if(128&D){var de=63&o[f++];if((224&D)==192)v+=String.fromCharCode((31&D)<<6|de);else{var We=63&o[f++];65536>(D=(240&D)==224?(15&D)<<12|de<<6|We:(7&D)<<18|de<<12|We<<6|63&o[f++])?v+=String.fromCharCode(D):(D-=65536,v+=String.fromCharCode(55296|D>>10,56320|1023&D))}}else v+=String.fromCharCode(D)}return v},un=(o,f)=>(o>>>=0)?Gp(n(),o,f):"";function qp(o,f,b){return U?Gr(3,1,o,f,b):0}function Hp(o,f){if(U)return Gr(4,1,o,f)}var Yd=o=>{for(var f=0,b=0;b<o.length;++b){var v=o.charCodeAt(b);127>=v?f++:2047>=v?f+=2:55296<=v&&57343>=v?(f+=4,++b):f+=3}return f},Kp=(o,f,b,v)=>{if(!(0<v))return 0;var D=b>>>=0;v=b+v-1;for(var de=0;de<o.length;++de){var We=o.charCodeAt(de);if(55296<=We&&57343>=We&&(We=65536+((1023&We)<<10)|1023&o.charCodeAt(++de)),127>=We){if(b>=v)break;f[b++>>>0]=We}else{if(2047>=We){if(b+1>=v)break;f[b++>>>0]=192|We>>6}else{if(65535>=We){if(b+2>=v)break;f[b++>>>0]=224|We>>12}else{if(b+3>=v)break;f[b++>>>0]=240|We>>18,f[b++>>>0]=128|We>>12&63}f[b++>>>0]=128|We>>6&63}f[b++>>>0]=128|63&We}}return f[b>>>0]=0,b-D},Ia=(o,f,b)=>Kp(o,n(),f,b);function Xp(o,f){if(U)return Gr(5,1,o,f)}function Qp(o,f,b){if(U)return Gr(6,1,o,f,b)}function Yp(o,f,b){return U?Gr(7,1,o,f,b):0}function Zp(o,f){if(U)return Gr(8,1,o,f)}function Jp(o,f,b){if(U)return Gr(9,1,o,f,b)}function eh(o,f,b,v){if(U)return Gr(10,1,o,f,b,v)}function th(o,f,b,v){if(U)return Gr(11,1,o,f,b,v)}function rh(o,f,b,v){if(U)return Gr(12,1,o,f,b,v)}function nh(o){if(U)return Gr(13,1,o)}function sh(o,f){if(U)return Gr(14,1,o,f)}function ih(o,f,b){if(U)return Gr(15,1,o,f,b)}var ah,Ls,xf=()=>{Aa("")},ts=o=>{for(var f="";n()[o>>>0];)f+=ah[n()[o++>>>0]];return f},Zd={},Jd={};function ms(o,f,b={}){if(!("argPackAdvance"in f))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(v,D,de={}){var We=D.name;if(!v)throw new Ls(`type "${We}" must have a positive integer typeid pointer`);if(Jd.hasOwnProperty(v)){if(de.Rb)return;throw new Ls(`Cannot register type '${We}' twice`)}Jd[v]=D,Zd.hasOwnProperty(v)&&(D=Zd[v],delete Zd[v],D.forEach(at=>at()))}(o,f,b)}var oh=(o,f,b)=>{switch(f){case 1:return b?v=>r()[v>>>0]:v=>n()[v>>>0];case 2:return b?v=>s()[v>>>1>>>0]:v=>a()[v>>>1>>>0];case 4:return b?v=>i()[v>>>2>>>0]:v=>d()[v>>>2>>>0];case 8:return b?v=>sn[v>>>3]:v=>zs[v>>>3];default:throw new TypeError(`invalid integer width (${f}): ${o}`)}};function Tf(o,f,b){b>>>=0,ms(o>>>=0,{name:f=ts(f>>>0),fromWireType:v=>v,toWireType:function(v,D){if(typeof D!="bigint"&&typeof D!="number")throw D=D===null?"null":(v=typeof D)=="object"||v==="array"||v==="function"?D.toString():""+D,new TypeError(`Cannot convert "${D}" to ${this.name}`);return typeof D=="number"&&(D=BigInt(D)),D},argPackAdvance:Rs,readValueFromPointer:oh(f,b,f.indexOf("u")==-1),Db:null})}var Rs=8;function Cf(o,f,b,v){ms(o>>>=0,{name:f=ts(f>>>0),fromWireType:function(D){return!!D},toWireType:function(D,de){return de?b:v},argPackAdvance:Rs,readValueFromPointer:function(D){return this.fromWireType(n()[D>>>0])},Db:null})}var ec=[],_s=[];function tc(o){9<(o>>>=0)&&--_s[o+1]==0&&(_s[o]=void 0,ec.push(o))}var Rn=o=>{if(!o)throw new Ls("Cannot use deleted val. handle = "+o);return _s[o]},Nn=o=>{switch(o){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let f=ec.pop()||_s.length;return _s[f]=o,_s[f+1]=1,f}};function rc(o){return this.fromWireType(d()[o>>>2>>>0])}var Ef={name:"emscripten::val",fromWireType:o=>{var f=Rn(o);return tc(o),f},toWireType:(o,f)=>Nn(f),argPackAdvance:Rs,readValueFromPointer:rc,Db:null};function $f(o){return ms(o>>>0,Ef)}var Sf=(o,f)=>{switch(f){case 4:return function(b){return this.fromWireType(c()[b>>>2>>>0])};case 8:return function(b){return this.fromWireType(h()[b>>>3>>>0])};default:throw new TypeError(`invalid float width (${f}): ${o}`)}};function kf(o,f,b){b>>>=0,ms(o>>>=0,{name:f=ts(f>>>0),fromWireType:v=>v,toWireType:(v,D)=>D,argPackAdvance:Rs,readValueFromPointer:Sf(f,b),Db:null})}function Pf(o,f,b,v,D){if(o>>>=0,b>>>=0,f=ts(f>>>0),D===-1&&(D=4294967295),D=at=>at,v===0){var de=32-8*b;D=at=>at<<de>>>de}var We=f.includes("unsigned")?function(at,Et){return Et>>>0}:function(at,Et){return Et};ms(o,{name:f,fromWireType:D,toWireType:We,argPackAdvance:Rs,readValueFromPointer:oh(f,b,v!==0),Db:null})}function Af(o,f,b){function v(de){var We=d()[de>>>2>>>0];return de=d()[de+4>>>2>>>0],new D(r().buffer,de,We)}var D=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][f];ms(o>>>=0,{name:b=ts(b>>>0),fromWireType:v,argPackAdvance:Rs,readValueFromPointer:v},{Rb:!0})}function If(o,f){o>>>=0;var b=(f=ts(f>>>0))==="std::string";ms(o,{name:f,fromWireType:function(v){var D=d()[v>>>2>>>0],de=v+4;if(b)for(var We=de,at=0;at<=D;++at){var Et=de+at;if(at==D||n()[Et>>>0]==0){if(We=un(We,Et-We),Ft===void 0)var Ft=We;else Ft+=String.fromCharCode(0),Ft+=We;We=Et+1}}else{for(Ft=Array(D),at=0;at<D;++at)Ft[at]=String.fromCharCode(n()[de+at>>>0]);Ft=Ft.join("")}return ns(v),Ft},toWireType:function(v,D){D instanceof ArrayBuffer&&(D=new Uint8Array(D));var de=typeof D=="string";if(!(de||D instanceof Uint8Array||D instanceof Uint8ClampedArray||D instanceof Int8Array))throw new Ls("Cannot pass non-string to std::string");var We=b&&de?Yd(D):D.length,at=Cd(4+We+1),Et=at+4;if(d()[at>>>2>>>0]=We,b&&de)Ia(D,Et,We+1);else if(de)for(de=0;de<We;++de){var Ft=D.charCodeAt(de);if(255<Ft)throw ns(Et),new Ls("String has UTF-16 code units that do not fit in 8 bits");n()[Et+de>>>0]=Ft}else for(de=0;de<We;++de)n()[Et+de>>>0]=D[de];return v!==null&&v.push(ns,at),at},argPackAdvance:Rs,readValueFromPointer:rc,Db(v){ns(v)}})}var lh=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Ff=(o,f)=>{for(var b=o>>1,v=b+f/2;!(b>=v)&&a()[b>>>0];)++b;if(32<(b<<=1)-o&&lh)return lh.decode(n().slice(o,b));for(b="",v=0;!(v>=f/2);++v){var D=s()[o+2*v>>>1>>>0];if(D==0)break;b+=String.fromCharCode(D)}return b},Of=(o,f,b)=>{if(b??(b=2147483647),2>b)return 0;var v=f;b=(b-=2)<2*o.length?b/2:o.length;for(var D=0;D<b;++D){var de=o.charCodeAt(D);s()[f>>>1>>>0]=de,f+=2}return s()[f>>>1>>>0]=0,f-v},zf=o=>2*o.length,Df=(o,f)=>{for(var b=0,v="";!(b>=f/4);){var D=i()[o+4*b>>>2>>>0];if(D==0)break;++b,65536<=D?(D-=65536,v+=String.fromCharCode(55296|D>>10,56320|1023&D)):v+=String.fromCharCode(D)}return v},Bf=(o,f,b)=>{if(f>>>=0,b??(b=2147483647),4>b)return 0;var v=f;b=v+b-4;for(var D=0;D<o.length;++D){var de=o.charCodeAt(D);if(55296<=de&&57343>=de&&(de=65536+((1023&de)<<10)|1023&o.charCodeAt(++D)),i()[f>>>2>>>0]=de,(f+=4)+4>b)break}return i()[f>>>2>>>0]=0,f-v},Lf=o=>{for(var f=0,b=0;b<o.length;++b){var v=o.charCodeAt(b);55296<=v&&57343>=v&&++b,f+=4}return f};function Rf(o,f,b){if(o>>>=0,f>>>=0,b=ts(b>>>=0),f===2)var v=Ff,D=Of,de=zf,We=at=>a()[at>>>1>>>0];else f===4&&(v=Df,D=Bf,de=Lf,We=at=>d()[at>>>2>>>0]);ms(o,{name:b,fromWireType:at=>{for(var Et,Ft=d()[at>>>2>>>0],Kt=at+4,kr=0;kr<=Ft;++kr){var Fr=at+4+kr*f;kr!=Ft&&We(Fr)!=0||(Kt=v(Kt,Fr-Kt),Et===void 0?Et=Kt:(Et+=String.fromCharCode(0),Et+=Kt),Kt=Fr+f)}return ns(at),Et},toWireType:(at,Et)=>{if(typeof Et!="string")throw new Ls(`Cannot pass non-string to C++ string type ${b}`);var Ft=de(Et),Kt=Cd(4+Ft+f);return d()[Kt>>>2>>>0]=Ft/f,D(Et,Kt+4,Ft+f),at!==null&&at.push(ns,Kt),Kt},argPackAdvance:Rs,readValueFromPointer:rc,Db(at){ns(at)}})}function Nf(o,f){ms(o>>>=0,{Sb:!0,name:f=ts(f>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var jf=()=>1;function Vf(o){dc(o>>>0,!I,1,!C,131072,!1),Rp()}var uh=o=>{if(!Pn)try{if(o(),!(0<di))try{U?Ed(Lt):Qd(Lt)}catch(f){f instanceof Hd||f=="unwind"||Ge(1,f)}}catch(f){f instanceof Hd||f=="unwind"||Ge(1,f)}};function nc(o){o>>>=0,typeof Atomics.jc=="function"&&(Atomics.jc(i(),o>>>2,o).value.then(gd),o+=128,Atomics.store(i(),o>>>2,1))}var gd=()=>{var o=Oa();o&&(nc(o),uh(Rh))};function Uf(o,f){(o>>>=0)==f>>>0?setTimeout(gd):U?postMessage({targetThread:o,cmd:"checkMailbox"}):(o=es[o])&&o.postMessage({cmd:"checkMailbox"})}var sc=[];function Wf(o,f,b,v,D){for(f>>>=0,v/=2,sc.length=v,b=D>>>0>>>3,D=0;D<v;D++)sc[D]=sn[b+2*D]?sn[b+2*D+1]:h()[b+2*D+1>>>0];return(f?qd[f]:Fm[o])(...sc)}function Gf(o){o>>>=0,U?postMessage({cmd:"cleanupThread",thread:o}):Lp(es[o])}function qf(o){}var ic=(o,f)=>{var b=Jd[o];if(b===void 0)throw o=zh(o),b=ts(o),ns(o),new Ls(`${f} has unknown type ${b}`);return b},dh=(o,f,b)=>{var v=[];return o=o.toWireType(v,b),v.length&&(d()[f>>>2>>>0]=Nn(v)),o};function Hf(o,f,b){return f>>>=0,b>>>=0,o=Rn(o>>>0),f=ic(f,"emval::as"),dh(f,b,o)}var wd=o=>{try{o()}catch(f){Aa(f)}},Ns=0,rs=null,ch=0,yd=[],ph={},hh={},Kf=0,ac=null,Xf=[];function fh(o){return function(f){if(!Pn){if(Ns===0){var b=!1,v=!1;f((D=0)=>{if(!Pn&&(ch=D,b=!0,v)){Ns=2,wd(()=>Wh(rs)),typeof Browser<"u"&&Browser.Jb.Qb&&Browser.Jb.resume(),D=!1;try{var de=function(){var Et=i()[rs+8>>>2>>>0];return Et=qt[hh[Et]],--di,Et()}()}catch(Et){de=Et,D=!0}var We=!1;if(!rs){var at=ac;at&&(ac=null,(D?at.reject:at.resolve)(de),We=!0)}if(D&&!We)throw de}}),v=!0,b||(Ns=1,rs=function(){var D=Cd(65548),de=D+12;d()[D>>>2>>>0]=de,d()[D+4>>>2>>>0]=de+65536,de=yd[0];var We=ph[de];return We===void 0&&(We=Kf++,ph[de]=We,hh[We]=de),de=We,i()[D+8>>>2>>>0]=de,D}(),typeof Browser<"u"&&Browser.Jb.Qb&&Browser.Jb.pause(),wd(()=>Vh(rs)))}else Ns===2?(Ns=0,wd(Gh),ns(rs),rs=null,Xf.forEach(uh)):Aa(`invalid state: ${Ns}`);return ch}}(f=>{o().then(f)})}function Qf(o){return o>>>=0,fh(()=>(o=Rn(o)).then(Nn))}var bd=[];function Yf(o,f,b,v){return b>>>=0,v>>>=0,(o=bd[o>>>0])(null,f=Rn(f>>>0),b,v)}var Zf={},Md=o=>{var f=Zf[o];return f===void 0?ts(o):f};function Jf(o,f,b,v,D){return b>>>=0,v>>>=0,D>>>=0,(o=bd[o>>>0])(f=Rn(f>>>0),f[b=Md(b)],v,D)}var mh=()=>typeof globalThis=="object"?globalThis:Function("return this")();function em(o){return(o>>>=0)==0?Nn(mh()):(o=Md(o),Nn(mh()[o]))}var tm=o=>{var f=bd.length;return bd.push(o),f},rm=(o,f)=>{for(var b=Array(o),v=0;v<o;++v)b[v]=ic(d()[f+4*v>>>2>>>0],"parameter "+v);return b},_h=(o,f)=>Object.defineProperty(f,"name",{value:o});function nm(o,f,b){var v=(f=rm(o,f>>>0)).shift();o--;var D=`return function (obj, func, destructorsRef, args) {
`,de=0,We=[];b===0&&We.push("obj");for(var at=["retType"],Et=[v],Ft=0;Ft<o;++Ft)We.push("arg"+Ft),at.push("argType"+Ft),Et.push(f[Ft]),D+=`  var arg${Ft} = argType${Ft}.readValueFromPointer(args${de?"+"+de:""});
`,de+=f[Ft].argPackAdvance;return D+=`  var rv = ${b===1?"new func":"func.call"}(${We.join(", ")});
`,v.Sb||(at.push("emval_returnValue"),Et.push(dh),D+=`  return emval_returnValue(retType, destructorsRef, rv);
`),at.push(D+`};
`),o=function(Kt){var kr=Function;if(!(kr instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof kr} which is not a function`);var Fr=_h(kr.name||"unknownFunctionName",function(){});return Fr.prototype=kr.prototype,Fr=new Fr,(Kt=kr.apply(Fr,Kt))instanceof Object?Kt:Fr}(at)(...Et),b=`methodCaller<(${f.map(Kt=>Kt.name).join(", ")}) => ${v.name}>`,tm(_h(b,o))}function sm(o){return o=Md(o>>>0),Nn(u[o])}function im(o,f){return f>>>=0,o=Rn(o>>>0),f=Rn(f),Nn(o[f])}function am(o){9<(o>>>=0)&&(_s[o+1]+=1)}function om(){return Nn([])}function lm(o){o=Rn(o>>>0);for(var f=Array(o.length),b=0;b<o.length;b++)f[b]=o[b];return Nn(f)}function um(o){return Nn(Md(o>>>0))}function dm(){return Nn({})}function cm(o){for(var f=Rn(o>>>=0);f.length;){var b=f.pop();f.pop()(b)}tc(o)}function pm(o,f,b){f>>>=0,b>>>=0,o=Rn(o>>>0),f=Rn(f),b=Rn(b),o[f]=b}function hm(o,f){return f>>>=0,o=(o=ic(o>>>0,"_emval_take_value")).readValueFromPointer(f),Nn(o)}function fm(o,f){o=-9007199254740992>o||9007199254740992<o?NaN:Number(o),f>>>=0,o=new Date(1e3*o),i()[f>>>2>>>0]=o.getUTCSeconds(),i()[f+4>>>2>>>0]=o.getUTCMinutes(),i()[f+8>>>2>>>0]=o.getUTCHours(),i()[f+12>>>2>>>0]=o.getUTCDate(),i()[f+16>>>2>>>0]=o.getUTCMonth(),i()[f+20>>>2>>>0]=o.getUTCFullYear()-1900,i()[f+24>>>2>>>0]=o.getUTCDay(),o=(o.getTime()-Date.UTC(o.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[f+28>>>2>>>0]=o}var Fa=o=>o%4==0&&(o%100!=0||o%400==0),gh=[0,31,60,91,121,152,182,213,244,274,305,335],wh=[0,31,59,90,120,151,181,212,243,273,304,334];function mm(o,f){o=-9007199254740992>o||9007199254740992<o?NaN:Number(o),f>>>=0,o=new Date(1e3*o),i()[f>>>2>>>0]=o.getSeconds(),i()[f+4>>>2>>>0]=o.getMinutes(),i()[f+8>>>2>>>0]=o.getHours(),i()[f+12>>>2>>>0]=o.getDate(),i()[f+16>>>2>>>0]=o.getMonth(),i()[f+20>>>2>>>0]=o.getFullYear()-1900,i()[f+24>>>2>>>0]=o.getDay();var b=(Fa(o.getFullYear())?gh:wh)[o.getMonth()]+o.getDate()-1|0;i()[f+28>>>2>>>0]=b,i()[f+36>>>2>>>0]=-60*o.getTimezoneOffset(),b=new Date(o.getFullYear(),6,1).getTimezoneOffset();var v=new Date(o.getFullYear(),0,1).getTimezoneOffset();o=0|(b!=v&&o.getTimezoneOffset()==Math.min(v,b)),i()[f+32>>>2>>>0]=o}function _m(o){o>>>=0;var f=new Date(i()[o+20>>>2>>>0]+1900,i()[o+16>>>2>>>0],i()[o+12>>>2>>>0],i()[o+8>>>2>>>0],i()[o+4>>>2>>>0],i()[o>>>2>>>0],0),b=i()[o+32>>>2>>>0],v=f.getTimezoneOffset(),D=new Date(f.getFullYear(),6,1).getTimezoneOffset(),de=new Date(f.getFullYear(),0,1).getTimezoneOffset(),We=Math.min(de,D);return 0>b?i()[o+32>>>2>>>0]=+(D!=de&&We==v):0<b!=(We==v)&&(D=Math.max(de,D),f.setTime(f.getTime()+6e4*((0<b?We:D)-v))),i()[o+24>>>2>>>0]=f.getDay(),b=(Fa(f.getFullYear())?gh:wh)[f.getMonth()]+f.getDate()-1|0,i()[o+28>>>2>>>0]=b,i()[o>>>2>>>0]=f.getSeconds(),i()[o+4>>>2>>>0]=f.getMinutes(),i()[o+8>>>2>>>0]=f.getHours(),i()[o+12>>>2>>>0]=f.getDate(),i()[o+16>>>2>>>0]=f.getMonth(),i()[o+20>>>2>>>0]=f.getYear(),o=f.getTime(),BigInt(isNaN(o)?-1:o/1e3)}function yh(o,f,b,v,D,de,We){return U?Gr(16,1,o,f,b,v,D,de,We):-52}function bh(o,f,b,v,D,de){if(U)return Gr(17,1,o,f,b,v,D,de)}function gm(o,f,b,v){o>>>=0,f>>>=0,b>>>=0,v>>>=0;var D=new Date().getFullYear(),de=new Date(D,0,1),We=new Date(D,6,1);D=de.getTimezoneOffset();var at=We.getTimezoneOffset(),Et=Math.max(D,at);d()[o>>>2>>>0]=60*Et,i()[f>>>2>>>0]=+(D!=at),de=(o=Ft=>Ft.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(de),We=o(We),at<D?(Ia(de,b,17),Ia(We,v,17)):(Ia(de,v,17),Ia(We,b,17))}var oc=[],Mh=(o,f)=>{oc.length=0;for(var b;b=n()[o++>>>0];){var v=b!=105;f+=(v&=b!=112)&&f%8?4:0,oc.push(b==112?d()[f>>>2>>>0]:b==106?sn[f>>>3]:b==105?i()[f>>>2>>>0]:h()[f>>>3>>>0]),f+=v?8:4}return oc};function wm(o,f,b){return o>>>=0,f=Mh(f>>>0,b>>>0),qd[o](...f)}function ym(o,f,b){return o>>>=0,f=Mh(f>>>0,b>>>0),qd[o](...f)}var bm=()=>{},Mm=()=>Date.now();function vm(o,f){return nr(un(o>>>0,f>>>0))}var vh,xm=()=>{throw di+=1,"unwind"};function Tm(){return 4294901760}vh=()=>performance.timeOrigin+performance.now();var Cm=()=>navigator.hardwareConcurrency;function Em(){return Aa("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function $m(o){o>>>=0;var f=n().length;if(o<=f||4294901760<o)return!1;for(var b=1;4>=b;b*=2){var v=f*(1+.2/b);v=Math.min(v,o+100663296);var D=Math;v=Math.max(o,v);e:{D=(D.min.call(D,4294901760,v+(65536-v%65536)%65536)-dr.buffer.byteLength+65535)/65536;try{dr.grow(D),pn();var de=1;break e}catch{}de=void 0}if(de)return!0}return!1}var vd=()=>(Aa("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),zu={},xh=o=>{o.forEach(f=>{vd()})};function Sm(){var o=Error().stack.toString().split(`
`);return o[0]=="Error"&&o.shift(),xh(o),zu.Ob=vd(),zu.ac=o,zu.Ob}function km(o,f,b){if(o>>>=0,f>>>=0,zu.Ob==o)var v=zu.ac;else(v=Error().stack.toString().split(`
`))[0]=="Error"&&v.shift(),xh(v);for(var D=3;v[D]&&vd()!=o;)++D;for(o=0;o<b&&v[o+D];++o)i()[f+4*o>>>2>>>0]=vd();return o}var lc,uc={},Th=()=>{if(!lc){var o,f={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:tt};for(o in uc)uc[o]===void 0?delete f[o]:f[o]=uc[o];var b=[];for(o in f)b.push(`${o}=${f[o]}`);lc=b}return lc};function Ch(o,f){if(U)return Gr(18,1,o,f);o>>>=0,f>>>=0;var b=0;return Th().forEach((v,D)=>{var de=f+b;for(D=d()[o+4*D>>>2>>>0]=de,de=0;de<v.length;++de)r()[D++>>>0]=v.charCodeAt(de);r()[D>>>0]=0,b+=v.length+1}),0}function Eh(o,f){if(U)return Gr(19,1,o,f);o>>>=0,f>>>=0;var b=Th();d()[o>>>2>>>0]=b.length;var v=0;return b.forEach(D=>v+=D.length+1),d()[f>>>2>>>0]=v,0}function $h(o){return U?Gr(20,1,o):52}function Sh(o,f,b,v){return U?Gr(21,1,o,f,b,v):52}function kh(o,f,b,v){return U?Gr(22,1,o,f,b,v):70}var Pm=[null,[],[]];function Ph(o,f,b,v){if(U)return Gr(23,1,o,f,b,v);f>>>=0,b>>>=0,v>>>=0;for(var D=0,de=0;de<b;de++){var We=d()[f>>>2>>>0],at=d()[f+4>>>2>>>0];f+=8;for(var Et=0;Et<at;Et++){var Ft=n()[We+Et>>>0],Kt=Pm[o];Ft===0||Ft===10?((o===1?_r:nr)(Gp(Kt,0)),Kt.length=0):Kt.push(Ft)}D+=at}return d()[v>>>2>>>0]=D,0}var Ah=[31,29,31,30,31,30,31,31,30,31,30,31],Ih=[31,28,31,30,31,30,31,31,30,31,30,31],Am=(o,f)=>{r().set(o,f>>>0)};function Fh(o,f,b,v){function D(Oe,ar,zr){for(Oe=typeof Oe=="number"?Oe.toString():Oe||"";Oe.length<ar;)Oe=zr[0]+Oe;return Oe}function de(Oe,ar){return D(Oe,ar,"0")}function We(Oe,ar){function zr(Hh){return 0>Hh?-1:0<Hh?1:0}var pi;return(pi=zr(Oe.getFullYear()-ar.getFullYear()))===0&&(pi=zr(Oe.getMonth()-ar.getMonth()))===0&&(pi=zr(Oe.getDate()-ar.getDate())),pi}function at(Oe){switch(Oe.getDay()){case 0:return new Date(Oe.getFullYear()-1,11,29);case 1:return Oe;case 2:return new Date(Oe.getFullYear(),0,3);case 3:return new Date(Oe.getFullYear(),0,2);case 4:return new Date(Oe.getFullYear(),0,1);case 5:return new Date(Oe.getFullYear()-1,11,31);case 6:return new Date(Oe.getFullYear()-1,11,30)}}function Et(Oe){var ar=Oe.Bb;for(Oe=new Date(new Date(Oe.Cb+1900,0,1).getTime());0<ar;){var zr=Oe.getMonth(),pi=(Fa(Oe.getFullYear())?Ah:Ih)[zr];if(!(ar>pi-Oe.getDate())){Oe.setDate(Oe.getDate()+ar);break}ar-=pi-Oe.getDate()+1,Oe.setDate(1),11>zr?Oe.setMonth(zr+1):(Oe.setMonth(0),Oe.setFullYear(Oe.getFullYear()+1))}return zr=new Date(Oe.getFullYear()+1,0,4),ar=at(new Date(Oe.getFullYear(),0,4)),zr=at(zr),0>=We(ar,Oe)?0>=We(zr,Oe)?Oe.getFullYear()+1:Oe.getFullYear():Oe.getFullYear()-1}o>>>=0,f>>>=0,b>>>=0,v>>>=0;var Ft=d()[v+40>>>2>>>0];for(var Kt in v={fc:i()[v>>>2>>>0],ec:i()[v+4>>>2>>>0],Gb:i()[v+8>>>2>>>0],Kb:i()[v+12>>>2>>>0],Hb:i()[v+16>>>2>>>0],Cb:i()[v+20>>>2>>>0],ub:i()[v+24>>>2>>>0],Bb:i()[v+28>>>2>>>0],nc:i()[v+32>>>2>>>0],dc:i()[v+36>>>2>>>0],hc:Ft?un(Ft):""},b=un(b),Ft={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})b=b.replace(new RegExp(Kt,"g"),Ft[Kt]);var kr="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Fr="January February March April May June July August September October November December".split(" ");for(Kt in Ft={"%a":Oe=>kr[Oe.ub].substring(0,3),"%A":Oe=>kr[Oe.ub],"%b":Oe=>Fr[Oe.Hb].substring(0,3),"%B":Oe=>Fr[Oe.Hb],"%C":Oe=>de((Oe.Cb+1900)/100|0,2),"%d":Oe=>de(Oe.Kb,2),"%e":Oe=>D(Oe.Kb,2," "),"%g":Oe=>Et(Oe).toString().substring(2),"%G":Et,"%H":Oe=>de(Oe.Gb,2),"%I":Oe=>((Oe=Oe.Gb)==0?Oe=12:12<Oe&&(Oe-=12),de(Oe,2)),"%j":Oe=>{for(var ar=0,zr=0;zr<=Oe.Hb-1;ar+=(Fa(Oe.Cb+1900)?Ah:Ih)[zr++]);return de(Oe.Kb+ar,3)},"%m":Oe=>de(Oe.Hb+1,2),"%M":Oe=>de(Oe.ec,2),"%n":()=>`
`,"%p":Oe=>0<=Oe.Gb&&12>Oe.Gb?"AM":"PM","%S":Oe=>de(Oe.fc,2),"%t":()=>"	","%u":Oe=>Oe.ub||7,"%U":Oe=>de(Math.floor((Oe.Bb+7-Oe.ub)/7),2),"%V":Oe=>{var ar=Math.floor((Oe.Bb+7-(Oe.ub+6)%7)/7);if(2>=(Oe.ub+371-Oe.Bb-2)%7&&ar++,ar)ar==53&&((zr=(Oe.ub+371-Oe.Bb)%7)==4||zr==3&&Fa(Oe.Cb)||(ar=1));else{ar=52;var zr=(Oe.ub+7-Oe.Bb-1)%7;(zr==4||zr==5&&Fa(Oe.Cb%400-1))&&ar++}return de(ar,2)},"%w":Oe=>Oe.ub,"%W":Oe=>de(Math.floor((Oe.Bb+7-(Oe.ub+6)%7)/7),2),"%y":Oe=>(Oe.Cb+1900).toString().substring(2),"%Y":Oe=>Oe.Cb+1900,"%z":Oe=>{var ar=0<=(Oe=Oe.dc);return Oe=Math.abs(Oe)/60,(ar?"+":"-")+("0000"+(Oe/60*100+Oe%60)).slice(-4)},"%Z":Oe=>Oe.hc,"%%":()=>"%"},b=b.replace(/%%/g,"\0\0"),Ft)b.includes(Kt)&&(b=b.replace(new RegExp(Kt,"g"),Ft[Kt](v)));return Kt=function(Oe){var ar=Array(Yd(Oe)+1);return Kp(Oe,ar,0,ar.length),ar}(b=b.replace(/\0\0/g,"%")),Kt.length>f?0:(Am(Kt,o),Kt.length-1)}function Im(o,f,b,v){return Fh(o>>>0,f>>>0,b>>>0,v>>>0)}U||function(){for(var o=u.numThreads-1;o--;)jp();Ou.unshift(()=>{Ln++,function(f){U?f():Promise.all(Bs.map(Np)).then(f)}(()=>md())})}();for(var Oh=Array(256),xd=0;256>xd;++xd)Oh[xd]=String.fromCharCode(xd);ah=Oh,Ls=u.BindingError=class extends Error{constructor(o){super(o),this.name="BindingError"}},u.InternalError=class extends Error{constructor(o){super(o),this.name="InternalError"}},_s.push(0,1,void 0,1,null,1,!0,1,!1,1),u.count_emval_handles=()=>_s.length/2-5-ec.length;var Fm=[Xd,Dp,Vp,qp,Hp,Xp,Qp,Yp,Zp,Jp,eh,th,rh,nh,sh,ih,yh,bh,Ch,Eh,$h,Sh,kh,Ph],qt=function(){function o(b,v){return qt=b.exports,qt=function(){var D=qt,de={};for(let[We,at]of Object.entries(D))de[We]=typeof at=="function"?(...Et)=>{yd.push(We);try{return at(...Et)}finally{Pn||(yd.pop(),rs&&Ns===1&&yd.length===0&&(Ns=0,di+=1,wd(Uh),typeof Fibers<"u"&&Fibers.oc()))}}:at;return de}(),qt=function(){var D=qt,de=at=>Et=>at(Et)>>>0,We=at=>()=>at()>>>0;return(D=Object.assign({},D)).Ca=de(D.Ca),D.fb=We(D.fb),D.gb=de(D.gb),D.emscripten_main_runtime_thread_id=We(D.emscripten_main_runtime_thread_id),D.sb=de(D.sb),D.tb=We(D.tb),D}(),Bp.push(qt.ib),hn.unshift(qt.Ba),Nr=v,md(),qt}var f=Op();if(Ln++,u.instantiateWasm)try{return u.instantiateWasm(f,o)}catch(b){nr(`Module.instantiateWasm callback failed with error: ${b}`),y(b)}return Gd||(Gd=u.locateFile?Pp("ort-wasm-simd-threaded.jsep.wasm")?"ort-wasm-simd-threaded.jsep.wasm":u.locateFile?u.locateFile("ort-wasm-simd-threaded.jsep.wasm",dt):dt+"ort-wasm-simd-threaded.jsep.wasm":new URL(l("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),l.b).href),function(b,v){var D=Gd;return zt||typeof WebAssembly.instantiateStreaming!="function"||Pp(D)||Ap(D)||typeof fetch!="function"?Fp(D,b,v):fetch(D,{credentials:"same-origin"}).then(de=>WebAssembly.instantiateStreaming(de,b).then(v,function(We){return nr(`wasm streaming compile failed: ${We}`),nr("falling back to ArrayBuffer instantiation"),Fp(D,b,v)}))}(f,function(b){o(b.instance,b.module)}).catch(y),{}}(),zh=o=>(zh=qt.Ca)(o),Dh=()=>(Dh=qt.Da)();u._OrtInit=(o,f)=>(u._OrtInit=qt.Ea)(o,f),u._OrtGetLastError=(o,f)=>(u._OrtGetLastError=qt.Fa)(o,f),u._OrtCreateSessionOptions=(o,f,b,v,D,de,We,at,Et,Ft)=>(u._OrtCreateSessionOptions=qt.Ga)(o,f,b,v,D,de,We,at,Et,Ft),u._OrtAppendExecutionProvider=(o,f)=>(u._OrtAppendExecutionProvider=qt.Ha)(o,f),u._OrtAddFreeDimensionOverride=(o,f,b)=>(u._OrtAddFreeDimensionOverride=qt.Ia)(o,f,b),u._OrtAddSessionConfigEntry=(o,f,b)=>(u._OrtAddSessionConfigEntry=qt.Ja)(o,f,b),u._OrtReleaseSessionOptions=o=>(u._OrtReleaseSessionOptions=qt.Ka)(o),u._OrtCreateSession=(o,f,b)=>(u._OrtCreateSession=qt.La)(o,f,b),u._OrtReleaseSession=o=>(u._OrtReleaseSession=qt.Ma)(o),u._OrtGetInputOutputCount=(o,f,b)=>(u._OrtGetInputOutputCount=qt.Na)(o,f,b),u._OrtGetInputName=(o,f)=>(u._OrtGetInputName=qt.Oa)(o,f),u._OrtGetOutputName=(o,f)=>(u._OrtGetOutputName=qt.Pa)(o,f),u._OrtFree=o=>(u._OrtFree=qt.Qa)(o),u._OrtCreateTensor=(o,f,b,v,D,de)=>(u._OrtCreateTensor=qt.Ra)(o,f,b,v,D,de),u._OrtGetTensorData=(o,f,b,v,D)=>(u._OrtGetTensorData=qt.Sa)(o,f,b,v,D),u._OrtReleaseTensor=o=>(u._OrtReleaseTensor=qt.Ta)(o),u._OrtCreateRunOptions=(o,f,b,v)=>(u._OrtCreateRunOptions=qt.Ua)(o,f,b,v),u._OrtAddRunConfigEntry=(o,f,b)=>(u._OrtAddRunConfigEntry=qt.Va)(o,f,b),u._OrtReleaseRunOptions=o=>(u._OrtReleaseRunOptions=qt.Wa)(o),u._OrtCreateBinding=o=>(u._OrtCreateBinding=qt.Xa)(o),u._OrtBindInput=(o,f,b)=>(u._OrtBindInput=qt.Ya)(o,f,b),u._OrtBindOutput=(o,f,b,v)=>(u._OrtBindOutput=qt.Za)(o,f,b,v),u._OrtClearBoundOutputs=o=>(u._OrtClearBoundOutputs=qt._a)(o),u._OrtReleaseBinding=o=>(u._OrtReleaseBinding=qt.$a)(o),u._OrtRunWithBinding=(o,f,b,v,D)=>(u._OrtRunWithBinding=qt.ab)(o,f,b,v,D),u._OrtRun=(o,f,b,v,D,de,We,at)=>(u._OrtRun=qt.bb)(o,f,b,v,D,de,We,at),u._OrtEndProfiling=o=>(u._OrtEndProfiling=qt.cb)(o),u._JsepOutput=(o,f,b)=>(u._JsepOutput=qt.db)(o,f,b),u._JsepGetNodeName=o=>(u._JsepGetNodeName=qt.eb)(o);var Td,Oa=()=>(Oa=qt.fb)(),Cd=u._malloc=o=>(Cd=u._malloc=qt.gb)(o),ns=u._free=o=>(ns=u._free=qt.hb)(o),dc=(o,f,b,v,D,de)=>(dc=qt.kb)(o,f,b,v,D,de),Bh=()=>(Bh=qt.lb)(),Lh=(o,f,b,v,D)=>(Lh=qt.mb)(o,f,b,v,D),cc=o=>(cc=qt.nb)(o),Ed=o=>(Ed=qt.ob)(o),Rh=()=>(Rh=qt.pb)(),Nh=(o,f)=>(Nh=qt.qb)(o,f),$d=o=>($d=qt.rb)(o),pc=o=>(pc=qt.sb)(o),hc=()=>(hc=qt.tb)(),jh=u.dynCall_ii=(o,f)=>(jh=u.dynCall_ii=qt.vb)(o,f),Vh=o=>(Vh=qt.wb)(o),Uh=()=>(Uh=qt.xb)(),Wh=o=>(Wh=qt.yb)(o),Gh=()=>(Gh=qt.zb)();function qh(){0<Ln||(U?(w(u),U||_d(hn),startWorker(u)):(_d(Ou),0<Ln||Td||(Td=!0,u.calledRun=!0,Pn||(U||_d(hn),w(u),U||_d(yn)))))}return u.___start_em_js=861437,u.___stop_em_js=861659,u.stackSave=()=>hc(),u.stackRestore=o=>$d(o),u.stackAlloc=o=>pc(o),u.UTF8ToString=un,u.stringToUTF8=Ia,u.lengthBytesUTF8=Yd,Ds=function o(){Td||qh(),Td||(Ds=o)},qh(),k}),Ct=ht,((e=globalThis.self)==null?void 0:e.name)==="em-pthread"&&ht()}),Qe,Vt,Nt,Ht,Xt,er,Wt,Tr,Ur=B(()=>{var e,t;X(),Qe=self.location.href??(typeof document<"u"?(e=document.currentScript)==null?void 0:e.src:typeof self<"u"?(t=self.location)==null?void 0:t.href:void 0),Vt=typeof location>"u"?void 0:location.origin,Nt=(r,n)=>{try{let s=n??Qe;return(s?new URL(r,s):new URL(r)).origin===Vt}catch{return!1}},Ht=async r=>{let n=await(await fetch(r,{credentials:"same-origin"})).blob();return URL.createObjectURL(n)},Xt=(ut(),P(ye)).default,er=async()=>{if(!Qe)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Nt(Qe))return[void 0,Xt()];let r=await Ht(Qe);return[r,Xt(r)]},Wt=(Rt(),P(nt)).default,Tr=async(r,n,s)=>[void 0,Wt]}),Cr,Ze,$t,Bt,Hr,jn,An,Rr,Jr=B(()=>{Ur(),Ze=!1,$t=!1,Bt=!1,Hr=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},jn=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},An=async e=>{if(Ze)return Promise.resolve();if($t)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Bt)throw new Error("previous call to 'initializeWebAssembly()' failed.");$t=!0;let t=e.initTimeout,r=e.numThreads;if(!jn())throw new Error("WebAssembly SIMD is not supported in the current environment.");let n=Hr();r>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+r+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=r=1);let s=e.wasmPaths,a=typeof s=="string"?s:void 0,i=s==null?void 0:s.mjs,d=(i==null?void 0:i.href)??i,c=s==null?void 0:s.wasm,h=(c==null?void 0:c.href)??c,w=e.wasmBinary,[y,u]=await Tr(d,a,r>1),k=!1,C=[];if(t>0&&C.push(new Promise(I=>{setTimeout(()=>{k=!0,I()},t)})),C.push(new Promise((I,U)=>{let q={numThreads:r};w?q.wasmBinary=w:(h||a)&&(q.locateFile=(R,ce)=>h??(a??ce)+R),u(q).then(R=>{$t=!1,Ze=!0,Cr=R,I(),y&&URL.revokeObjectURL(y)},R=>{$t=!1,Bt=!0,U(R)})})),await Promise.race(C),k)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Rr=()=>{if(Ze&&Cr)return Cr;throw new Error("WebAssembly is not initialized yet.")}}),jr,$n,Pr,Vn=B(()=>{Jr(),jr=(e,t)=>{let r=Rr(),n=r.lengthBytesUTF8(e)+1,s=r._malloc(n);return r.stringToUTF8(e,s,n),t.push(s),s},$n=(e,t,r,n)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([s,a])=>{let i=t?t+s:s;if(typeof a=="object")$n(a,i+".",r,n);else if(typeof a=="string"||typeof a=="number")n(i,a.toString());else if(typeof a=="boolean")n(i,a?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof a}`)})},Pr=e=>{let t=Rr(),r=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let s=t.HEAP32[n/4],a=t.HEAPU32[n/4+1],i=a?t.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${s}, ERROR_MESSAGE: ${i}`)}finally{t.stackRestore(r)}}}),In,Vs=B(()=>{Jr(),Vn(),In=e=>{let t=Rr(),r=0,n=[],s=e||{};try{if((e==null?void 0:e.logSeverityLevel)===void 0)s.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if((e==null?void 0:e.logVerbosityLevel)===void 0)s.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);(e==null?void 0:e.terminate)===void 0&&(s.terminate=!1);let a=0;return(e==null?void 0:e.tag)!==void 0&&(a=jr(e.tag,n)),r=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,a),r===0&&Pr("Can't create run options."),(e==null?void 0:e.extra)!==void 0&&$n(e.extra,"",new WeakSet,(i,d)=>{let c=jr(i,n),h=jr(d,n);t._OrtAddRunConfigEntry(r,c,h)!==0&&Pr(`Can't set a run config entry: ${i} - ${d}.`)}),[r,n]}catch(a){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(i=>t._free(i)),a}}}),gs,ws,ys,bs,Un,Us=B(()=>{Jr(),Vn(),gs=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},ws=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ys=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},bs=(e,t,r)=>{for(let n of t){let s=typeof n=="string"?n:n.name;switch(s){case"webnn":if(s="WEBNN",typeof n!="string"){let i=n==null?void 0:n.deviceType;if(i){let d=jr("deviceType",r),c=jr(i,r);Rr()._OrtAddSessionConfigEntry(e,d,c)!==0&&Pr(`Can't set a session config entry: 'deviceType' - ${i}.`)}}break;case"webgpu":if(s="JS",typeof n!="string"){let i=n;if(i!=null&&i.preferredLayout){if(i.preferredLayout!=="NCHW"&&i.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${i.preferredLayout}`);let d=jr("preferredLayout",r),c=jr(i.preferredLayout,r);Rr()._OrtAddSessionConfigEntry(e,d,c)!==0&&Pr(`Can't set a session config entry: 'preferredLayout' - ${i.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${s}`)}let a=jr(s,r);Rr()._OrtAppendExecutionProvider(e,a)!==0&&Pr(`Can't append execution provider: ${s}.`)}},Un=e=>{let t=Rr(),r=0,n=[],s=e||{};ys(s);try{let a=gs(s.graphOptimizationLevel??"all"),i=ws(s.executionMode??"sequential"),d=typeof s.logId=="string"?jr(s.logId,n):0,c=s.logSeverityLevel??2;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log serverity level is not valid: ${c}`);let h=s.logVerbosityLevel??0;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log verbosity level is not valid: ${h}`);let w=typeof s.optimizedModelFilePath=="string"?jr(s.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(a,!!s.enableCpuMemArena,!!s.enableMemPattern,i,!!s.enableProfiling,0,d,c,h,w),r===0&&Pr("Can't create session options."),s.executionProviders&&bs(r,s.executionProviders,n),s.enableGraphCapture!==void 0){if(typeof s.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${s.enableGraphCapture}`);let y=jr("enableGraphCapture",n),u=jr(s.enableGraphCapture.toString(),n);t._OrtAddSessionConfigEntry(r,y,u)!==0&&Pr(`Can't set a session config entry: 'enableGraphCapture' - ${s.enableGraphCapture}.`)}if(s.freeDimensionOverrides)for(let[y,u]of Object.entries(s.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof u!="number"||!Number.isInteger(u)||u<0)throw new Error(`free dimension override value must be a non-negative integer: ${u}`);let k=jr(y,n);t._OrtAddFreeDimensionOverride(r,k,u)!==0&&Pr(`Can't set a free dimension override: ${y} - ${u}.`)}return s.extra!==void 0&&$n(s.extra,"",new WeakSet,(y,u)=>{let k=jr(y,n),C=jr(u,n);t._OrtAddSessionConfigEntry(r,k,C)!==0&&Pr(`Can't set a session config entry: ${y} - ${u}.`)}),[r,n]}catch(a){throw r!==0&&t._OrtReleaseSessionOptions(r),n.forEach(i=>t._free(i)),a}}}),ss,Sn,Fn,On,Kn,is,as,Qt=B(()=>{ss=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Sn=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Fn=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],On=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Kn=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},is=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool",as=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}}),Xn,Ms=B(()=>{X(),Xn=async e=>{if(typeof e=="string"){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let s=t.body.getReader(),a;try{a=new ArrayBuffer(n)}catch(d){if(d instanceof RangeError){let c=Math.ceil(n/65536);a=new WebAssembly.Memory({initial:c,maximum:c}).buffer}else throw d}let i=0;for(;;){let{done:d,value:c}=await s.read();if(d)break;let h=c.byteLength;new Uint8Array(a,i,h).set(c),i+=h}return new Uint8Array(a,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),vs,os,xs,Ts,ls,Cs,Br,fn=B(()=>{Qt(),vs=["V","I","W","E","F"],os=(e,t)=>{console.log(`[${vs[e]},${new Date().toISOString()}]${t}`)},ls=(e,t)=>{xs=e,Ts=t},Cs=(e,t)=>{let r=Kn(e),n=Kn(xs);r>=n&&os(r,typeof t=="function"?t():t)},Br=(...e)=>{Ts&&Cs(...e)}}),ve,_=B(()=>{Qt(),ve=(e,t)=>new(On(t))(e)}),F=B(()=>{}),Y,le,ue,Ie,_t,yt,wt,kt,Jt,Er=B(()=>{fn(),F(),Y=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),le=[],ue=e=>Math.ceil(e/16)*16,Ie=e=>{for(let t=0;t<le.length;t++){let r=le[t];if(e<=r)return r}return Math.ceil(e/16)*16},_t=1,yt=()=>_t++,wt=async(e,t,r,n)=>{let s=ue(r),a=e.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let i=e.getCommandEncoder();e.endComputePass(),i.copyBufferToBuffer(t,0,a,0,s),e.flush(),await a.mapAsync(GPUMapMode.READ);let d=a.getMappedRange();if(n){let c=n();return c.set(new Uint8Array(d,0,r)),c}else return new Uint8Array(d.slice(0,r))}finally{a.destroy()}},kt=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map;for(let[t]of Y)le.push(t),this.freeBuffers.set(t,[]),this.freeUniformBuffers.set(t,[])}upload(e,t){let r=t.buffer,n=t.byteOffset,s=t.byteLength,a=ue(s),i=this.storageCache.get(e);if(!i)throw new Error("gpu data for uploading does not exist");if(i.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${i.originalSize}, data size=${s}`);let d=this.backend.device.createBuffer({mappedAtCreation:!0,size:a,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=d.getMappedRange();new Uint8Array(c).set(new Uint8Array(r,n,s)),d.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(d,0,i.gpuData.buffer,0,a),Br("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`),this.buffersForUploadingPending.push(d)}memcpy(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(t);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(r.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=ue(r.originalSize),a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(r.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(e,t,r){let n;if(r){if(n=this.externalBuffers.get(r),n===void 0)throw new Error("previous buffer is not registered");if(e===r)return Br("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`);this.externalBuffers.delete(r)}else n=yt();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:e},originalSize:t}),this.externalBuffers.set(e,n),Br("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, registered.`),n}unregisterExternalBuffer(e){let t=this.externalBuffers.get(e);t!==void 0&&(this.storageCache.delete(t),this.externalBuffers.delete(e),Br("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${t}`))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let r=Ie(e),n,s=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,a=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||a){let d=(s?this.freeBuffers:this.freeUniformBuffers).get(r);d?d.length>0?n=d.pop():n=this.backend.device.createBuffer({size:r,usage:t}):n=this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});let i={id:yt(),type:0,buffer:n};return this.storageCache.set(i.id,{gpuData:i,originalSize:e}),Br("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${i.id}`),i}get(e){var t;return(t=this.storageCache.get(e))==null?void 0:t.gpuData}release(e){let t=this.storageCache.get(e);if(!t)throw new Error("releasing data does not exist");return Br("verbose",()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("data does not exist");await wt(this.backend,r.gpuData.buffer,r.originalSize,t)}refreshPendingBuffers(){for(let e of this.buffersForUploadingPending)e.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let t=Y.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let r=this.freeBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let r=this.freeUniformBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(e){let t=this.capturedPendingBuffers.get(e);t&&(t.forEach(r=>{r.destroy()}),this.capturedPendingBuffers.delete(e))}},Jt=(...e)=>new kt(...e)}),sr,Gt,pr=B(()=>{sr=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},Gt=e=>new sr(e)}),an,Yr,He,gn,gr,Kr,dn,Yt=B(()=>{an=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},Yr=class{static calcShape(e,t,r=!1){let n=e.length,s=t.length;if(n===0)return t;if(s===0)return e;let a=Math.max(e.length,t.length),i=new Array(a);if(r){if(n<2||s<2)return;let d=an.calcMatMulShape([e[n-2],e[n-1]],[t[s-2],t[s-1]]);if(d===void 0)return;[i[a-2],i[a-1]]=d}for(let d=r?3:1;d<=a;d++){let c=n-d<0?1:e[n-d],h=s-d<0?1:t[s-d];if(c!==h&&c>1&&h>1)return;let w=Math.max(c,h);if(c&&h)i[a-d]=Math.max(c,h);else{if(w>1)return;i[a-d]=0}}return i}static isValidBroadcast(e,t){let r=e.length,n=t.length;if(r>n)return!1;for(let s=1;s<=r;s++)if(e[r-s]!==1&&e[r-s]!==t[n-s])return!1;return!0}},He=class Sd{static size(t){return Sd.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let n=t.length;if(n===0)return[];let s=new Array(n),a=n-1;for(;a>=0;){if(t[a]%r===0){s[a]=t[a]/r;break}if(r%t[a]!==0)throw new Error("cannot convert shape");s[a]=1,r/=t[a],a--}for(a--;a>=0;a--)s[a]=t[a];return s}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return Sd.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return Sd.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let s=1;for(let a=r;a<n;a++){if(t[a]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");s*=t[a]}return s}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let s=r-3;s>=0;--s)n[s]=n[s+1]*t[s+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((s,a)=>s+r[a]+r[a+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,s)=>n===r[s])}},gn=class Du{static adjustPoolAttributes(t,r,n,s,a,i){if(!t&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=n.length?n.push(r[d+2]):n[d]=r[d+2];for(let d=0;d<n.length;d++)if(d<s.length){if(s[d]<0)throw new Error("strides should be greater than or equal to 1")}else s.push(1);for(let d=0;d<n.length;d++)if(d<a.length){if(a[d]<0)throw new Error("dilations should be greater than or equal to 1")}else a.push(1);for(let d=0;d<n.length*2;d++)if(d<i.length){if(i[d]<0)throw new Error("pad should be greater than or equal to 1")}else i.push(0);for(let d=0;d<n.length;d++){if(n[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(i[d]>=n[d]||i[d+n.length]>=n[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,n,s,a,i,d){if(d){if(a.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(s.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let c=0;c<t.length-2;c++)Du.adjustPadAndReturnShape(t[c+(i?1:2)],r[c],n[c],s[c],a,c,c+t.length-2,d)}}static computePoolOutputShape(t,r,n,s,a,i,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let c=[r[0],r[1]];return Du.computeShapeHelper(t,r,c,n,s,a,i,d),c}static computeConvOutputShape(t,r,n,s,a,i,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let c=[t[0],r[0]];return Du.computeShapeHelper(!1,t,c,n,s,a,i,d),c}static computeShapeHelper(t,r,n,s,a,i,d,c){if(t)for(let h=0;h<r.length-2;h++)n.push(1);else for(let h=0;h<r.length-2;h++)n.push(Du.adjustPadAndReturnShape(r[h+2],s[h],a[h],i[h],d,h,h+r.length-2,c))}static adjustPadAndReturnShape(t,r,n,s,a,i,d,c){let h=n*(s-1)+1;if(c&&c!=="NOTSET")switch(c){case"VALID":return a[i]=0,a[d]=0,Math.floor((t-h)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let w=((t+r-1)/r-1)*r+s-t;return a[i]=Math.floor(c==="SAME_LOWER"?(w+1)/2:w/2),a[d]=w-a[i],Math.floor((t+w-s)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+a[i]+a[d]-h)/r+1)}},gr=class{static getShapeOfGemmResult(e,t,r,n,s){if(e.length!==2||r.length!==2)throw new Error("shape need to be of size 2");let a,i,d;t?(a=e[1],i=e[0]):(a=e[0],i=e[1]);let c=-1;if(n?(d=r[0],c=1):(d=r[1],c=0),r[c]!==i)throw new Error("dimension mismatch");if(a<=0||d<=0||i<=0)throw new Error("invalid shape specified");if(s&&!Yr.isValidBroadcast(s,[a,d]))throw new Error("gemm: invalid bias shape for broadcast");return[a,d,i]}},Kr=-34028234663852886e22,dn=34028234663852886e22}),mn,en,br,Mr,St,mr,Ar,Vr,_n,Ot,Ws,it,Ut,hi,fi,Da,us,or=B(()=>{Qt(),Yt(),mn=64,en=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},br=(e,t=1)=>{let r=en(e,t);return typeof r=="string"?r:r[0]},Mr=(e,t=1)=>{let r=en(e,t);return typeof r=="string"?r:r[1]},St=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:He.computeStrides(r)})}),t},mr=e=>e%4===0?4:e%2===0?2:1,Ar=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Vr=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}<f32>(${r})`,_n=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Ot=(e,t,r,n)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?n==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Ws=(e,t,r,n,s)=>{let a=typeof r=="number",i=a?r:r.length,d=[...new Array(i).keys()],c=i<2?"u32":i<=4?`vec${i}<u32>`:`array<u32, ${i}>`,h=en(t,s),w=typeof h=="string"?h:h[1],y=typeof h=="string"?h:h[0],u={indices:c,value:w,storage:y,tensor:t},k=Le=>typeof Le=="string"?Le:`${Le}u`,C={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},I=a?"uniforms.":"",U=`${I}${e}_shape`,q=`${I}${e}_strides`,R="";for(let Le=0;Le<i-1;Le++)R+=`
    let dim${Le} = current / ${Ot(q,Le,i)};
    let rest${Le} = current % ${Ot(q,Le,i)};
    indices[${Le}] = dim${Le};
    current = rest${Le};
    `;R+=`indices[${i-1}] = current;`;let ce=i<2?"":`
  fn o2i_${e}(offset: u32) -> ${u.indices} {
    var indices: ${u.indices};
    var current = offset;
    ${R}
    return indices;
  }`,J=Le=>(C.offsetToIndices=!0,i<2?Le:`o2i_${e}(${Le})`),oe=[];if(i>=2)for(let Le=i-1;Le>=0;Le--)oe.push(`${Ot(q,Le,i)} * (indices[${Le}])`);let tt=i<2?"":`
  fn i2o_${e}(indices: ${u.indices}) -> u32 {
    return ${oe.join("+")};
  }`,Ge=Le=>(C.indicesToOffset=!0,i<2?Le:`i2o_${e}(${Le})`),dt=(...Le)=>i===0?"0u":`${u.indices}(${Le.map(k).join(",")})`,zt=(Le,jt)=>i<2?`${Le}`:`${Ot(Le,jt,i)}`,Dt=(Le,jt,rr)=>i<2?`${Le}=${rr};`:`${Ot(Le,jt,i)}=${rr};`,cr={},_r=(Le,jt)=>{C.broadcastedIndicesToOffset=!0;let rr=`${jt.name}broadcastedIndicesTo${e}Offset`;if(rr in cr)return`${rr}(${Le})`;let Lr=[];for(let Xr=i-1;Xr>=0;Xr--){let sn=jt.indicesGet("outputIndices",Xr+jt.rank-i);Lr.push(`${zt(q,Xr)} * (${sn} % ${zt(U,Xr)})`)}return cr[rr]=`fn ${rr}(outputIndices: ${jt.type.indices}) -> u32 {
             return ${Lr.length>0?Lr.join("+"):"0u"};
           }`,`${rr}(${Le})`},nr=(Le,jt)=>(()=>{if(u.storage===u.value)return`${e}[${Le}]=${jt};`;if(u.storage==="vec2<u32>"&&u.value==="i32")return`${e}[${Le}]=vec2<u32>(u32(${jt}), select(0u, 0xFFFFFFFFu, ${jt} < 0));`;if(u.storage==="vec2<u32>"&&u.value==="u32")return`${e}[${Le}]=vec2<u32>(u32(${jt}), 0u);`;if(u.storage==="u32"&&u.value==="vec4<bool>")return`${e}[${Le}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${jt}));`;throw new Error(`not supported combination of storage type ${u.storage} and value type ${u.value} yet`)})(),Sr=Le=>(()=>{if(u.storage===u.value)return`${e}[${Le}]`;if(u.storage==="vec2<u32>"&&u.value==="i32")return`i32(${e}[${Le}].x)`;if(u.storage==="vec2<u32>"&&u.value==="u32")return`u32(${e}[${Le}].x)`;if(u.storage==="u32"&&u.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${Le}] & 0xFFu), bool(${e}[${Le}] & 0xFF00u), bool(${e}[${Le}] & 0xFF0000u), bool(${e}[${Le}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${u.storage} and value type ${u.value} yet`)})(),Wr=i<2?"":`
  fn get_${e}ByIndices(indices: ${u.indices}) -> ${w} {
    return ${Sr(`i2o_${e}(indices)`)};
  }`,dr=i<2?"":(()=>{let Le=d.map(rr=>`d${rr}: u32`).join(", "),jt=d.map(rr=>`d${rr}`).join(", ");return`
  fn get_${e}(${Le}) -> ${w} {
    return get_${e}ByIndices(${dt(jt)});
  }`})(),Nr=(...Le)=>{if(Le.length!==i)throw new Error(`indices length must be ${i}`);let jt=Le.map(k).join(",");return i===0?Sr("0u"):i===1?Sr(jt[0]):(C.get=!0,C.getByIndices=!0,C.indicesToOffset=!0,`get_${e}(${jt})`)},Lt=Le=>i<2?Sr(Le):(C.getByIndices=!0,C.indicesToOffset=!0,`get_${e}ByIndices(${Le})`),Zt=i<2?"":`
  fn set_${e}ByIndices(indices: ${u.indices}, value: ${w}) {
    ${nr(`i2o_${e}(indices)`,"value")}
  }`,fr=i<2?"":(()=>{let Le=d.map(rr=>`d${rr}: u32`).join(", "),jt=d.map(rr=>`d${rr}`).join(", ");return`
  fn set_${e}(${Le}, value: ${w}) {
    set_${e}ByIndices(${dt(jt)}, value);
  }`})();return{impl:()=>{let Le=[],jt=!1;return C.offsetToIndices&&(Le.push(ce),jt=!0),C.indicesToOffset&&(Le.push(tt),jt=!0),C.broadcastedIndicesToOffset&&(Object.values(cr).forEach(rr=>Le.push(rr)),jt=!0),C.set&&(Le.push(fr),jt=!0),C.setByIndices&&(Le.push(Zt),jt=!0),C.get&&(Le.push(dr),jt=!0),C.getByIndices&&(Le.push(Wr),jt=!0),!a&&jt&&Le.unshift(`const ${U} = ${u.indices}(${r.join(",")});`,`const ${q} = ${u.indices}(${He.computeStrides(r).join(",")});`),Le.join(`
`)},type:u,offsetToIndices:J,indicesToOffset:Ge,broadcastedIndicesToOffset:_r,indices:dt,indicesGet:zt,indicesSet:Dt,set:(...Le)=>{if(Le.length!==i+1)throw new Error(`indices length must be ${i}`);let jt=Le[i];if(typeof jt!="string")throw new Error("value must be string");let rr=Le.slice(0,i).map(k).join(",");return i===0?nr("0u",jt):i===1?nr(rr[0],jt):(C.set=!0,C.setByIndices=!0,C.indicesToOffset=!0,`set_${e}(${rr}, ${jt})`)},setByOffset:nr,setByIndices:(Le,jt)=>i<2?nr(Le,jt):(C.setByIndices=!0,C.indicesToOffset=!0,`set_${e}ByIndices(${Le}, ${jt});`),get:Nr,getByOffset:Sr,getByIndices:Lt,usage:n,name:e,strides:q,shape:U,rank:i}},it=(e,t,r,n=1)=>Ws(e,t,r,"input",n),Ut=(e,t,r,n=1)=>Ws(e,t,r,"output",n),hi=(e,t,r,n=1)=>Ws(e,t,r,"internal",n),fi=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=mn){let t=typeof e=="number"?e:e[0],r=typeof e=="number"?1:e[1],n=typeof e=="number"?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||r>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*r*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,a=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,i=s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${t*r*n}u + local_idx;`;return`@compute @workgroup_size(${t}, ${r}, ${n})
  fn main(${a}) {
    ${i}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let r=e.usage==="input"?"read":"read_write",n=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${r}> ${e.name}: array<${n}>;`}declareVariables(...e){return e.map(t=>this.declareVariable(t,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(t=>this.registerInternalVariable(t)),this}registerUniform(e,t,r=1){return this.uniforms.push({name:e,type:t,length:r}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:t,type:r,length:n}of this.uniforms)if(n&&n>4)r==="f16"?e.push(`@align(16) ${t}:array<mat2x4<${r}>, ${Math.ceil(n/8)}>`):e.push(`${t}:array<vec4<${r}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?r:`vec${n}<${r}>`;e.push(`${t}:${s}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=t=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(t)];return this.uniforms.map(t=>[e(t.type),t.length??1])}},Da=(e,t)=>new fi(e,t),us=(e,t)=>{let r=e.length,n=[];for(let s=0;s<r;s++){let a=r-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&i===1&&n.unshift(a)}return n}}),Ba,mi,Qn,La,zn,Ra,Lu,ds=B(()=>{Qt(),Yt(),pr(),or(),Ba=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},mi=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Qn=(e,t)=>He.sortBasedOnPerm(e,mi(e.length,t)),La=(e,t,r,n)=>{let s=[];s.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let a=0;a<t;++a)s.push(r.indicesSet("a",e[a],`i[${a}]`));return s.push("return a;}"),s.join(`
`)},zn=(e,t)=>{let r=e.dataType,n=e.dims.length,s=mi(n,t),a=Qn(e.dims,s),i=Ut("output",r,a.length),d=it("a",r,n),c;if(s.length===2&&s[0]===1&&s[1]===0){let h=i.type.value,w=[16,16,1];c=y=>`
  ${y.registerUniform("output_size","u32").declareVariables(d,i)}
  var<workgroup> tile : array<array<${h}, ${w[0]+1}>, ${w[0]}>;
  ${y.mainStart(w)}
    var x = workgroup_id.x * ${w[0]}u + local_id.x;
    var y = workgroup_id.y * ${w[0]}u + local_id.y;
    let width = uniforms.output_shape[0];
    let height = uniforms.output_shape[1];
    if (x < width && y < height) {
      tile[local_id.y][local_id.x] = ${d.getByOffset("y * width + x")};
    }
    workgroupBarrier();
    x = workgroup_id.y * ${w[0]}u + local_id.x;
    y = workgroup_id.x * ${w[0]}u + local_id.y;
    if (x < height && y < width) {
      ${i.setByOffset("y * height + x","tile[local_id.x][local_id.y]")}
    }
  }`}else c=h=>`
  ${h.registerUniform("output_size","u32").declareVariables(d,i)}

  ${La(s,n,d,i)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${i.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${i.setByOffset("global_idx",d.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:h=>{let w=He.size(a);return{outputs:[{dims:a,dataType:h[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:[{type:12,data:w},...St(h[0].dims,a)]}},getShaderSource:c}},Ra=(e,t)=>{Ba(e.inputs),e.compute(zn(e.inputs[0],t.perm))},Lu=e=>Gt({perm:e.perm})}),_i,Na,ja,Va,Ua,Wa,gi,Ga,qa,wi,bn,Ha,yi,Ka,Xa,bi,Qa,Ya,Mi,Za,Ja,eo=B(()=>{Qt(),Yt(),or(),Gs(),ds(),_i={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Na={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},ja={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Va={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Ua=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},Wa=(e,t)=>{let r=[],n=e.length;for(let a=0;a<n;a++)t.indexOf(a)===-1&&r.push(e[a]);let s=t.map(a=>e[a]);return[r,s]},gi=(e,t)=>{let r=e.length+t.length,n=[],s=0;for(let a=0;a<r;a++)t.indexOf(a)===-1?n.push(e[s++]):n.push(1);return n},Ga=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},qa=(e,t)=>{let r=[];if(!Ga(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},wi=(e,t,r,n,s,a,i)=>{let d=r[0].dims,c=He.size(a),h=He.size(i),w=it("_A",r[0].dataType,d),y=Ut("output",s,a),u=32,k=`
          var<workgroup> aBestValues : array<f32, ${u}>;
       `;return{name:e,shaderCache:t,getShaderSource:C=>`
        ${C.registerUniform("reduceSize","u32").declareVariables(w,y)}
        ${k}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${C.mainStart(u)}

          let outputIndex = global_idx / ${u};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${ja[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${u}) {
           let candidate = f32(${w.getByOffset("offset + k")});
           bestValue = ${_i[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${u}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Na[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${y.setByOffset("outputIndex",`${n==="mean"?`${y.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${y.type.storage}(${Va[n]})`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:c},programUniforms:[{type:12,data:h}]})}},bn=(e,t,r,n)=>{let s=e.inputs.length===1?r:vi(e.inputs,r),a=s.axes;a.length===0&&!s.noopWithEmptyAxes&&(a=e.inputs[0].dims.map((k,C)=>C));let i=He.normalizeAxes(a,e.inputs[0].dims.length),d=i,c=e.inputs[0],h=qa(d,e.inputs[0].dims.length);h.length>0&&(c=e.compute(zn(e.inputs[0],h),{inputs:[0],outputs:[-1]})[0],d=Ua(d.length,c.dims.length));let[w,y]=Wa(c.dims,d),u=w;s.keepDims&&(u=gi(w,i)),e.compute(wi(t,{hint:s.cacheKey,inputDependencies:["type"]},[c],n,e.inputs[0].dataType,u,y),{inputs:[c]})},Ha=(e,t)=>{bn(e,"ReduceMeanShared",t,"mean")},yi=(e,t)=>{bn(e,"ReduceL1Shared",t,"l1")},Ka=(e,t)=>{bn(e,"ReduceL2Shared",t,"l2")},Xa=(e,t)=>{bn(e,"ReduceLogSumExpShared",t,"logSumExp")},bi=(e,t)=>{bn(e,"ReduceMaxShared",t,"max")},Qa=(e,t)=>{bn(e,"ReduceMinShared",t,"min")},Ya=(e,t)=>{bn(e,"ReduceProdShared",t,"prod")},Mi=(e,t)=>{bn(e,"ReduceSumShared",t,"sum")},Za=(e,t)=>{bn(e,"ReduceSumSquareShared",t,"sumSquare")},Ja=(e,t)=>{bn(e,"ReduceLogSumShared",t,"logSum")}}),Mn,to,Es,vi,vn,xi,ro,no,Ti,so,io,Ci,ao,oo,Ei,xn,lo,$i,uo,co,Si,po,ho,ki,fo,mo,Gs=B(()=>{Qt(),Yt(),pr(),or(),eo(),Mn=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},to=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Es=(e,t,r,n,s,a,i=!1,d=!1)=>{let c=[],h=r[0].dims,w=h.length,y=He.normalizeAxes(s,w),u=!d&&y.length===0;h.forEach((I,U)=>{u||y.indexOf(U)>=0?i&&c.push(1):c.push(I)});let k=c.length,C=He.size(c);return{name:e,shaderCache:t,getShaderSource:I=>{let U=[],q=it("_A",r[0].dataType,w),R=Ut("output",a,k),ce=n(q,R,y),J=ce[2];for(let oe=0,tt=0;oe<w;oe++)u||y.indexOf(oe)>=0?(i&&tt++,J=`for(var j${oe}: u32 = 0; j${oe} < ${h[oe]}; j${oe}++) {
                  ${ce[2].includes("last_index")?`let last_index = j${oe};`:""}
                  ${q.indicesSet("input_indices",oe,`j${oe}`)}
                  ${J}
                }`):(U.push(`${q.indicesSet("input_indices",oe,R.indicesGet("output_indices",tt))};`),tt++);return`

        ${I.registerUniform("output_size","u32").declareVariables(q,R)}

        ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${q.type.indices};
          let output_indices = ${R.offsetToIndices("global_idx")};

          ${U.join(`
`)}
          ${ce[0]}       // init ops for reduce max/min
          ${ce[1]}
          ${J}
          ${ce[3]}
          ${ce.length===4?R.setByOffset("global_idx","value"):ce.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:c,dataType:a}],dispatchGroup:{x:Math.ceil(C/64)},programUniforms:[{type:12,data:C},...St(h,c)]})}},vi=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),Gt({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},vn=(e,t,r,n)=>{let s=e.inputs,a=s.length===1?r:vi(s,r);e.compute(Es(t,{hint:a.cacheKey,inputDependencies:["rank"]},[s[0]],a.noopWithEmptyAxes&&a.axes.length===0?to:n,a.axes,s[0].dataType,a.keepDims,a.noopWithEmptyAxes),{inputs:[0]})},xi=(e,t)=>{Mn(e.inputs),vn(e,"ReduceLogSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,"value = log(value);"])},ro=(e,t)=>{Mn(e.inputs),vn(e,"ReduceL1",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${r.getByIndices("input_indices")});`,""])},no=(e,t)=>{Mn(e.inputs),vn(e,"ReduceL2",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Ti=(e,t)=>{Mn(e.inputs),vn(e,"ReduceLogSumExp",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${r.getByIndices("input_indices")});`,"value = log(value);"])},so=(e,t)=>{Mn(e.inputs),vn(e,"ReduceMax",t,(r,n,s)=>{let a=[];for(let i=0;i<r.rank;i++)(s.indexOf(i)>=0||s.length===0)&&a.push(r.indicesSet("input_indices",i,0));return[`${a.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = max(value, ${r.getByIndices("input_indices")});`,""]})},io=(e,t)=>{Mn(e.inputs),vn(e,"ReduceMean",t,(r,n,s)=>{let a=1;for(let i=0;i<r.rank;i++)(s.indexOf(i)>=0||s.length===0)&&(a*=e.inputs[0].dims[i]);return["var sum = f32(0);","",`sum += f32(${r.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${a});`]})},Ci=(e,t)=>{Mn(e.inputs),vn(e,"ReduceMin",t,(r,n,s)=>{let a=[];for(let i=0;i<r.rank;i++)(s.indexOf(i)>=0||s.length===0)&&a.push(`input_indices[${i}] = 0;`);return[`${a.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = min(value, ${r.getByIndices("input_indices")});`,""]})},ao=(e,t)=>{Mn(e.inputs),vn(e,"ReduceProd",t,(r,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${r.getByIndices("input_indices")};`,""])},oo=(e,t)=>{Mn(e.inputs),vn(e,"ReduceSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,""])},Ei=(e,t)=>{Mn(e.inputs),vn(e,"ReduceSumSquare",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += t * t;`,""])},xn=(e,t,r)=>{if(t.length===0)return r;let n=1,s=1;for(let a=0;a<t.length;a++)t.indexOf(a)===-1?n*=e[a]:s*=e[a];return s<32&&n>1024},lo=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?io(e,t):Ha(e,t)},$i=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ro(e,t):yi(e,t)},uo=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?no(e,t):Ka(e,t)},co=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ti(e,t):Xa(e,t)},Si=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?so(e,t):bi(e,t)},po=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ci(e,t):Qa(e,t)},ho=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ao(e,t):Ya(e,t)},ki=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?oo(e,t):Mi(e,t)},fo=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ei(e,t):Za(e,t)},mo=(e,t)=>{xn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xi(e,t):Ja(e,t)}}),Pi,_o,Ai,Ii,Ru=B(()=>{Qt(),pr(),Gs(),Pi=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},_o=(e,t)=>{Pi(e.inputs);let r=(n,s,a)=>{let i=[];for(let d=0;d<n.rank;d++)(a.indexOf(d)>=0||a.length===0)&&i.push(`input_indices[${d}] = 0;`);return[`${i.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",s.setByOffset("global_idx","best_index")]};e.compute(Es("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ai=(e,t)=>{Pi(e.inputs);let r=(n,s,a)=>{let i=[];for(let d=0;d<n.rank;d++)(a.indexOf(d)>=0||a.length===0)&&i.push(`input_indices[${d}] = 0;`);return[`${i.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",s.setByOffset("global_idx","best_index")]};e.compute(Es("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ii=e=>Gt(e)}),Fi,go,wo,Oi,$s,yo,zi,Di=B(()=>{Qt(),F(),or(),Fi=(e,t)=>{let r=e[0],n=e[1],s=e[2],a=e[3],i=e[4],d=e[5];if(i&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let c=r.dims[0],h=r.dims[1],w=r.dims[2];if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==w)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(s.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let y=s.dims[0]/3,u=y,k=u;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let ce of t.qkvHiddenSizes)if(ce%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],u=t.qkvHiddenSizes[1],k=t.qkvHiddenSizes[2]}let C=h;if(y!==u)throw new Error("qkv_hidden_sizes first element should be same as the second");if(s.dims[0]!==y+u+k)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let I=0;if(i){if(u!==k)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(i.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(i.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(i.dims[1]!==c)throw new Error('Input "past" second dimension must be batch_size');if(i.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(i.dims[4]!==u/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(I=i.dims[3])}let U=C+I,q=-1,R=0;if(a)throw new Error("Mask not supported");if(i)throw new Error("past is not supported");return{batchSize:c,sequenceLength:h,pastSequenceLength:I,kvSequenceLength:C,totalSequenceLength:U,maxSequenceLength:q,inputHiddenSize:w,hiddenSize:y,vHiddenSize:k,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(k/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:R,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},go=(e,t,r,n)=>{let s=mr(n),a=64,i=n/s;i<a?a=1:i/8<64&&(a=Math.ceil(i/8));let d=Math.ceil(n/s/a),c=[{type:t.dataType,data:1/n},{type:12,data:i},{type:12,data:d}],h=br(t.dataType,s),w=Mr(1,s),y=u=>{let k=Ut("x",t.dataType,t.dims,s),C=[{name:"d_inv",type:Mr(t.dataType)},{name:"d_comp",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${a}>;
  var<workgroup> thread_sum: array<f32, ${a}>;
  ${u.registerUniforms(C).declareVariables(k)}
  ${u.mainStart([a,1,1])}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = workgroup_id.x * uniforms.d_comp + local_offset;

    var thread_max_vector = ${w}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
      thread_max_vector = max(${w}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(s){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${s}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${a}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${w}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
      sum_vector += exp(${w}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(s){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${s}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${a}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
        x[offset + i] = ${k.type.value}(uniforms.d_inv);
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
        var f32input = ${w}(x[offset + i]);
        x[offset + i] = ${k.type.value}(exp(f32input - max_value) / sum);
      }
    }
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${a};${h};${s}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:c})}},wo=(e,t,r,n,s,a,i,d)=>{let c=d+a.kvSequenceLength,h=[a.batchSize,a.numHeads,a.sequenceLength,c],w=a.kvNumHeads===void 0&&e.outputCount>1,y=w?[a.batchSize,a.numHeads,c,a.headSize]:void 0,u=i.scale===0?1/Math.sqrt(a.headSize):i.scale,k=mr(a.headSize),C=a.headSize/k,I=12,U={x:Math.ceil(c/I),y:Math.ceil(a.sequenceLength/I),z:a.batchSize*a.numHeads},q=[{type:12,data:a.sequenceLength},{type:12,data:C},{type:12,data:c},{type:12,data:a.numHeads},{type:1,data:u},{type:12,data:d},{type:12,data:a.kvSequenceLength}],R=["type","type"];n&&R.push("type"),s&&R.push("type");let ce=[{dims:h,dataType:t.dataType,gpuDataType:0}];w&&ce.push({dims:y,dataType:t.dataType,gpuDataType:0});let J=oe=>{let tt=it("q",t.dataType,t.dims,k),Ge=it("key",r.dataType,r.dims,k),dt=[tt,Ge];if(n){let nr=it("past_key",n.dataType,n.dims,k);dt.push(nr)}s&&dt.push(it("relative_position_bias",s.dataType,s.dims));let zt=Ut("output",t.dataType,h),Dt=[zt];w&&Dt.push(Ut("present_key",t.dataType,y,k));let cr=Mr(1,k),_r=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}];return`
  const TILE_SIZE = ${I}u;

  var<workgroup> tileQ: array<${tt.type.storage}, ${I*I}>;
  var<workgroup> tileK: array<${tt.type.storage}, ${I*I}>;
  ${oe.registerUniforms(_r).declareVariables(...dt,...Dt)}
  ${oe.mainStart([I,I,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    ${(()=>n&&w?`
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx;
    let pastKeyOffset = uniforms.past_sequence_length * uniforms.K * headIdx;`:`
    let kOffset = uniforms.N * uniforms.K * headIdx + n * uniforms.K;`)()}
    ${w?"let presentKeyOffset = headIdx * uniforms.N * uniforms.K;":""}
    var value = ${cr}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${(()=>n&&w?`
              if (n + local_id.y < uniforms.past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else {
                tileK[idx] =
                         key[kOffset + (n + local_id.y - uniforms.past_sequence_length) * uniforms.K + w + local_id.x];
              }`:"tileK[idx] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];")()}
      ${w?"present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];":""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
        value += ${cr}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(k){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${k}`)}})()};
        output[outputIdx] = ${zt.type.value} (sum * uniforms.alpha) + ${s?"relative_position_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${k};${s!==void 0};${n!==void 0};${e.outputCount}`,inputDependencies:R},getRunData:()=>({outputs:ce,dispatchGroup:U,programUniforms:q}),getShaderSource:J}},Oi=(e,t,r,n,s,a)=>{let i=a+s.kvSequenceLength,d=s.nReps?s.nReps:1,c=s.vHiddenSize*d,h=s.kvNumHeads==null&&e.outputCount>1,w=h?[s.batchSize,s.numHeads,i,s.headSize]:void 0,y=[s.batchSize,s.sequenceLength,c],u=12,k={x:Math.ceil(s.vHeadSize/u),y:Math.ceil(s.sequenceLength/u),z:s.batchSize*s.numHeads},C=[{type:12,data:s.sequenceLength},{type:12,data:i},{type:12,data:s.vHeadSize},{type:12,data:s.numHeads},{type:12,data:c},{type:12,data:a},{type:12,data:s.kvSequenceLength}],I=n?["type","type","type"]:["type","type"],U=[{dims:y,dataType:t.dataType,gpuDataType:0}];h&&U.push({dims:w,dataType:t.dataType,gpuDataType:0});let q=R=>{let ce=it("probs",t.dataType,t.dims),J=it("v",r.dataType,r.dims),oe=[ce,J];n&&oe.push(it("past_value",n.dataType,n.dims));let tt=[Ut("output",t.dataType,y)];h&&tt.push(Ut("present_value",t.dataType,w));let Ge=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}];return`
  const TILE_SIZE = ${u}u;
  var<workgroup> tileQ: array<${ce.type.value}, ${u*u}>;
  var<workgroup> tileK: array<${ce.type.value}, ${u*u}>;
  ${R.registerUniforms(Ge).declareVariables(...oe,...tt)}
  ${R.mainStart([u,u,1])}
   let headIdx = workgroup_id.z;
   let m = global_id.y;
   let n = global_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   ${(()=>n&&h?`
    let pastValueOffset = headIdx * uniforms.N * uniforms.past_sequence_length + n;
    let vOffset = headIdx * uniforms.N * uniforms.kv_sequence_length + n;
      `:`
   let offsetB = headIdx * uniforms.N * uniforms.K + n;
            `)()}
    ${h?"let presentValueOffset = headIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${ce.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${(()=>n&&h?`
        if (w + local_id.y < uniforms.past_sequence_length) {
          tileK[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else {
          tileK[idx] = v[vOffset + (w + local_id.y - uniforms.past_sequence_length) * uniforms.N];
        }
      `:`
        tileK[idx] = v[offsetB + (w + local_id.y) * uniforms.N];
      `)()}
        ${h?"present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileK[idx];":""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${n!==void 0};${e.outputCount}`,inputDependencies:I},getRunData:()=>({outputs:U,dispatchGroup:k,programUniforms:C}),getShaderSource:q}},$s=(e,t,r,n,s,a,i,d,c,h,w)=>{let y=e.outputCount,u=h.kvNumHeads!==void 0||y>1?h.pastSequenceLength:0,k=u+h.kvSequenceLength,C=h.kvNumHeads===void 0&&y>1&&i?[t,r,i]:[t,r];c&&C.push(c);let I=e.compute(wo(e,t,r,y>1?i:void 0,c,h,w,u),{inputs:C,outputs:h.kvNumHeads===void 0&&y>1?[-1,1]:[-1]})[0];e.compute(go(e,I,h.batchSize*h.numHeads*h.sequenceLength,k),{inputs:[I],outputs:[]});let U=h.kvNumHeads===void 0&&y>1&&d?[I,n,d]:[I,n];e.compute(Oi(e,I,n,y>1&&d?d:void 0,h,u),{inputs:U,outputs:h.kvNumHeads===void 0&&y>1?[0,2]:[0]})},yo=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,s=t.inputHiddenSize,a=t.headSize,i=12,d={x:Math.ceil(t.headSize/i),y:Math.ceil(t.sequenceLength/i),z:t.batchSize*t.numHeads},c=[e.inputs[0],e.inputs[1],e.inputs[2]],h=[{type:12,data:n},{type:12,data:s},{type:12,data:a},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],w=y=>{let u=Ut("output_q",c[0].dataType,r),k=Ut("output_k",c[0].dataType,r),C=Ut("output_v",c[0].dataType,r),I=it("input",c[0].dataType,c[0].dims),U=it("weight",c[1].dataType,c[1].dims),q=it("bias",c[2].dataType,c[2].dims),R=I.type.storage,ce=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${i}u;
  var<workgroup> tileInput: array<${R}, ${i*i}>;
  var<workgroup> tileWeightQ: array<${R}, ${i*i}>;
  var<workgroup> tileWeightK: array<${R}, ${i*i}>;
  var<workgroup> tileWeightV: array<${R}, ${i*i}>;
  ${y.registerUniforms(ce).declareVariables(I,U,q,u,k,C)}
  ${y.mainStart([i,i,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${R}(0);
    var valueK = ${R}(0);
    var valueV = ${R}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:h}),getShaderSource:w},{inputs:c,outputs:[-1,-1,-1]})},zi=(e,t)=>{let r=Fi(e.inputs,t),[n,s,a]=yo(e,r);return $s(e,n,s,a,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}}),bo,Bi,Mo,vo,Nu=B(()=>{E(),Qt(),Yt(),pr(),or(),bo=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,s,a)=>{let i=s.length;if(i!==n.length)throw new Error(`${a}: num dimensions != ${i}`);s.forEach((d,c)=>{if(d!==n[c])throw new Error(`${a}: dim[${c}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,"Invalid input scale"),r(e[2].dims,n,"Invalid input B"),r(e[3].dims,n,"Invalid input mean"),r(e[4].dims,n,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Bi=(e,t)=>{let{epsilon:r,spatial:n,format:s}=t,a=e[0].dims,i=n?mr(a[a.length-1]):1,d=s==="NHWC"&&a.length>1?i:1,c=He.size(a)/i,h=n,w=h?a.length:a,y=it("x",e[0].dataType,e[0].dims,i),u=it("scale",e[1].dataType,e[1].dims,d),k=it("bias",e[2].dataType,e[2].dims,d),C=it("inputMean",e[3].dataType,e[3].dims,d),I=it("inputVar",e[4].dataType,e[4].dims,d),U=Ut("y",e[0].dataType,w,i),q=()=>{let ce="";if(n)ce=`let cOffset = ${a.length===1?"0u":s==="NHWC"?`outputIndices[${a.length-1}] / ${i}`:"outputIndices[1]"};`;else if(s==="NCHW")ce=`
            ${U.indicesSet("outputIndices","0","0")}
            let cOffset = ${U.indicesToOffset("outputIndices")};`;else{ce=`var cIndices = ${u.type.indices}(0);
                       cIndices[0] = outputIndices[${a.length-1}];`;for(let J=1;J<u.rank;J++)ce+=`cIndices[${J}] = outputIndices[${J}];`;ce+=`let cOffset = ${u.indicesToOffset("cIndices")};`}return ce},R=ce=>`
  const epsilon = ${r};
  ${ce.registerUniform("outputSize","u32").declareVariables(y,u,k,C,I,U)}
  ${ce.mainStart()}
  ${ce.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${U.offsetToIndices(`global_idx * ${i}`)};
    ${q()}
    let scale = ${u.getByOffset("cOffset")};
    let bias = ${k.getByOffset("cOffset")};
    let inputMean = ${C.getByOffset("cOffset")};
    let inputVar = ${I.getByOffset("cOffset")};
    let x = ${y.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${U.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${i}`,inputDependencies:h?["rank","type","type","type","type"]:void 0},getShaderSource:R,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:h?[{type:12,data:c},...St(a)]:[{type:12,data:c}]})}},Mo=e=>Gt(e),vo=(e,t)=>{let{inputs:r,outputCount:n}=e,s=Mo({...t,outputCount:n});if(A.webgpu.validateInputContent&&bo(r,s),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Bi(r,s))}}),xo,Li,To,ju=B(()=>{Yt(),or(),xo=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Li=e=>{let t=e[0].dims,r=e[0].dims[2],n=He.size(t)/4,s=e[0].dataType,a=it("input",s,t,4),i=it("bias",s,[r],4),d=it("residual",s,t,4),c=Ut("output",s,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:h=>`
  const channels = ${r}u / 4;
  ${h.declareVariables(a,i,d,c)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${a.getByOffset("global_idx")}
      + ${i.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};
    ${c.setByOffset("global_idx","value")}
  }`}},To=e=>{xo(e.inputs),e.compute(Li(e.inputs))}}),Ri,wr,Co,Ni,Eo,$o,ji,So,ko,Vi,Po,Ao,qs,Io,Fo,Oo,cs,zo,Ss,Do,Bo,Lo,Ui,Ro,No,jo,Wi,Vo,Uo,Gi,Wo,Go,qi,qo,Ho,Hs,Ko,Hi,Ks,Xo,Qo,Yo,Zo,Ki,Jo,Xi=B(()=>{Qt(),Yt(),pr(),or(),Ri=(e,t,r,n,s,a)=>{let i=Math.ceil(t/4),d="";typeof s=="string"?d=`${s}(a)`:d=s("a");let c=it("inputData",r,[i],4),h=Ut("outputData",n,[i],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(c,h)}

  ${a??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${c.getByOffset("global_idx")};
    ${h.setByOffset("global_idx",d)}
  }`},wr=(e,t,r,n,s,a=e.dataType)=>({name:t,shaderCache:{hint:s,inputDependencies:["type"]},getShaderSource:i=>Ri(i,He.size(e.dims),e.dataType,a,r,n),getRunData:i=>({outputs:[{dims:e.dims,dataType:a}],dispatchGroup:{x:Math.ceil(He.size(i[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(He.size(e.dims)/4)}]})}),Co=e=>{e.compute(wr(e.inputs[0],"Abs","abs"))},Ni=e=>{e.compute(wr(e.inputs[0],"Acos","acos"))},Eo=e=>{e.compute(wr(e.inputs[0],"Acosh","acosh"))},$o=e=>{e.compute(wr(e.inputs[0],"Asin","asin"))},ji=e=>{e.compute(wr(e.inputs[0],"Asinh","asinh"))},So=e=>{e.compute(wr(e.inputs[0],"Atan","atan"))},ko=e=>{e.compute(wr(e.inputs[0],"Atanh","atanh"))},Vi=e=>Gt(e),Po=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(wr(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Ao=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Kr,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:dn;return Gt({min:t,max:r})},qs=(e,t)=>{let r=e.inputs.length===1?t:Ao(e.inputs),n=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"Clip",s=>`clamp(${s}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${n}> = vec4(${n}(${r.min}));
    const clip_max_: vec4<${n}> = vec4(${n}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Io=e=>{e.compute(wr(e.inputs[0],"Ceil","ceil"))},Fo=e=>{e.compute(wr(e.inputs[0],"Cos","cos"))},Oo=e=>{e.compute(wr(e.inputs[0],"Cosh","cosh"))},cs=e=>Gt(e),zo=(e,t)=>{let r=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},Ss=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Do=e=>{let t=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Ss(t)))},Bo=e=>{e.compute(wr(e.inputs[0],"Exp","exp"))},Lo=e=>{e.compute(wr(e.inputs[0],"Floor","floor"))},Ui=e=>{let t=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Ss(t)))},Ro=(e,t)=>{let r=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},No=e=>{e.compute(wr(e.inputs[0],"Not",t=>`!${t}`))},jo=e=>{e.compute(wr(e.inputs[0],"Neg",t=>`-${t}`))},Wi=e=>{e.compute(wr(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Vo=e=>{let t=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},Uo=e=>{e.compute(wr(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},Gi=e=>Gt(e),Wo=(e,t)=>{let r=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"HardSigmoid",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},Go=e=>{e.compute(wr(e.inputs[0],"Sin","sin"))},qi=e=>{e.compute(wr(e.inputs[0],"Sinh","sinh"))},qo=e=>{e.compute(wr(e.inputs[0],"Sqrt","sqrt"))},Ho=e=>{e.compute(wr(e.inputs[0],"Tan","tan"))},Hs=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Ko=e=>{e.compute(wr(e.inputs[0],"Tanh",Hs))},Hi=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${Hs("v")};
}
`,Ks=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Xo=e=>{let t=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"FastGelu",Ks,Hi(t),void 0,e.inputs[0].dataType))},Qo=(e,t)=>{let r=Mr(e.inputs[0].dataType);return e.compute(wr(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},Yo=e=>{e.compute(wr(e.inputs[0],"Log","log"))},Zo=(e,t)=>`
const alpha = vec4<${e}>(${t});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,Ki=e=>`quick_gelu_impl(${e})`,Jo=(e,t)=>{let r=Mr(e.inputs[0].dataType);e.compute(wr(e.inputs[0],"QuickGelu",Ki,Zo(r,t.alpha),t.cacheKey,e.inputs[0].dataType))}}),el,tl,Qi,Vu=B(()=>{Yt(),or(),Xi(),el=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},tl=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=it("input",e[0].dataType,e[0].dims,4),n=it("bias",e[0].dataType,[e[0].dims[2]],4),s=Ut("output",e[0].dataType,t,4),a=He.size(t)/4,i=br(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:d=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${d.declareVariables(r,n,s)}

  ${Ss(i)}

  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${s.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Qi=e=>{el(e.inputs),e.compute(tl(e.inputs))}}),rl,Yi,Tn,nl,Zi,sl,il,Ji,al,ol,ll,ul,dl,Uu=B(()=>{Qt(),Yt(),or(),rl=(e,t,r,n,s,a,i,d,c,h,w,y)=>{let u,k;typeof d=="string"?u=k=(R,ce)=>`${d}((${R}),(${ce}))`:typeof d=="function"?u=k=d:(u=d.scalar,k=d.vector);let C=Ut("outputData",w,n.length,4),I=it("aData",c,t.length,4),U=it("bData",h,r.length,4),q;if(s)if(a){let R=He.size(t)===1,ce=He.size(r)===1,J=t.length>0&&t[t.length-1]%4===0,oe=r.length>0&&r[r.length-1]%4===0;R||ce?q=C.setByOffset("global_idx",k(R?`${I.type.value}(${I.getByOffset("0")}.x)`:I.getByOffset("global_idx"),ce?`${U.type.value}(${U.getByOffset("0")}.x)`:U.getByOffset("global_idx"))):q=`
            let outputIndices = ${C.offsetToIndices("global_idx * 4u")};
            let offsetA = ${I.broadcastedIndicesToOffset("outputIndices",C)};
            let offsetB = ${U.broadcastedIndicesToOffset("outputIndices",C)};
            ${C.setByOffset("global_idx",k(i||J?I.getByOffset("offsetA / 4u"):`${I.type.value}(${I.getByOffset("offsetA / 4u")}[offsetA % 4u])`,i||oe?U.getByOffset("offsetB / 4u"):`${U.type.value}(${U.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else q=C.setByOffset("global_idx",k(I.getByOffset("global_idx"),U.getByOffset("global_idx")));else{if(!a)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let R=(ce,J,oe="")=>{let tt=`aData[indexA${J}][componentA${J}]`,Ge=`bData[indexB${J}][componentB${J}]`;return`
            let outputIndices${J} = ${C.offsetToIndices(`global_idx * 4u + ${J}u`)};
            let offsetA${J} = ${I.broadcastedIndicesToOffset(`outputIndices${J}`,C)};
            let offsetB${J} = ${U.broadcastedIndicesToOffset(`outputIndices${J}`,C)};
            let indexA${J} = offsetA${J} / 4u;
            let indexB${J} = offsetB${J} / 4u;
            let componentA${J} = offsetA${J} % 4u;
            let componentB${J} = offsetB${J} % 4u;
            ${ce}[${J}] = ${oe}(${u(tt,Ge)});
          `};w===9?q=`
            var data = vec4<u32>(0);
            ${R("data",0,"u32")}
            ${R("data",1,"u32")}
            ${R("data",2,"u32")}
            ${R("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:q=`
            ${R("outputData[global_idx]",0)}
            ${R("outputData[global_idx]",1)}
            ${R("outputData[global_idx]",2)}
            ${R("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(I,U,C)}

        ${y??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${q}
      }`},Yi=(e,t,r,n,s,a,i=r.dataType)=>{let d=!He.areEqual(r.dims,n.dims),c=r.dims,h=He.size(r.dims),w=!1,y=!1,u=[d];if(d){let k=Yr.calcShape(r.dims,n.dims,!1);if(!k)throw new Error("Can't perform binary op on the given tensors");c=k,h=He.size(c);let C=He.size(r.dims)===1,I=He.size(n.dims)===1,U=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,q=n.dims.length>0&&n.dims[n.dims.length-1]%4===0;u.push(C),u.push(I),u.push(U),u.push(q);let R=1;for(let ce=1;ce<c.length;ce++){let J=r.dims[r.dims.length-ce]??1,oe=n.dims[n.dims.length-ce]??1;if(J===oe)R*=J;else break}R%4===0?(y=!0,w=!0):(C||I||U||q)&&(w=!0)}else w=!0;return u.push(w),{name:e,shaderCache:{hint:t+u.map(k=>k.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:k=>rl(k,r.dims,n.dims,c,w,d,y,s,r.dataType,n.dataType,i,a),getRunData:()=>({outputs:[{dims:c,dataType:i}],dispatchGroup:{x:Math.ceil(h/64/4)},programUniforms:[{type:12,data:Math.ceil(He.size(c)/4)},...St(r.dims,n.dims,c)]})}},Tn=(e,t,r,n,s,a)=>{e.compute(Yi(t,s??"",e.inputs[0],e.inputs[1],r,n,a))},nl=e=>{Tn(e,"Add",(t,r)=>`${t}+${r}`)},Zi=e=>{Tn(e,"Div",(t,r)=>`${t}/${r}`)},sl=e=>{Tn(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},il=e=>{Tn(e,"Mul",(t,r)=>`${t}*${r}`)},Ji=e=>{let t=it("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Tn(e,"Pow",{scalar:(r,n)=>`pow_custom(${r},${n})`,vector:(r,n)=>`pow_vector_custom(${r},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},al=e=>{Tn(e,"Sub",(t,r)=>`${t}-${r}`)},ol=e=>{Tn(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},ll=e=>{Tn(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},ul=e=>{Tn(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},dl=e=>{Tn(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}}),ea,cl,pl,ta,hl,fl,Yn=B(()=>{Qt(),Yt(),pr(),or(),ea=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,n=e[r],s=n.dataType,a=n.dims.length;e.forEach((i,d)=>{if(d!==r){if(i.dataType!==s)throw new Error("input tensors should be one type");if(i.dims.length!==a)throw new Error("input tensors should have the same shape");i.dims.forEach((c,h)=>{if(h!==t&&c!==n.dims[h])throw new Error("non concat dimensions must match")})}})},cl=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,pl=(e,t)=>{let r=e.length,n=[];for(let s=0;s<r;++s){let a=t.setByOffset("global_idx",e[s].getByIndices("indices"));r===1?n.push(a):s===0?n.push(`if (inputIndex == ${s}u) { ${a} }`):s===r-1?n.push(`else { ${a} }`):n.push(`else if (inputIndex == ${s}) { ${a} }`)}return n.join(`
`)},ta=(e,t,r,n)=>{let s=He.size(r),a=new Array(e.length),i=new Array(e.length),d=0,c=[],h=[],w=[{type:12,data:s}];for(let I=0;I<e.length;++I)d+=e[I].dims[t],a[I]=d,h.push(e[I].dims.length),i[I]=it(`input${I}`,n,h[I]),c.push("rank"),w.push({type:12,data:a[I]});for(let I=0;I<e.length;++I)w.push(...St(e[I].dims));w.push(...St(r));let y=Ut("output",n,r.length),u=y.indicesGet("indices",t),k=Array.from(Array(a.length).keys()).map(I=>`uniforms.sizeInConcatAxis${I}`).join(","),C=I=>`

  ${(()=>{I.registerUniform("outputSize","u32");for(let U=0;U<e.length;U++)I.registerUniform(`sizeInConcatAxis${U}`,"u32");return I.declareVariables(...i,y)})()}

  ${cl(a.length,k)}

  ${I.mainStart()}
    ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${y.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${u});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${a.length}u>(${k});
      ${u} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${pl(i,y)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:r,dataType:n}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:w}),getShaderSource:C}},hl=(e,t)=>{let r=e.inputs,n=r[0].dims,s=He.normalizeAxis(t.axis,n.length);ea(r,s);let a=n.slice();a[s]=r.reduce((d,c)=>d+(c.dims.length>s?c.dims[s]:0),0);let i=r.filter(d=>He.size(d.dims)>0);e.compute(ta(i,s,a,r[0].dataType),{inputs:i})},fl=e=>Gt({axis:e.axis})}),Wn,Gn,qn,ra,Dn=B(()=>{Qt(),Yt(),Wn=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},Gn=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},qn=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},ra=e=>{let t=(e==null?void 0:e.activation)||"";if(t==="HardSigmoid"){let[r,n]=(e==null?void 0:e.activation_params)||[.2,.5];return{activation:t,alpha:r,beta:n}}else if(t==="Clip"){let[r,n]=(e==null?void 0:e.activation_params)||[Kr,dn];return{activation:t,clipMax:n,clipMin:r}}else if(t==="LeakyRelu"){let[r]=(e==null?void 0:e.activation_params)||[.01];return{activation:t,alpha:r}}return{activation:t}}}),tn,na,Xs=B(()=>{tn=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},na=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),sa,Qs=B(()=>{sa=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),ml,_l,Ys,ps,gl,Zs,wl,ia,hs=B(()=>{Qt(),Yt(),or(),Dn(),Xs(),ml=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,_l=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Ys=(e,t,r="f32",n,s=!1,a=32,i=!1,d=32)=>{let c=t[1]*e[1],h=t[0]*e[0],w=s?c:a,y=s?a:c,u=w/t[0],k=a/t[1];if(!((s&&u===4&&e[1]===4||!s&&(u===3||u===4))&&w%t[0]===0&&a%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${s} is true, innerElementSize ${u} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${u} must be 3 or 4.
  tileAWidth ${w} must be divisible by workgroupSize[0]${t[0]}. tileInner ${a} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${u}<${r}>, ${w/u}>, ${y}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${h/e[0]}>, ${a}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${u};
const tileInner = ${a};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${i?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${c};

  let num_tiles = ${i?`${Math.ceil(d/a)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${i?`i32(globalId.z) * ${d}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${k};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${ml(s,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${k}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${u===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${_l(s,u)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},ps=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,gl=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Zs=(e,t,r="f32",n,s=!1,a=32,i=!1,d=32,c=!1)=>{let h=e[1]*t[1],w=e[0]*t[0],y=s?h:a,u=s?a:h;if(!(u%t[1]===0&&y%t[0]===0&&a%t[1]===0))throw new Error(`tileAHight ${u} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${a} must be divisible by workgroupSize[1]${t[1]}`);let k=u/t[1],C=y/t[0],I=a/t[1],U=c?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${h};
    let globalColStart = i32(workgroupId.x) * ${w};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {
          ${ps(s,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${a}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${w}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${s?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${h};

let tileRowA = i32(localId.y) * ${k};
let tileColA = i32(localId.x) * ${C};
let tileRowB = i32(localId.y) * ${I};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${k}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${C}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${ps(s,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${I}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${gl(s)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${u}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${w}>, ${a}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${a};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${i?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${i?`${Math.ceil(d/a)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${i?`i32(globalId.z) * ${d}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;
    ${U}
  }
`},wl=(e,t,r,n,s,a=!1)=>{let[i,d,c]=s,[h,w,y,u]=n,k=us(i,c),C=us(d,c),I=br(n[0].type.tensor),U=()=>{let R=w.rank,ce=h.rank,J=`var aIndices: ${w.type.indices};`;for(let oe=R-2-1,tt=ce-1;oe>=0;oe--,tt--)J+=`
aIndices[${oe}] = ${ce>1?`batchIndices[${tt}]`:"batchIndices"};`;return k.forEach(oe=>{J+=`
aIndices[${oe}] = 0;`}),J+=`
aIndices[${R-2}] = u32(row);
                   aIndices[${R-1}] = u32(colIn);`,J},q=()=>{let R=y.rank,ce=h.rank,J=`var bIndices: ${y.type.indices};`;for(let oe=R-2-1,tt=ce-1;oe>=0;oe--,tt--)J+=`
bIndices[${oe}] = ${ce>1?`batchIndices[${tt}]`:"batchIndices"};`;return C.forEach(oe=>{J+=`
bIndices[${oe}] = 0;`}),J+=`
bIndices[${R-2}] = u32(row);
                   bIndices[${R-1}] = u32(colIn);`,J};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${h.type.indices}) -> ${tn(e,I)} {
      var value = ${tn(e,I)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        ${U()}
        value = ${w.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${h.type.indices}) -> ${tn(e,I)} {
      var value = ${tn(e,I)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        ${q()}
        value = ${y.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${tn(e,I)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${a?"bias[colIn]":`${tn(e,I)}(bias[row])`};`:""}
        ${r}
        ${u.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},ia=(e,t,r,n,s=!1)=>{let a=e[0].dims,i=e[1].dims,d=a.slice(0,-2),c=i.slice(0,-2),h=n?n.slice(0,-2):r.slice(0,-2),w=He.size(h),y=a[a.length-2],u=a[a.length-1],k=i[i.length-1],C=u%4===0&&k%4===0,I=y<=8?[4,1,1]:[4,4,1],U=[8,8,1],q=[Math.ceil(k/U[0]/I[0]),Math.ceil(y/U[1]/I[1]),Math.ceil(w/U[2]/I[2])],R=C?4:1,ce=[...d,y,u/R],J=ce.length,oe=[...c,u,k/R],tt=oe.length,Ge=[w,y,k/R],dt=[{type:6,data:y},{type:6,data:k},{type:6,data:u}];Gn(t,dt),dt.push(...St(h,ce,oe));let zt=["rank","rank"],Dt=e.length>2;Dt&&(dt.push(...St(e[2].dims)),zt.push("rank")),dt.push(...St(Ge));let cr=_r=>{let nr=h.length,Sr=hi("batchDims",e[0].dataType,nr,1),Wr=br(e[0].dataType),dr=it("a",e[0].dataType,J,R),Nr=it("b",e[1].dataType,tt,R),Lt=Ut("result",e[0].dataType,Ge.length,R),Zt=[dr,Nr];if(Dt){let Lr=s?R:1;Zt.push(it("bias",e[2].dataType,e[2].dims.length,Lr))}let fr=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];qn(t,fr);let Le=br(Lt.type.tensor),jt=Wn(t,Lt.type.value,Le),rr=wl(R,Dt,jt,[Sr,dr,Nr,Lt],[d,c,h],s);return`
  ${_r.registerUniforms(fr).registerInternalVariables(Sr).declareVariables(...Zt,Lt)}
  ${rr}
  ${C?Ys(I,U,Wr,Sr):Zs(I,U,Wr,Sr)}
                   `};return{name:"MatMul",shaderCache:{hint:`${I};${t.activation};${C};${s}`,inputDependencies:zt},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:q[0],y:q[1],z:q[2]},programUniforms:dt}),getShaderSource:cr}}}),yl,bl,Wu=B(()=>{Qt(),fn(),or(),Dn(),Xs(),Qs(),hs(),yl=(e,t,r,n,s=!1,a,i=4,d=4,c=4,h="f32")=>{let w=zt=>{switch(zt){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${h}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${zt} is not supported.`)}},y=zt=>{switch(zt){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${zt} is not supported.`)}},u=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,k=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,C=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",I=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",U=e?"row":"col",q=e?"col":"row",R=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${U} / outWidth;
    let outCol = ${U} % outWidth;

    let WRow = ${q} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${q} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${q} % inChannels;
    var resData = ${tn(i,h)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${C} && xCol >= 0 && xCol < ${I}) {
      ${u}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${w(i)}
    }
    return resData;`,ce=e?t&&n?`
    let col = colIn * ${i};
    ${R}`:`
    let col = colIn * ${i};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${R}
    }
    return ${tn(i,h)}(0.0);`:n&&r?`
    let col = colIn * ${i};
    ${R}`:`
    let col = colIn * ${i};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${R}
    }
    return ${tn(i,h)}(0.0);`,J=`${y(d)}`,oe=tn(c,h),tt=tn(e?i:d,h),Ge=tn(e?d:i,h),dt=Wn(a,oe,h);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${tt} {
      ${e?ce:J}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Ge} {
      ${e?J:ce}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${oe}) {
      let col = colIn * ${c};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${k}
      ${na(s)}
      ${dt}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},bl=(e,t,r,n,s,a,i,d)=>{let c=t.format==="NHWC",h=c?e[0].dims[3]:e[0].dims[1],w=r[0],y=c?r[2]:r[3],u=c?r[1]:r[2],k=c?r[3]:r[1],C=c&&(h%4===0||h%3===0)&&k%4===0,I=c?k:y*u,U=c?y*u:k,q=[8,8,1],R=n<=8?[4,1,1]:[4,4,1],ce=[Math.ceil(I/q[0]/R[0]),Math.ceil(U/q[1]/R[1]),Math.ceil(w/q[2]/R[2])];Br("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${ce}`);let J=C?c&&h%4!==0?3:4:1,oe=q[1]*R[1],tt=q[0]*R[0],Ge=Math.max(q[0]*J,q[1]),dt=n%oe===0,zt=s%tt===0,Dt=a%Ge===0,cr=C?[J,4,4]:[1,1,1],_r=[{type:6,data:n},{type:6,data:s},{type:6,data:a},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];Gn(t,_r),_r.push(...St(e[0].dims,e[1].dims));let nr=["rank","rank"];i&&(_r.push(...St(e[2].dims)),nr.push("rank")),_r.push(...St(r));let Sr=Wr=>{let dr=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];qn(t,dr);let Nr=C?4:1,Lt=br(e[0].dataType),Zt=`
      fn setOutputAtIndex(flatIndex : i32, value : ${C?`vec4<${Lt}>`:Lt}) {
        result[flatIndex] = ${C?`vec4<${Lt}>`:Lt}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${C?`vec4<${Lt}>`:Lt}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${C?"/ 4":""}, value);
      }`,fr=it("x",e[0].dataType,e[0].dims.length,J===3?1:J),Le=it("w",e[1].dataType,e[1].dims.length,Nr),jt=[fr,Le],rr=Ut("result",e[0].dataType,r.length,Nr);if(i){let Lr=it("bias",e[2].dataType,e[2].dims.length,Nr);jt.push(Lr),Zt+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${C?`vec4<${Lt}>`:Lt} {
          return bias[coords.${c?"w":"y"}${C?"/ 4":""}];
        }`}return`
        ${sa("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${Wr.registerUniforms(dr).declareVariables(...jt,rr)}
        ${Zt}
        ${yl(c,dt,zt,Dt,i,t,cr[0],cr[1],cr[2],Lt)}
        ${C?Ys(R,q,Lt,void 0,!c,Ge):Zs(R,q,Lt,void 0,!c,Ge,!1,void 0,d)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${J};${C};${dt};${zt};${Dt};${oe};${tt};${Ge}`,inputDependencies:nr},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:ce[0],y:ce[1],z:ce[2]},programUniforms:_r}),getShaderSource:Sr}}}),Gu,aa,ks,Ml,Zn,vl,xl,Tl,qu=B(()=>{Qt(),fn(),Yt(),or(),Dn(),Xs(),Gu=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t},aa=e=>typeof e=="number"?[e,e,e]:e,ks=(e,t)=>t<=1?e:e+(e-1)*(t-1),Ml=(e,t,r,n=1)=>{let s=ks(t,n);return Math.floor((e[0]*(r-1)-r+s)/2)},Zn=(e,t,r,n,s)=>{s==null&&(s=Ml(e,t[0],n[0]));let a=[0,0,0,r];for(let i=0;i<3;i++)e[i]+2*s>=t[i]&&(a[i]=Math.trunc((e[i]-t[i]+2*s)/n[i]+1));return a},vl=(e,t,r,n,s,a,i,d,c,h)=>{let w,y,u,k;if(e==="VALID"&&(e=0),typeof e=="number"){w={top:e,bottom:e,left:e,right:e,front:e,back:e};let C=Zn([t,r,n,1],[d,c,h],1,[s,a,i],e);y=C[0],u=C[1],k=C[2]}else if(Array.isArray(e)){if(!e.every((I,U,q)=>I===q[0]))throw Error(`Unsupported padding parameter: ${e}`);w={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let C=Zn([t,r,n,1],[d,c,h],1,[s,a,i],e[0]);y=C[0],u=C[1],k=C[2]}else if(e==="SAME_UPPER"){y=Math.ceil(t/s),u=Math.ceil(r/a),k=Math.ceil(n/i);let C=(y-1)*s+d-t,I=(u-1)*a+c-r,U=(k-1)*i+h-n,q=Math.floor(C/2),R=C-q,ce=Math.floor(I/2),J=I-ce,oe=Math.floor(U/2),tt=U-oe;w={top:ce,bottom:J,left:oe,right:tt,front:q,back:R}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:w,outDepth:y,outHeight:u,outWidth:k}},xl=(e,t,r,n,s,a=!1,i="channelsLast")=>{let d,c,h,w,y;if(i==="channelsLast")[d,c,h,w,y]=e;else if(i==="channelsFirst")[d,y,c,h,w]=e;else throw new Error(`Unknown dataFormat ${i}`);let[u,,k,C,I]=t,[U,q,R]=aa(r),[ce,J,oe]=aa(n),tt=ks(k,ce),Ge=ks(C,J),dt=ks(I,oe),{padInfo:zt,outDepth:Dt,outHeight:cr,outWidth:_r}=vl(s,c,h,w,U,q,R,tt,Ge,dt),nr=a?u*y:u,Sr=[0,0,0,0,0];return i==="channelsFirst"?Sr=[d,nr,Dt,cr,_r]:i==="channelsLast"&&(Sr=[d,Dt,cr,_r,nr]),{batchSize:d,dataFormat:i,inDepth:c,inHeight:h,inWidth:w,inChannels:y,outDepth:Dt,outHeight:cr,outWidth:_r,outChannels:nr,padInfo:zt,strideDepth:U,strideHeight:q,strideWidth:R,filterDepth:k,filterHeight:C,filterWidth:I,effectiveFilterDepth:tt,effectiveFilterHeight:Ge,effectiveFilterWidth:dt,dilationDepth:ce,dilationHeight:J,dilationWidth:oe,inShape:e,outShape:Sr,filterShape:t}},Tl=(e,t,r,n,s,a)=>{let i=a==="channelsLast";i?e[0].dims[3]:e[0].dims[1];let d=[64,1,1],c={x:r.map((U,q)=>q)},h=[Math.ceil(Gu(c.x.map(U=>r[U]))/d[0]),1,1];Br("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${h}`);let w=1,y=He.size(r),u=[{type:12,data:y},{type:12,data:n},{type:12,data:s},{type:12,data:t.strides},{type:12,data:t.dilations}];Gn(t,u),u.push(...St(e[0].dims,e[1].dims));let k=["rank","rank"],C=e.length===3;C&&(u.push(...St(e[2].dims)),k.push("rank")),u.push(...St(r));let I=U=>{let q=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:n.length},{name:"pads",type:"u32",length:s.length},{name:"strides",type:"u32",length:t.strides.length},{name:"dilations",type:"u32",length:t.dilations.length}];qn(t,q);let R=1,ce=br(e[0].dataType),J=it("x",e[0].dataType,e[0].dims.length,w),oe=it("W",e[1].dataType,e[1].dims.length,R),tt=[J,oe],Ge=Ut("result",e[0].dataType,r.length,R),dt="";if(C){let cr=it("bias",e[2].dataType,e[2].dims.length,R);tt.push(cr),dt+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${ce} {
          return bias[${i?Ot("coords",4,5):Ot("coords",1,5)}];
        }`}let zt=tn(w,ce),Dt=Wn(t,zt,ce);return`
            ${dt}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${J.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${oe.getByIndices("aIndices")};
            }
          ${U.registerUniforms(q).declareVariables(...tt,Ge)}
          ${U.mainStart()}
          ${U.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${Ge.offsetToIndices("global_idx")};
              let batch = ${Ot("coords",0,J.rank)};
              let d2 = ${i?Ot("coords",J.rank-1,J.rank):Ot("coords",1,J.rank)};
              let xFRCCorner = vec3<u32>(${i?Ot("coords",1,J.rank):Ot("coords",2,J.rank)},
              ${i?Ot("coords",2,J.rank):Ot("coords",3,J.rank)},
              ${i?Ot("coords",3,J.rank):Ot("coords",4,J.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${i?Ot("uniforms.x_shape",1,J.rank):Ot("uniforms.x_shape",2,J.rank)};
              let xShapeZ = ${i?Ot("uniforms.x_shape",2,J.rank):Ot("uniforms.x_shape",3,J.rank)};
              let xShapeW = ${i?Ot("uniforms.x_shape",3,J.rank):Ot("uniforms.x_shape",4,J.rank)};
              let xShapeU = ${i?Ot("uniforms.x_shape",4,J.rank):Ot("uniforms.x_shape",1,J.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${i?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${i?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${i?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${i?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${C?"value = value + getBiasByOutputCoords(coords)":""};
              ${Dt}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${t.cacheKey};${i};${w};${C}`,inputDependencies:k},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:h[0],y:h[1],z:h[2]},programUniforms:u}),getShaderSource:I}}}),oa,Js,kd=B(()=>{Qt(),Yt(),or(),Al(),Dn(),oa=(e,t,r)=>{let n=e.length>2,s=n?"value += b[output_channel];":"",a=e[0].dims,i=e[1].dims,d=i[0]/t.group,c=t.format==="NHWC",h=ei(a,i,t.dilations,t.pads,t.strides,c),w=He.size(h),y=[{type:12,data:w},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:d}];Gn(t,y),y.push(...St(a,i));let u=["rank","rank"];n&&(y.push(...St(e[2].dims)),u.push("rank")),y.push(...St(h));let k=C=>{let I=Ut("output",e[0].dataType,h.length),U=br(I.type.tensor),q=Wn(t,I.type.value,U),R=it("x",e[0].dataType,a.length),ce=it("w",e[1].dataType,i.length),J=[R,ce];n&&J.push(it("b",e[2].dataType,e[2].dims.length));let oe=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return qn(t,oe),`
  ${C.registerUniforms(oe).declareVariables(...J,I)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${I.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${c?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${c?1:2}], outputIndices[${c?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel / uniforms.output_channels_per_group;

    var value: ${I.type.value} = ${I.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[${c?1:2}]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[${c?2:3}]) {
            continue;
          }

          let xVal = ${c?R.get("batch","xHeight","xWidth","input_channel"):R.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${ce.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${s}
    ${q}
    ${I.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:u},getRunData:()=>({outputs:[{dims:r?r(h):h,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:y}),getShaderSource:k}},Js=(e,t,r)=>{let n=e.length>2,s=mr(r[3]),a=mr(r[2]),i=He.size(r)/s/a,d=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/s],c=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/s],h=[r[0],r[1],r[2],r[3]/s],w=[{type:12,data:i},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];Gn(t,w),w.push(...St(d,c,h));let y=(a-1)*t.strides[1]+c[1],u=k=>{let C=Ut("output",e[0].dataType,h.length,s),I=br(C.type.tensor),U=Wn(t,C.type.value,I),q=it("x",e[0].dataType,d.length,s),R=it("w",e[1].dataType,c.length,s),ce=[q,R];n&&ce.push(it("b",e[2].dataType,e[2].dims,s));let J=n?"value += b[output_channel];":"",oe=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return qn(t,oe),`
  ${k.registerUniforms(oe).declareVariables(...ce,C)}
  ${k.mainStart()}
    ${k.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${a}u;
    let col = (index1 % width1) * ${a}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${q.type.value}, ${y}>;
    var values: array<${C.type.value}, ${a}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${c[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${y}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${q.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${q.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${c[1]}; w_width++) {
          let w_val = ${R.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${a}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${a}u; i++) {
      var value = values[i];
      ${J}
      ${U}
      ${C.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${s};${a};${y};${c[0]};${c[1]}`,inputDependencies:n?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:w}),getShaderSource:u}}}),la,Cl,El,$l=B(()=>{Qt(),Yt(),hs(),or(),Dn(),la=(e,t,r,n,s=!1)=>{let a=e[0].dims,i=e[1].dims,d=a[a.length-2],c=i[i.length-1],h=a[a.length-1],w=mr(c),y=mr(h),u=mr(d),k=He.size(r)/w/u,C=e.length>2,I=n?n.slice(0,-2):r.slice(0,-2),U=[He.size(I),d,c],q=[{type:12,data:k},{type:12,data:d},{type:12,data:c},{type:12,data:h}];Gn(t,q),q.push(...St(I,a,i)),C&&q.push(...St(e[2].dims)),q.push(...St(U));let R=ce=>{let J=hi("batch_dims",e[0].dataType,I.length),oe=it("a",e[0].dataType,a.length,y),tt=it("b",e[1].dataType,i.length,w),Ge=Ut("output",e[0].dataType,U.length,w),dt=br(Ge.type.tensor),zt=Wn(t,Ge.type.value,dt),Dt=[oe,tt],cr="";if(C){let Zt=s?w:1;Dt.push(it("bias",e[2].dataType,e[2].dims.length,Zt)),cr=`${s?`value += bias[col / ${Zt}];`:`value += ${Ge.type.value}(bias[row + i]);`}`}let _r=a.slice(0,-2),nr=i.slice(0,-2),Sr=us(_r,I),Wr=us(nr,I),dr=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];qn(t,dr);let Nr=(Zt,fr)=>{let Le=Zt.rank,jt=Zt.name;if(Le===2)return`var ${jt}_indices = ${Zt.type.indices}(0u, 0u);`;let rr=J.rank,Lr=`var ${jt}_indices: ${Zt.type.indices};`;for(let Xr=Le-2-1,sn=rr-1;Xr>=0;Xr--,sn--)Lr+=`
${jt}_indices[${Xr}] = ${rr>1?`batch_indices[${sn}]`:"batch_indices"};`;return fr.forEach(Xr=>{Lr+=`
${jt}_indices[${Xr}] = 0;`}),Lr+=`${jt}_indices[${Le-2}] = 0u;
                     ${jt}_indices[${Le-1}] = 0u;`,Lr},Lt=()=>{let Zt=`var a_data: ${oe.type.value};`;for(let fr=0;fr<y;fr++)Zt+=`
              let b_data${fr} = b[(b_offset + (k + ${fr}) * uniforms.N + col) / ${w}];`;for(let fr=0;fr<u;fr++){Zt+=`a_data = a[(a_offset + (row + ${fr}) * uniforms.K + k) / ${y}];`;for(let Le=0;Le<y;Le++)Zt+=`
            values[${fr}] = fma(${tt.type.value}(a_data${y===1?"":`[${Le}]`}), b_data${Le}, values[${fr}]);
`}return Zt};return`
  ${ce.registerUniforms(dr).registerInternalVariables(J).declareVariables(...Dt,Ge)}
  ${ce.mainStart()}
    ${ce.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${w})) * ${w};
    var index1 = global_idx / (uniforms.N / ${w});
    let stride1 = uniforms.M / ${u};
    let row = (index1 % stride1) * ${u};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${J.offsetToIndices("batch")};`}
    ${Nr(oe,Sr)}
    let a_offset = ${oe.indicesToOffset("a_indices")};
    ${Nr(tt,Wr)}
    let b_offset = ${tt.indicesToOffset("b_indices")};
    var values: array<${Ge.type.value}, ${u}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${y}) {
      ${Lt()}
    }
    for (var i = 0u; i < ${u}u; i++) {
      var value = values[i];
      ${cr}
      ${zt}
      let cur_indices = ${Ge.type.indices}(batch, row + i, col);
      let offset = ${Ge.indicesToOffset("cur_indices")};
      ${Ge.setByOffset(`offset / ${w}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${w};${y};${u};${s}`,inputDependencies:C?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(k/64)},programUniforms:q}),getShaderSource:R}},Cl=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},El=e=>{Cl(e.inputs);let t=Yr.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&n<8?e.compute(la(e.inputs,{activation:""},t)):e.compute(ia(e.inputs,{activation:""},t))}}),ei,Ps,Sl,ti,ri,kl,Pl,ua,da,Al=B(()=>{Yt(),Wu(),qu(),hs(),kd(),Dn(),$l(),ds(),ei=(e,t,r,n,s,a)=>{let i=e[0],d=e.slice(a?1:2,a?3:4),c=d.length,h=t[0],w=t.slice(2).map((u,k)=>u+(u-1)*(r[k]-1)),y=d.map((u,k)=>u+n[k]+n[k+c]).map((u,k)=>Math.floor((u-w[k]+s[k])/s[k]));return y.splice(0,0,i),y.splice(a?3:1,0,h),y},Ps=[2,3,1,0],Sl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},ti=(e,t)=>{let r=e.kernelShape.slice();for(let a=2;a<t[1].dims.length;++a)r[a-2]===0&&(r[a-2]=t[1].dims[a]);let n=e.pads.slice();gn.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format==="NHWC",e.autoPad);let s=Object.assign({},e);return Object.assign(s,{kernelShape:r,pads:n}),s},ri=e=>{let t=ra(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],s=e.dilations,a=e.group,i=e.kernel_shape,d=e.pads,c=e.strides,h=e.w_is_const();return{autoPad:n,format:r,dilations:s,group:a,kernelShape:i,pads:d,strides:c,wIsConst:h,...t,cacheKey:`${e.format};${t.activation};`}},kl=(e,t,r)=>{let n=ti(r,t),s=r.format==="NHWC";if(r.group!==1){if(!e.adapterInfo.isArchitecture("ampere")&&s&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let tt=ei(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,s),Ge=e.kernelCustomData.wT??e.compute(zn(t[1],Ps),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Ge);let dt=[t[0],Ge];t.length===3&&dt.push(t[2]),e.compute(Js(dt,n,tt),{inputs:dt})}else e.compute(oa(t,n));return}let a=t.length===3,i=t[0].dims[s?1:2],d=t[0].dims[s?2:3],c=t[0].dims[s?3:1],h=t[1].dims[2],w=t[1].dims[3],y=ei(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,s),u=y[s?1:2],k=y[s?2:3],C=y[s?3:1],I=s&&h===i&&w===d&&r.pads[0]===0&&r.pads[1]===0;if(I||h===1&&w===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let tt=y[0],Ge,dt,zt,Dt=[];if(s){let nr=e.kernelCustomData.wT??e.compute(zn(t[1],Ps),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=nr),I){let Sr=i*d*c;Ge=t[0].reshape([1,tt,Sr]),dt=nr.reshape([1,Sr,C]),zt=[1,tt,C]}else Ge=t[0].reshape([tt,i*d,c]),dt=nr.reshape([1,c,C]),zt=[tt,u*k,C];Dt.push(Ge),Dt.push(dt)}else Ge=t[0].reshape([tt,c,i*d]),dt=t[1].reshape([1,C,c]),zt=[tt,C,u*k],Dt.push(dt),Dt.push(Ge);a&&Dt.push(t[2]);let cr=zt[2],_r=Dt[0].dims[Dt[0].dims.length-1];cr<8&&_r<8?e.compute(la(Dt,n,y,zt,s),{inputs:Dt}):e.compute(ia(Dt,n,y,zt,s),{inputs:Dt});return}let U=!0,q=e.kernelCustomData.wT??e.compute(zn(t[1],Ps),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=q);let R=[t[0],q];a&&R.push(t[2]);let ce=s?u*k:C,J=s?C:u*k,oe=h*w*c;e.compute(bl(R,n,y,ce,J,oe,a,U),{inputs:R})},Pl=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let s=[0,t.pads[0],0,t.pads[1]],a=[1].concat(t.strides),i=[1].concat(t.dilations),d=[1].concat(t.kernelShape),c=ti({...t,pads:s,strides:a,dilations:i,kernelShape:d},n);e.compute(oa(n,c,h=>r?[h[0],h[2],h[3]]:[]))},ua=(e,t,r)=>{let n=r.format==="NHWC"?"channelsLast":"channelsFirst",s=ti(r,t),a=r.autoPad==="NOTSET"?r.pads:r.autoPad,i=xl(t[0].dims,t[1].dims,r.strides,r.dilations,a,!1,n);e.compute(Tl(t,s,i.outShape,[i.filterDepth,i.filterHeight,i.filterWidth],[i.padInfo.front,i.padInfo.top,i.padInfo.left],n))},da=(e,t)=>{Sl(e.inputs,t),e.inputs[0].dims.length===3?Pl(e,t):e.inputs[0].dims.length===5?ua(e,e.inputs,t):kl(e,e.inputs,t)}}),ni,Il,Hu=B(()=>{Qt(),fn(),or(),Dn(),Xs(),Qs(),hs(),ni=(e,t=!1,r,n,s=4)=>{let a=U=>{switch(U){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return ${n}(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${U} is not supported.`)}},i=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,d=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,c=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",h=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",w=e?"row":"col",y=e?"col":"row",u=`
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${w} / outWidth;
      let outCol = ${w} % outWidth;

      let WRow = ${y} / (uniforms.filter_dims[1] * inChannels);
      let WCol = ${y} / inChannels % uniforms.filter_dims[1];
      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(${c}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${h}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${y} % inChannels;
      ${i}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${s}];`,k=e?`
      let col = colIn * ${s};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
        ${u}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${s};
      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
        ${u}
      }
      return ${n}(0.0);`,C=`
      let col = colIn * ${s};
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);
      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];
      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${a(s)}
      }
      return ${n}(0.0);
      `,I=Wn(r,n);return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?k:C}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?C:k}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${s};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${d}
      ${na(t)}
      ${I}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${s}] = value;
    }
  }`},Il=(e,t,r,n,s,a,i,d)=>{let c=t.format==="NHWC",h=c?e[0].dims[3]:e[0].dims[1],w=r[0],y=c?r[2]:r[3],u=c?r[1]:r[2],k=c?r[3]:r[1],C=c&&h%4===0&&h%3&&k%4===0,I=c?k:y*u,U=c?y*u:k,q=[8,8,1],R=n<=8?[4,1,1]:[4,4,1],ce=[Math.ceil(I/q[0]/R[0]),Math.ceil(U/q[1]/R[1]),Math.ceil(w/q[2]/R[2])];Br("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${ce}`);let J=C?4:1,oe=Math.max(q[0]*J,q[1]),tt=C?4:1,Ge=[t.kernelShape[c?1:2],t.kernelShape[c?2:3]],dt=[Ge[0]+(t.dilations[0]<=1?0:(Ge[0]-1)*(t.dilations[0]-1)),Ge[1]+(t.dilations[1]<=1?0:(Ge[1]-1)*(t.dilations[1]-1))],zt=[dt[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),dt[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],Dt=[{type:6,data:n},{type:6,data:s},{type:6,data:a},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:Ge},{type:6,data:zt}];Gn(t,Dt),Dt.push(...St(e[0].dims,e[1].dims));let cr=["rank","rank"];i&&(Dt.push(...St(e[2].dims)),cr.push("rank")),Dt.push(...St(r));let _r=nr=>{let Sr=it("x",e[0].dataType,e[0].dims.length,tt),Wr=it("w",e[1].dataType,e[1].dims.length,1),dr=Ut("result",e[0].dataType,r.length,tt),Nr=[Sr,Wr],Lt="";if(i){let Le=it("bias",e[2].dataType,e[2].dims.length,tt);Nr.push(Le),Lt+=`
          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${Le.type.value} {
            return bias[coords.${c?"w":"y"}${C?"/ 4":""}];
          }`}let Zt=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:Ge.length},{name:"pads",type:"i32",length:zt.length}];qn(t,Zt);let fr=br(e[0].dataType,1);if(fr!=="f16"&&fr!=="f32")throw new Error(`elemType ${fr} is not supported.`);return`
        ${sa("uniforms.result_strides")}
        ${nr.registerUniforms(Zt).declareVariables(...Nr,dr)};
        ${Lt}
        ${ni(c,i,t,Sr.type.value,J)}
        ${C?Ys(R,q,fr,void 0,!c,oe):Zs(R,q,fr,void 0,!c,oe,!1,void 0,d)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${R};${q};${C}`,inputDependencies:cr},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:ce[0],y:ce[1],z:ce[2]},programUniforms:Dt}),getShaderSource:_r}}}),Fl,ca,Ol=B(()=>{Qt(),fn(),Yt(),or(),Fl=(e,t,r,n,s,a=!1,i,d,c=!1)=>{let h=c?1:2,w=c?2:3,y=c?3:1,u=a?2:1,k=`
  fn setOutputAtIndex(flatIndex : u32, value : ${a?`vec4<${i}>`:i}) {
    result[flatIndex] = ${a?`vec4<${i}>`:i}(value);
  }`;n&&(k+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${a?`vec4<${i}>`:i} {
      return bias[coords.${c?"w":"y"}${a?"/ 4":""}];
    }`);let C=a?4:1,I=it("W",t[1].dataType,t[1].dims.length,C),U=it("Dy",t[0].dataType,t[0].dims.length,C),q=[U,I];n&&q.push(it("bias",t[2].dataType,[r[y]].length,C));let R=Ut("result",t[0].dataType,r.length,C),ce=`{
        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];
        let r = ${s?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];
        let c = ${s?"global_id.y":"workgroup_id.y"} * ${u};
        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${i}>, ${u}>;
        for (var i = 0; i < ${u}; i++) {
          dotProd[i] = vec4<${i}>(0.0);
        }
        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {
          var dyR = (${i}(dyCorner.x) + ${i}(wR)) / ${i}(uniforms.strides.x);
          let wRPerm = uniforms.filter_dims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${i}(uniforms.Dy_shape[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {
            let dyC = (${i}(dyCorner.y) + ${i}(wC)) / ${i}(uniforms.strides.y);
            let dyC2 = (${i}(dyCorner.y) + 1.0 + ${i}(wC)) / ${i}(uniforms.strides.y);
            let wCPerm = uniforms.filter_dims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${i}(uniforms.Dy_shape[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${i}(uniforms.Dy_shape[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${U.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${i}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${U.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${i}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = uniforms.Dy_shape[${y}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${U.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${i}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${I.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${U.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${i}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${u}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${i}>(0.0)`};
          ${R.set("batch","r","c + i","d1","value")};
        }
      }`,J=`
          let outputIndices = ${R.offsetToIndices("global_idx")};
          let batch = ${R.indicesGet("outputIndices",0)};
          let d1 = ${R.indicesGet("outputIndices",y)};
          let r = ${R.indicesGet("outputIndices",h)};
          let c = ${R.indicesGet("outputIndices",w)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / uniforms.output_channels_per_group;
          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${i}(0.0);
          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
            if (wR % uniforms.dilations.x != 0) {
              continue;
            }
            let dyR = (${i}(dyRCorner) + ${i}(wR)) / ${i}(uniforms.strides[0]);
            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
            if (dyR < 0.0 || dyR >= ${i}(uniforms.Dy_shape[${h}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
              if (wC % uniforms.dilations.y != 0) {
                continue;
              }
              let dyC = (${i}(dyCCorner) + ${i}(wC)) / ${i}(uniforms.strides.y);
              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
              if (dyC < 0.0 || dyC >= ${i}(uniforms.Dy_shape[${w}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * uniforms.input_channels_per_group;
              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {
                let xValue = ${c?U.get("batch","idyR","idyC","inputChannel"):U.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${I.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":`${i}(0.0)`};
          ${R.setByOffset("global_idx","value")};
        `;return`
  ${e.registerUniforms(d).declareVariables(...q,R)}
  ${k}

    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
  ${a?ce:J}}`},ca=(e,t,r)=>{let n=e.length>2,s=t.outputShape,a=He.size(s),i=[Math.ceil(a/64),1,1];Br("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${i}`);let d=t.format==="NHWC",c=["rank","rank"],h=[t.strides[0],t.strides[1]],w=[t.kernelShape[d?1:2],t.kernelShape[d?2:3]],y=[t.dilations[0],t.dilations[1]],u=[w[0]+(t.dilations[0]<=1?0:(t.kernelShape[d?1:2]-1)*(t.dilations[0]-1)),w[1]+(t.dilations[1]<=1?0:(t.kernelShape[d?2:3]-1)*(t.dilations[1]-1))],k=[u[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),u[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],C=!1,I=t.group,U=e[1].dims,q=U[0]/I,R=U[1],ce=[{type:12,data:a},{type:12,data:h},{type:12,data:w},{type:12,data:y},{type:12,data:u},{type:6,data:k},{type:12,data:q},{type:12,data:R},...St(e[0].dims,e[1].dims)];n&&(ce.push(...St(e[2].dims)),c.push("rank")),ce.push(...St(s));let J=i[1]===1&&i[2]===1,oe=tt=>{let Ge=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:h.length},{name:"filter_dims",type:"u32",length:w.length},{name:"dilations",type:"u32",length:w.length},{name:"effective_filter_dims",type:"u32",length:u.length},{name:"pads",type:"i32",length:k.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],dt=br(e[0].dataType);return`${Fl(tt,e,s,n,J,C,dt,Ge,d)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:c},getRunData:()=>({dispatchGroup:{x:i[0],y:i[1],z:i[2]},outputs:[{dims:r?r(s):s,dataType:e[0].dataType}],programUniforms:ce}),getShaderSource:oe}}}),si,Ku,zl,pa,ha,Dl,Bl,fa,Ll,Rl,Nl=B(()=>{Hu(),Ol(),Dn(),ds(),si=(e,t,r,n,s,a)=>(e-1)*t+r+(n-1)*s+1-a,Ku=(e,t,r,n,s)=>{let a=Math.floor(e/2);t==="SAME_UPPER"?(r[n]=a,r[s]=e-a):t==="SAME_LOWER"&&(r[n]=e-a,r[s]=a)},zl=(e,t,r,n,s,a,i,d,c,h)=>{let w=e.length-2,y=h.length===0;if(c.length===0)for(let C=0;C<w;++C)c.push(0);let u=e[0],k=t[d?3:1]*s;for(let C=0,I=e.length-w-(d?1:0);C<w;++C,++I){let U=e[I],q=y?U*i[C]:h[C],R=si(U,i[C],a[C],t[I],r[C],q);Ku(R,n,a,C,C+w),y&&h.push(i[C]*(U-1)+c[C]+(t[I]-1)*r[C]+1-a[C]-a[C+w])}h.splice(0,0,u),h.splice(d?3:1,0,k)},pa=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((y,u)=>y*u,1)===0){r.length=0;for(let y=2;y<t[1].dims.length;++y)r.push(t[1].dims[y])}let n=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let s=e.pads.slice(),a=e.outputShape.slice(),i=e.outputPadding.slice(),d=t[0].dims,c=e.dilations.slice();if(c.reduce((y,u)=>y+u,0)===0){let y=t[0].dims.length-2;c=new Array(y).fill(1)}let h=e.strides.slice();if(h.reduce((y,u)=>y+u,0)===0){let y=t[0].dims.length-2;h=new Array(y).fill(1)}zl(d,r,c,e.autoPad,e.group,s,h,n,i,a);let w=Object.assign({},e);return Object.assign(w,{kernelShape:r,pads:s,outputPadding:i,outputShape:a,dilations:c,strides:h}),w},ha=e=>{let t=ra(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],s=e.dilations,a=e.group,i=e.kernelShape,d=e.pads,c=e.strides,h=e.wIsConst(),w=e.outputPadding,y=e.outputShape;return{autoPad:n,format:r,dilations:s,group:a,kernelShape:i,outputPadding:w,outputShape:y,pads:d,strides:c,wIsConst:h,...t,cacheKey:`${e.format};${t.activation};`}},Dl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let s=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==s))throw new Error("invalid bias");let a=e[0].dims.length-2;if(t.dilations.reduce((i,d)=>i+d,0)>0&&t.dilations.length!==a)throw new Error(`dilations should be ${a}D`);if(t.strides.reduce((i,d)=>i+d,0)>0&&t.strides.length!==a)throw new Error(`strides should be ${a}D`);if(t.pads.reduce((i,d)=>i+d,0)>0&&t.pads.length!==a*2)throw new Error(`pads should be ${a*2}D`);if(t.outputPadding.length!==a&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${a}D`);if(t.kernelShape.reduce((i,d)=>i+d,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Bl=[2,3,1,0],fa=(e,t,r)=>{let n=pa(r,t),s=r.format==="NHWC",a=n.outputShape,i=a[s?3:1],d=t[0].dims[s?3:1];if(n.group!==1||i===1&&d===1){e.compute(ca(t,n));return}let c=a[s?1:2],h=a[s?2:3],w=t[1].dims[2],y=t[1].dims[3],u=s?c*h:i,k=s?i:c*h,C=w*y*d,I=!0,U=e.kernelCustomData.wT??e.compute(zn(t[1],Bl),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=U);let q=[t[0],U],R=t.length===3;R&&(!s&&t[2].dims.length===1?q.push(t[2].reshape([t[2].dims[0],1,1])):q.push(t[2])),e.compute(Il(q,n,a,u,k,C,R,I),{inputs:q})},Ll=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let s=t.kernelShape;(s.length===0||s[0]===0)&&(s=[e.inputs[1].dims[2]]);let a=t.dilations;(a.length===0||a[0]===0)&&(a=[1]);let i=t.strides;(i.length===0||i[0]===0)&&(i=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],i=[1].concat(i),a=[1].concat(a),s=[1].concat(s);let c=pa({...t,pads:d,strides:i,dilations:a,kernelShape:s},n);e.compute(ca(n,c,h=>r?[h[0],h[2],h[3]]:[h[0],h[1],h[3]]))},Rl=(e,t)=>{Dl(e.inputs,t),e.inputs[0].dims.length===3?Ll(e,t):fa(e,e.inputs,t)}}),Xu,Qu,ma,jl=B(()=>{Qt(),Yt(),pr(),or(),Xu=(e,t,r,n)=>{let s=He.size(t),a=t.length,i=it("input",e,a),d=Ut("output",e,a),c=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),h=He.normalizeAxis(c,a),w=y=>{let u=` i32(${i.indicesGet("inputIndices","uniforms.axis")}) `,k=Ot("uniforms.input_shape","uniforms.axis",a),C=n.reverse?u+(n.exclusive?" + 1":""):"0",I=n.reverse?k:u+(n.exclusive?"":" + 1");return`
                ${y.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(i,d)}
                ${y.mainStart()}
                  ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${d.offsetToIndices("global_idx")};
                  var sum = ${d.type.value}(0);
                  let first : i32 = ${C};
                  let last : i32 = ${I};
                  for (var i : i32 = first; i < last; i++) {
                    ${i.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${i.getByIndices("inputIndices")};
                  }
                  ${d.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},{type:12,data:h},...St(t,t)]}),getShaderSource:w}},Qu=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,s=e.inputs[1];e.compute(Xu(n,r,s,t),{inputs:[0]})},ma=e=>{let t=e.exclusive===1,r=e.reverse===1;return Gt({exclusive:t,reverse:r})}}),Vl,Ul,_a,Wl,Gl,ql=B(()=>{Qt(),Yt(),pr(),or(),Vl=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},Ul=(e,t,r,n)=>{let s=[];s.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let a=0;a<t;++a)s.push(r.indicesSet("a",e[a],`i[${a}]`));return s.push("return a;}"),s.join(`
`)},_a=(e,t)=>{let r,n,s,a,i,d,c=t.format==="NHWC",h=t.blocksize,w=t.mode==="DCR";c?([r,n,s,a]=e.dims,i=w?[r,n,s,h,h,a/h**2]:[r,n,s,a/h**2,h,h],d=w?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([r,n,s,a]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],i=w?[r,h,h,a/h**2,n,s]:[r,a/h**2,h,h,n,s],d=w?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let y=e.reshape(i),u=y.dims.length,k=e.dataType,C=it("a",k,u),I=Ut("output",k,u),U=q=>`
  ${q.registerUniform("output_size","u32").declareVariables(C,I)}

  ${Ul(d,u,C,I)}

  ${q.mainStart()}
    ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${I.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${I.setByOffset("global_idx",C.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:q=>{let R=c?[r,n*h,s*h,a/h**2]:[r,a/h**2,n*h,s*h],ce=He.size(R),J=y.dims,oe=He.sortBasedOnPerm(J,d);return{outputs:[{dims:R,dataType:q[0].dataType}],dispatchGroup:{x:Math.ceil(ce/64)},programUniforms:[{type:12,data:ce},...St(J,oe)]}},getShaderSource:U}},Wl=(e,t)=>{Vl(e.inputs),e.compute(_a(e.inputs[0],t))},Gl=e=>Gt({blocksize:e.blocksize,mode:e.mode,format:e.format})}),ii,As,ai,Hl,Kl,Ir,Yu,Xl,Zu,ga,Ql,Ju=B(()=>{Qt(),Yt(),pr(),or(),ii="[a-zA-Z]|\\.\\.\\.",As="("+ii+")+",ai="^"+As+"$",Hl="("+As+",)*"+As,Kl="^"+Hl+"$",Ir=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let r=this.symbolToIndices.get(e);r===void 0?r=[t]:r.push(t),this.symbolToIndices.set(e,r)}},Yu=class{constructor(e,t){var s;this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[r,n]=t.includes("->")?t.split("->",2):[t,""];if(!r.match(RegExp(Kl)))throw new Error("Invalid LHS term");if(r.split(",").forEach((a,i)=>{let d=e[i].dims.slice();if(!a.match(RegExp(ai)))throw new Error("Invalid LHS term");let c=this.processTerm(a,!0,d,i);this.lhs.push(c)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([a,i])=>i.count===1||a==="...").map(([a])=>a).join("");else if(!n.match(RegExp(As)))throw new Error("Invalid RHS");(s=n.match(RegExp(ii,"g")))==null||s.forEach(a=>{if(a==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(a);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(e,t,r){let n=this.symbolToInfo.get(e);if(n!==void 0){if(n.dimValue!==t&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(r)}else n={count:1,dimValue:t,inputIndices:[r]};this.symbolToInfo.set(e,n)}processTerm(e,t,r,n=-1){let s=r.length,a=!1,i=[],d=0;if(!e.match(RegExp(ai))&&!t&&e!=="")throw new Error("Invalid LHS term");let c=e.match(RegExp(ii,"g")),h=new Ir(n);return c==null||c.forEach((w,y)=>{if(w==="..."){if(a)throw new Error("Only one ellipsis is allowed per input term");a=!0;let u=s-c.length+1;if(u<0)throw new Error("Ellipsis out of bounds");if(i=r.slice(d,d+u),this.hasEllipsis){if(this.ellipsisDims.length!==i.length||this.ellipsisDims.toString()!==i.toString())throw new Error("Ellipsis dimensions mismatch")}else if(t)this.hasEllipsis=!0,this.ellipsisDims=i;else throw new Error("Ellipsis must be specified in the LHS");for(let k=0;k<i.length;k++){let C=String.fromCharCode("0".charCodeAt(0)+k);h.addSymbol(C,y+k),this.addSymbol(C,r[d++],n)}}else h.addSymbol(w,y+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(w,r[d++],n)}),h}},Xl=e=>e+"_max",Zu=(e,t,r,n)=>{let s=e.map(h=>h.length).map((h,w)=>it(`input${w}`,t,h)),a=He.size(n),i=Ut("output",t,n.length),d=[...r.symbolToInfo.keys()].filter(h=>!r.rhs.symbolToIndices.has(h)),c=h=>{let w=[],y="var prod = 1.0;",u="var sum = 0.0;",k="sum += prod;",C=[],I=[],U=[],q=[],R=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((J,oe)=>{var tt;if(r.rhs.symbolToIndices.has(oe)){let Ge=(tt=r.rhs.symbolToIndices.get(oe))==null?void 0:tt[0];Ge!==void 0&&r.lhs.forEach((dt,zt)=>{if(J.inputIndices.includes(zt)){let Dt=dt.symbolToIndices.get(oe);if(Dt===void 0)throw new Error("Invalid symbol error");Dt.forEach(cr=>{w.push(`${s[zt].indicesSet(`input${zt}Indices`,cr,i.indicesGet("outputIndices",Ge))}`)})}})}else r.lhs.forEach((Ge,dt)=>{if(J.inputIndices.includes(dt)){let zt=Ge.symbolToIndices.get(oe);if(zt===void 0)throw new Error("Invalid symbol error");zt.forEach(Dt=>{C.push(`${s[dt].indicesSet(`input${dt}Indices`,Dt,`${oe}`)}`)}),q.push(`prod *= ${s[dt].getByIndices(`input${dt}Indices`)};`)}}),I.push(`for(var ${oe}: u32 = 0; ${oe} < uniforms.${Xl(oe)}; ${oe}++) {`),U.push("}")});let ce=R?[...w,`let sum = ${s.map((J,oe)=>J.getByIndices(`input${oe}Indices`)).join(" * ")};`]:[...w,u,...I,...C,y,...q,k,...U];return`
            ${h.registerUniforms(d.map(J=>({name:`${Xl(J)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...s,i)}

            ${h.mainStart()}
            ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${i.offsetToIndices("global_idx")};
            ${s.map((J,oe)=>`var input${oe}Indices: ${s[oe].type.indices};`).join(`
`)}
            ${ce.join(`
`)};
            ${i.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let h=d.filter(y=>r.symbolToInfo.has(y)).map(y=>{var u;return{type:12,data:((u=r.symbolToInfo.get(y))==null?void 0:u.dimValue)||0}});h.push({type:12,data:a});let w=e.map((y,u)=>[...St(y)]).reduce((y,u)=>y.concat(u),h);return w.push(...St(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:w}},getShaderSource:c}},ga=(e,t)=>{let r=new Yu(e.inputs,t.equation),n=r.outputDims,s=e.inputs.map((a,i)=>a.dims);e.compute(Zu(s,e.inputs[0].dataType,r,n))},Ql=e=>{let t=e.equation.replace(/\s+/g,"");return Gt({equation:t})}}),Yl,wa,ya,ba,Zl,ed=B(()=>{Qt(),Yt(),or(),Yl=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,s=t.length<r.length?0:t.length-r.length;for(;n<r.length&&s<t.length;++n,++s)if(r[n]!==t[s]&&r[n]!==1&&t[s]!==1)throw new Error("Expand requires shape to be broadcastable to input")},wa=(e,t)=>{let r=e.length-t.length,n=[];for(let s=0;s<r;++s)n.push(e[s]);for(let s=0;s<t.length;++s)n.push(t[s]===1?e[s+r]:t[s]);return n},ya=(e,t)=>e.length>t.length?wa(e,t):wa(t,e),ba=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=ya(t,r),s=e[0].dataType,a=s===9?4:1,i=Math.ceil(He.size(n)/a),d=h=>{let w=it("input",s,t.length,a),y=Ut("output",s,n.length,a),u;if(s===9){let k=(C,I,U="")=>`
          let outputIndices${I} = ${y.offsetToIndices(`outputOffset + ${I}u`)};
          let offset${I} = ${w.broadcastedIndicesToOffset(`outputIndices${I}`,y)};
          let index${I} = offset${I} / 4u;
          let component${I} = offset${I} % 4u;
          ${C}[${I}] = ${U}(${w.getByOffset(`index${I}`)}[component${I}]);
        `;u=`
        let outputOffset = global_idx * ${a};
        var data = vec4<u32>(0);
        ${k("data",0,"u32")}
        ${k("data",1,"u32")}
        ${k("data",2,"u32")}
        ${k("data",3,"u32")}
        ${y.setByOffset("global_idx","data")}
      }`}else u=`
        let outputIndices = ${y.offsetToIndices("global_idx")};
        let inputOffset = ${w.broadcastedIndicesToOffset("outputIndices",y)};
        ${y.setByOffset("global_idx",w.getByOffset("inputOffset"))}
      }`;return`
    ${h.registerUniform("vec_size","u32").declareVariables(w,y)}
    ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${u}`},c=[{type:12,data:i},...St(t,n)];return{name:"Expand",shaderCache:{hint:`${n.length}`,inputDependencies:["rank"]},getShaderSource:d,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:c})}},Zl=e=>{Yl(e.inputs),e.compute(ba(e.inputs),{inputs:[0]})}}),Ma,td,Pd=B(()=>{Qt(),Yt(),or(),Xi(),Ma=e=>{let t=e[0].dataType,r=He.size(e[0].dims),n=He.size(e[1].dims),s=n%4===0,a=i=>{let d=it("x",t,[1],4),c=it("bias",t,[1],4),h=Ut("y",t,[1],4),w=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],y=k=>`
      let bias${k}_offset: u32 = (global_idx * 4 + ${k}) % uniforms.bias_size;
      let bias${k} = ${c.getByOffset(`bias${k}_offset / 4`)}[bias${k}_offset % 4];`,u=s?`
      let bias = ${c.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${y(0)}${y(1)}${y(2)}${y(3)}
      let bias = ${d.type.value}(bias0, bias1, bias2, bias3);`;return`${i.registerUniforms(w).declareVariables(d,c,h)}

    ${Hi(Mr(t))}

    ${i.mainStart(mn)}
      ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${d.getByOffset("global_idx")};
      ${u}
      let x_in = x + bias;
      ${h.setByOffset("global_idx",Ks("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${s}`,inputDependencies:["type","type"]},getShaderSource:a,getRunData:i=>({outputs:[{dims:i[0].dims,dataType:i[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(r/mn/4)}})}},td=e=>{e.inputs.length<2||He.size(e.inputs[1].dims)===0?Xo(e):e.compute(Ma(e.inputs))}}),Jl,eu,tu,ru,rd=B(()=>{Qt(),Yt(),pr(),or(),Jl=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},eu=(e,t)=>{let r=e[0].dims,n=e[1].dims,s=r.length,a=He.normalizeAxis(t.axis,s),i=r.slice(0);i.splice(a,1,...n);let d=r[a],c=e[0].dataType===9?4:1,h=Math.ceil(He.size(i)/c),w=[{type:12,data:h},{type:6,data:d},{type:12,data:a},...St(e[0].dims,e[1].dims,i)],y=u=>{let k=it("data",e[0].dataType,e[0].dims.length,c),C=it("inputIndices",e[1].dataType,e[1].dims.length),I=Ut("output",e[0].dataType,i.length,c),U=R=>{let ce=n.length,J=`var indicesIndices${R}  = ${C.type.indices}(0);`;for(let oe=0;oe<ce;oe++)J+=`${ce>1?`indicesIndices${R}[${oe}]`:`indicesIndices${R}`} = ${i.length>1?`outputIndices${R}[uniforms.axis + ${oe}]`:`outputIndices${R}`};`;J+=`
          var idx${R} = ${C.getByIndices(`indicesIndices${R}`)};
          if (idx${R} < 0) {
            idx${R} = idx${R} + uniforms.axisDimLimit;
          }
          var dataIndices${R} : ${k.type.indices};
        `;for(let oe=0,tt=0;oe<s;oe++)oe===a?(J+=`${s>1?`dataIndices${R}[${oe}]`:`dataIndices${R}`} = u32(idx${R});`,tt+=ce):(J+=`${s>1?`dataIndices${R}[${oe}]`:`dataIndices${R}`} = ${i.length>1?`outputIndices${R}[${tt}]`:`outputIndices${R}`};`,tt++);return J},q;if(e[0].dataType===9){let R=(ce,J,oe="")=>`
          let outputIndices${J} = ${I.offsetToIndices(`outputOffset + ${J}u`)};
          ${U(J)};
          let offset${J} = ${k.indicesToOffset(`dataIndices${J}`)};
          let index${J} = offset${J} / 4u;
          let component${J} = offset${J} % 4u;
          ${ce}[${J}] = ${oe}(${k.getByOffset(`index${J}`)}[component${J}]);
        `;q=`
        let outputOffset = global_idx * ${c};
        var value = vec4<u32>(0);
        ${R("value",0,"u32")}
        ${R("value",1,"u32")}
        ${R("value",2,"u32")}
        ${R("value",3,"u32")}
        ${I.setByOffset("global_idx","value")}
      `}else q=`
      let outputIndices = ${I.offsetToIndices("global_idx")};
      ${U("")};
      let value = ${k.getByIndices("dataIndices")};
      ${I.setByOffset("global_idx","value")};
      `;return`
      ${u.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(k,C,I)}
      ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${q}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:w}),getShaderSource:y}},tu=e=>Gt({axis:e.axis}),ru=(e,t)=>{let r=e.inputs;Jl(r),e.compute(eu(e.inputs,t))}}),nu,su,iu,au,nd=B(()=>{Qt(),Yt(),pr(),or(),nu=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},su=(e,t)=>{let r=e[0].dims,n=e[0].dataType,s=r.length,a=e[1].dims,i=e[1].dataType,d=He.normalizeAxis(t.axis,s),c=r[d],h=a.slice(0),w=He.size(h),y=it("input",n,s),u=it("indicesInput",i,a.length),k=Ut("output",n,h.length),C=[{type:12,data:w},{type:6,data:c},{type:12,data:d}];return C.push(...St(r,a,h)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:h,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:C}),getShaderSource:I=>`
      ${I.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(y,u,k)}
      ${I.mainStart()}
      ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${k.offsetToIndices("global_idx")};

      var idx = ${u.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${y.type.indices}(outputIndices);
      ${y.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${y.getByIndices("inputIndices")};

      ${k.setByOffset("global_idx","value")};
  }`}},iu=e=>Gt({axis:e.axis}),au=(e,t)=>{let r=e.inputs;nu(r),e.compute(su(e.inputs,t))}}),ou,lu,uu,du,sd=B(()=>{Qt(),Yt(),or(),ou=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},lu=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[s,a,i]=gr.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),d=[s,a];if(!d)throw new Error("Can't use gemm on the given tensors");let c=He.size(d),h=[{type:12,data:c},{type:12,data:s},{type:12,data:a},{type:12,data:i},{type:1,data:t.alpha},{type:1,data:t.beta}],w=["type","type"];e.length===3&&(h.push(...St(e[2].dims)),w.push("rank")),h.push(...St(d));let y=u=>{let k="";t.transA&&t.transB?k="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?k="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?k="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(k="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let C=t.alpha===1?"":"value *= uniforms.alpha;",I=it("a",e[0].dataType,e[0].dims),U=it("b",e[1].dataType,e[1].dims),q=I.type.value,R=null,ce=[I,U];e.length===3&&(R=it("c",e[2].dataType,e[2].dims.length),ce.push(R));let J=Ut("output",e[0].dataType,d.length);ce.push(J);let oe=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${u.registerUniforms(oe).declareVariables(...ce)}

  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${q}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${k}
    }

    ${C}
    ${(()=>R!=null?`let cOffset = ${R.broadcastedIndicesToOffset("vec2(m, n)",J)}; value += ${q}(uniforms.beta) * ${R.getByOffset("cOffset")};`:"")()}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:h}),getShaderSource:y}},uu=e=>{let t=e.transA,r=e.transB,n=e.alpha,s=e.beta;return{transA:t,transB:r,alpha:n,beta:s,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},du=(e,t)=>{ou(e.inputs),e.compute(lu(e.inputs,t))}}),cn,va,cu,xa,pu,Is,hu,fu=B(()=>{Qt(),Yt(),pr(),F(),Di(),or(),ds(),cn=(e,t)=>e.length>t&&e[t].dims.length>0&&He.size(e[t].dims)>0?e[t]:void 0,va=(e,t)=>{let r=e[0],n=cn(e,1),s=cn(e,2),a=cn(e,3),i=cn(e,4),d=cn(e,5),c=cn(e,6),h=cn(e,7);if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let w=!1,y=r.dims[0],u=r.dims[1],k=r.dims.length===3?w?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],C=u,I=0,U=0,q=Math.floor(k/t.numHeads);if(c&&h){if(c.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(c.dims[0]!==y||c.dims[1]!==t.numHeads||c.dims[3]!==q)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(h.dims[0]!==y||h.dims[1]!==t.numHeads||h.dims[3]!==q)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(c.dims[2]!==h.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(h.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');I=c.dims[2],U=c.dims[2]}else if(c||h)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let R;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');R=2,C=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==q)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');R=5,C=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==q)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');R=0,C=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');R=3}if(a){if(a.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(s&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let ce=0;if(i){ce=8;let dt=i.dims;throw dt.length===1?dt[0]===y?ce=1:dt[0]===3*y+2&&(ce=3):dt.length===2&&dt[0]===y&&dt[1]===C&&(ce=5),ce===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let J=!1,oe=k;if(s){if(s.dims.length!==3&&s.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(s.dims.length===3){if(C!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');oe=s.dims[2]}else{if(C!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');oe=s.dims[1]*s.dims[3],J=!0}}let tt=I+C,Ge=!1;if(i)throw new Error("Key padding mask is not supported");if(d){if(d.dims.length!==4)throw new Error('Input "relative_position_bias" is expected to have 4 dimensions');if(d.dims[0]!==y&&d.dims[0]!==1||d.dims[1]!==t.numHeads||d.dims[2]!==u||d.dims[3]!==tt)throw new Error('Input "relative_position_bias" shape (batch_size, 1, sequence_length, kv_sequence_length)')}return{batchSize:y,sequenceLength:u,pastSequenceLength:I,kvSequenceLength:C,totalSequenceLength:tt,maxSequenceLength:U,inputHiddenSize:0,hiddenSize:k,vHiddenSize:oe,headSize:q,vHeadSize:Math.floor(oe/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:ce,scale:t.scale,broadcastResPosBias:Ge,passPastInKv:J,qkvFormat:R}},cu=e=>Gt({...e}),xa=Gt({perm:[0,2,1,3]}),pu=(e,t,r,n,s,a,i)=>{let d=[n,s,a],c=He.size(d),h=[{type:12,data:c},{type:12,data:i},{type:12,data:a}],w=y=>{let u=Ut("qkv_with_bias",t.dataType,d),k=it("qkv",t.dataType,d),C=it("bias",r.dataType,d),I=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${y.registerUniforms(I).declareVariables(k,C,u)}
  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:h}),getShaderSource:w},{inputs:[t,r],outputs:[-1]})[0]},Is=(e,t,r,n,s,a,i,d)=>{let c=a;if(i){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return c=pu(e,a,i,t,n,r*s,d),c=c.reshape([t,n,r,s]),e.compute(zn(c,xa.perm),{inputs:[c],outputs:[-1]})[0]}else return a.dims.length===3&&(c=a.reshape([t,n,r,s])),e.compute(zn(c,xa.perm),{inputs:[c],outputs:[-1]})[0]},hu=(e,t)=>{let r=va(e.inputs,t),n=e.inputs[0],s=cn(e.inputs,1),a=cn(e.inputs,2),i=cn(e.inputs,3),d=cn(e.inputs,4),c=cn(e.inputs,5),h=cn(e.inputs,6),w=cn(e.inputs,7);if(n.dims.length===5)throw new Error("Packed QKV is not implemented");if((s==null?void 0:s.dims.length)===5)throw new Error("Packed KV is not implemented");let y=s&&a&&s.dims.length===4&&a.dims.length===4,u=Is(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,n,i,0);if(y)return $s(e,u,s,a,d,void 0,h,w,c,r,t);if(!s||!a)throw new Error("key and value must be provided");let k=Is(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,s,i,r.hiddenSize),C=Is(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,a,i,2*r.hiddenSize);$s(e,u,k,C,d,void 0,h,w,c,r,t)}}),Ta,mu,_u,Ca,gu,wu=B(()=>{Qt(),Yt(),or(),Ta=e=>Array.from(e.getBigInt64Array(),Number),mu=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Ta(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},_u=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},Ca=(e,t)=>{let r=e[0].dims,n=t??Ta(e[1]),s=_u(r,n),a=He.size(s),i=e[0].dataType,d=it("input",i,r.length),c=Ut("output",i,s.length),h=w=>`
      const inputShape = ${d.indices(...r)};
      ${w.registerUniform("output_size","u32").declareVariables(d,c)}
      ${w.mainStart()}
      ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${c.offsetToIndices("global_idx")};
      var input_indices: ${d.type.indices};
      for (var i = 0; i < ${r.length}; i++) {
        let input_dim_i = ${d.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${c.indicesGet("output_indices","i")}  % input_dim_i;

        ${d.indicesSet("input_indices","i","input_dim_value")}
      }
      ${c.setByOffset("global_idx",d.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:12,data:a},...St(e[0].dims,s)]}),getShaderSource:h}},gu=e=>{mu(e.inputs),e.compute(Ca(e.inputs),{inputs:[0]})}}),yu,Ea,bu,Mu,$a,vu,id=B(()=>{Qt(),Yt(),pr(),Di(),or(),fu(),wu(),ds(),yu=(e,t)=>{let r=e[0],n=e[1],s=e[2],a=e[3],i=e[4];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let d=!1,c=r.dims[0],h=r.dims[1],w=r.dims.length===3?d?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],y=h,u=0,k=0,C=Math.floor(w/t.numHeads),I=a&&a.dims.length!==0,U=i&&i.dims.length!==0,q=!0;if(I&&U){if(a.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(i.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');u=a.dims[1],k=a.dims[1]}else if(I||U)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let R;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(r.dims[2]%n.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');R=2,y=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==C)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');R=5,y=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==C)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');R=0,y=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');R=3}let ce=0,J=!1,oe=w;if(s){if(s.dims.length!==3&&s.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(s.dims.length===3){if(y!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');oe=s.dims[2]}else{if(y!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');oe=s.dims[1]*s.dims[3],J=!0}}let tt=u+y,Ge=!1;return{batchSize:c,sequenceLength:h,pastSequenceLength:u,kvSequenceLength:y,totalSequenceLength:tt,maxSequenceLength:k,inputHiddenSize:0,hiddenSize:w,vHiddenSize:oe,headSize:C,vHeadSize:Math.floor(oe/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:ce,scale:t.scale,broadcastResPosBias:Ge,passPastInKv:J,qkvFormat:R,isPastkvBSNH:q}},Ea=(e,t,r,n)=>{let s=[n.batchSize,n.totalSequenceLength,n.kvNumHeads,n.headSize],a=4,i=He.size(s)/a,d=n.totalSequenceLength,c=Ut("present_kv",r,s.length,a),h=it("new_kv",e.dataType,e.dims.length,a),w=t?it("past_kv",t.dataType,t.dims.length,a):void 0,y=Math.ceil(n.headSize/a),u={x:d,y:e.dims[0],z:1},k=t?["rank","rank"]:["rank"],C=[{type:12,data:i},{type:12,data:n.pastSequenceLength},{type:12,data:n.kvSequenceLength},{type:12,data:n.totalSequenceLength}],I=[h];w?(C.push(...St(e.dims),...St(t.dims),...St(s)),I.push(w)):C.push(...St(e.dims),...St(s));let U=[{name:"output_size",type:"u32"},{name:"past_seqlen",type:"u32"},{name:"new_seqlen",type:"u32"},{name:"present_seqlen",type:"u32"}],q=`      let past_batch_stride = uniforms.past_seqlen * num_heads * H;
        var past_head_stride = uniforms.past_seqlen * H;
        if (is_bsnh) {
          past_head_stride = H;
        }
        let in_offset = b * past_batch_stride + s * row_stride + n * past_head_stride + h;
        present_kv[out_offset] = past_kv[in_offset];`,R=`      let new_batch_stride = uniforms.new_seqlen * num_heads * H;
        let new_row_stride = num_heads * H;
        let new_head_stride = H;
        let in_offset = b * new_batch_stride + (s - past_seqlen) * new_row_stride + n * new_head_stride + h;
        present_kv[out_offset] = new_kv[in_offset];`,ce=t?`if (s < past_seqlen) {
        ${q}
        } else if (s < past_seqlen + uniforms.new_seqlen) {
        ${R}
        }`:`if (s < past_seqlen + uniforms.new_seqlen) {
          ${R}
        }`,J=oe=>`

  ${oe.registerUniforms(U).declareVariables(...I,c)}
  ${oe.mainStart([y,n.kvNumHeads,1])}
    ${oe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    var indices = ${c.offsetToIndices("global_idx")};
    let h = local_id.x;
    let n = local_id.y;
    let s = workgroup_id.x;
    let b = workgroup_id.y;
    let num_heads = ${n.kvNumHeads}u;
    let H = ${y}u;

    let present_seqlen = uniforms.present_seqlen;
    let present_batch_stride = present_seqlen * num_heads * H;
    var row_stride = H;
    let is_bsnh = ${n.isPastkvBSNH};

    if (is_bsnh) {
      row_stride = num_heads * H;
    }
    var present_head_stride = present_seqlen * H;
    if (is_bsnh) {
      present_head_stride = H;
    }

    let past_seqlen = uniforms.past_seqlen;

    let out_offset = b * present_batch_stride + s * row_stride + n * present_head_stride + h;
    ${ce}
  }`;return{name:"ConcatPastNew",shaderCache:{hint:`${n.kvNumHeads}${y}${!!t}`,inputDependencies:k},getRunData:()=>({outputs:[{dims:s,dataType:r}],dispatchGroup:u,programUniforms:C}),getShaderSource:J}},bu=e=>Gt({...e}),Mu=Gt({perm:[0,2,1,3]}),$a=(e,t,r,n,s)=>{let a=t,i=n.kvNumHeads,d=n.nReps;return t.dims.length===3&&n.kvSequenceLength!==0&&(a=t.reshape([n.batchSize,n.kvSequenceLength,i,n.headSize])),r?a=e.compute(Ea(a,r,a.dataType,n),{inputs:[a,r],outputs:[n.isPastkvBSNH?s:-1]})[0]:a=e.compute(Ea(a,void 0,a.dataType,n),{inputs:[a],outputs:[n.isPastkvBSNH?s:-1]})[0],d!==1&&(a=e.compute(Ca([a],[1,1,1,d]),{inputs:[a],outputs:[-1]})[0],a=a.reshape([n.batchSize,n.totalSequenceLength,i*d,n.headSize])),e.compute(zn(a,Mu.perm),{inputs:[a],outputs:[-1]})[0]},vu=(e,t)=>{var c;let r=yu(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(((c=e.inputs[1])==null?void 0:c.dims.length)===5)throw new Error("Packed KV is not implemented");let n=Is(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],void 0,0),s=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,a=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,i=$a(e,e.inputs[1],s,r,1),d=$a(e,e.inputs[2],a,r,2);$s(e,n,i,d,void 0,void 0,void 0,void 0,void 0,r,t)}}),xu,Tu,Cu,Eu,ad=B(()=>{Qt(),Yt(),or(),xu=(e,t)=>{let r=e[0].dims,n=r,s=2,a=He.sizeToDimension(r,s),i=He.sizeFromDimension(r,s),d=mr(i),c=i/d,h=[r[0],r[1],c],w=["rank","type","type"],y=[{type:12,data:i},{type:12,data:c}];y.push(...St(h,h));let u=k=>{let C=it("x",e[0].dataType,h.length,d),I=it("scale",e[1].dataType,e[1].dims),U=it("bias",e[2].dataType,e[2].dims),q=Ut("output",e[0].dataType,h.length,d),R=[C,I,U,q],ce=C.type.value,J=d===1?"f32":`vec${d}<f32>`,oe=64,tt=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${J}, ${oe}>;
  const workgroupSize = ${oe}u;
  ${k.registerUniforms(tt).declareVariables(...R)}
  ${k.mainStart(oe)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${J}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${J}(${C.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${_n("workgroupShared[0]",d)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${J}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${J}(${C.get("batch","channel","h")}) - ${J}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${_n("workgroupShared[0]",d)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${I.getByOffset("channel")});
    let channelShift = f32(${U.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${C.get("batch","channel","h")} * ${ce}(${J}(channelScale)) + ${ce}(${J}(channelShift));
      ${q.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${d}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:a},programUniforms:y}),getShaderSource:u}},Tu=(e,t,r,n,s,a,i,d)=>{let c=mr(i),h=64,w=c===1?"vec2f":`mat2x${c}f`,y=c===1?"f32":`vec${c}f`,u=(tt,Ge)=>`${w}(${tt}, ${Ge})`,k=s*i/c,C=Math.ceil(a/h),I=["type"],U=[{type:12,data:C},{type:12,data:a},{type:12,data:Math.floor(i/c)},{type:12,data:Math.floor(a*i/c)}],q=tt=>{let Ge=it("input",t.dataType,t.dims,c);return`
  ${tt.declareVariables(Ge)}
  @group(0) @binding(1) var<storage, read_write> output : array<${w}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${tt.mainStart(h)}
    let currentImageNumber = global_idx / ${h} / uniforms.C;
    let currentChannelNumber = (global_idx / ${h}) % uniforms.C;
    let wgOffset = local_id.x * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${Ar("f32",c)};
    var squaredSum = ${Ar("f32",c)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${y}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${u("sum","squaredSum")};
  }`},R=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${c}`,inputDependencies:I},getRunData:()=>({outputs:[{dims:[s,i,h,2],dataType:1}],dispatchGroup:{x:s*i/c},programUniforms:U}),getShaderSource:q},{inputs:[t],outputs:[-1]})[0],ce=[{type:12,data:k},{type:12,data:a},{type:12,data:Math.floor(i/c)},{type:12,data:Math.floor(h*i/c)}],J=["type","type","type"],oe=tt=>{let Ge=it("scale",r.dataType,r.dims,c),dt=it("bias",n.dataType,n.dims,c);return`
  @group(0) @binding(0) var<storage, read> input : array<${w}>;
  @group(0) @binding(1) var<storage, read> scale : array<${Ge.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${dt.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${w}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${tt.mainStart()}
    ${tt.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${Ar("f32",c)};
    var squaredSum = ${Ar("f32",c)};
    for (var i: u32 = 0; i < min(${h}, uniforms.H); i++) {
        let value = input[offset + i + currentChannelNumber * ${h}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${d}));
    let channelScale = invStdDev * ${y}(scale[currentChannelNumber]);
    let channelShift = ${y}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${u("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${c};${d}`,inputDependencies:J},getRunData:()=>({outputs:[{dims:[s,i,2],dataType:1}],dispatchGroup:{x:Math.ceil(k/64)},programUniforms:ce}),getShaderSource:oe},{inputs:[R,r,n],outputs:[-1]})[0]},Cu=(e,t,r)=>{let n=t[0].dims,s=n,a=n[0],i=n[n.length-1],d=He.sizeFromDimension(n,1)/i,c=mr(i),h=He.size(s)/c,w=[{type:12,data:d},{type:12,data:Math.floor(i/c)}],y=["type","type"],u=Tu(e,t[0],t[1],t[2],a,d,i,r.epsilon),k=C=>{let I=br(t[0].dataType),U=c===1?"vec2f":`mat2x${c}f`,q=c===1?I:`vec${c}<${I}>`,R=it("input",t[0].dataType,t[0].dims,c),ce=Ut("output",t[0].dataType,s,c);return`
  @group(0) @binding(0) var<storage, read> input : array<${R.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${U}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${ce.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${C.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${q}(scale[0]), ${q}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${c}`,inputDependencies:y},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:w}),getShaderSource:k},{inputs:[t[0],u]})},Eu=(e,t)=>{t.format==="NHWC"?Cu(e,e.inputs,t):e.compute(xu(e.inputs,t))}}),$u,od,ur,ld=B(()=>{Qt(),Yt(),or(),$u=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},od=(e,t,r)=>{let n=t.simplified,s=e[0].dims,a=e[1],i=!n&&e[2],d=s,c=He.normalizeAxis(t.axis,s.length),h=He.sizeToDimension(s,c),w=He.sizeFromDimension(s,c),y=He.size(a.dims),u=i?He.size(i.dims):0;if(y!==w||i&&u!==w)throw new Error(`Size of X.shape()[axis:] == ${w}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${y} and bias size of ${u}`);let k=[];for(let oe=0;oe<s.length;++oe)oe<c?k.push(s[oe]):k.push(1);let C=mr(w),I=["type","type"],U=[{type:12,data:h},{type:1,data:w},{type:12,data:Math.floor(w/C)},{type:1,data:t.epsilon}];i&&I.push("type");let q=r>1,R=r>2,ce=oe=>{let tt=br(e[0].dataType),Ge=[it("x",e[0].dataType,e[0].dims,C),it("scale",a.dataType,a.dims,C)];i&&Ge.push(it("bias",i.dataType,i.dims,C)),Ge.push(Ut("output",e[0].dataType,d,C)),q&&Ge.push(Ut("mean_data_output",1,k)),R&&Ge.push(Ut("inv_std_output",1,k));let dt=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${oe.registerUniforms(dt).declareVariables(...Ge)}
  ${oe.mainStart()}
    ${oe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Ar("f32",C)};
    var mean_square_vector = ${Ar("f32",C)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${Vr(tt,C,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${_n("mean_vector",C)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${_n("mean_square_vector",C)} / uniforms.norm_size ${n?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${Vr(tt,C,"x[j + offset]")};
      let f32scale = ${Vr(tt,C,"scale[j]")};
      output[j + offset] = ${Ge[0].type.value}((f32input ${n?"":"- mean"}) * inv_std_dev * f32scale
        ${i?`+ ${Vr(tt,C,"bias[j]")}`:""}
      );
    }

    ${q?"mean_data_output[global_idx] = mean":""};
    ${R?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},J=[{dims:d,dataType:e[0].dataType}];return q&&J.push({dims:k,dataType:1}),R&&J.push({dims:k,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${C};${r};${n}`,inputDependencies:I},getRunData:()=>({outputs:J,dispatchGroup:{x:Math.ceil(h/64)},programUniforms:U}),getShaderSource:ce}},ur=(e,t)=>{$u(e.inputs),e.compute(od(e.inputs,t,e.outputCount))}}),Qr,Zr,rn,Jn,Ad=B(()=>{Qt(),Yt(),pr(),or(),Qr=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],n=r.dims.length;if(r.dims[n-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let s=Math.floor((t.k+t.blockSize-1)/t.blockSize),a=t.blockSize/8*t.bits,i=e[1];if(!He.areEqual(i.dims,[t.n,s,a]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let d=e[2].dims;if(He.size(d)!==t.n*s)throw new Error("scales input size error.");if(e.length===4){let c=e[3].dims,h=t.bits>4?t.n*s:t.n*Math.floor((s+1)/2);if(He.size(c)!==h)throw new Error("zeroPoints input size error.")}},Zr=(e,t,r,n)=>{let s=e[0].dims,a=s.length,i=Math.floor((t.k+t.blockSize-1)/t.blockSize),d=s[a-2],c=t.k,h=t.n,w=s.slice(0,a-2),y=He.size(w),u=t.blockSize/8*t.bits/4,k=e[0].dataType,C=mr(d),I=mr(t.k),U=mr(u),q=Fn(k),R=d*i*q,ce=Math.floor(n/R),J=i<=r[0]&&ce>0,oe=!J||ce>=4?mr(h):ce>=2&&mr(h)>=2?2:1,tt=w.concat([d,h]),Ge=He.size(tt)/oe/C,dt=J?[]:[{type:12,data:Ge},{type:12,data:t.blockSize}],zt=[y,d,c/I],Dt=He.convertShape(e[1].dims).slice();Dt.splice(-1,1,u/U),dt.push(...St(zt)),dt.push(...St(Dt)),dt.push(...St(e[2].dims)),e.length===4&&dt.push(...St(He.convertShape(e[3].dims)));let cr=[y,d,h/oe];dt.push(...St(cr));let _r=nr=>{let Sr=zt.length,Wr=it("a",e[0].dataType,Sr,I),dr=it("b",12,Dt.length,U),Nr=it("scales",e[2].dataType,e[2].dims.length),Lt=[Wr,dr,Nr],Zt=e.length===4?it("zero_points",12,e[3].dims.length):void 0;Zt&&Lt.push(Zt);let fr=cr.length,Le=Ut("output",e[0].dataType,fr,oe),jt=[{name:"output_size",type:"u32"},{name:"block_size",type:"u32"}],rr=br(e[0].dataType),Lr=(()=>{switch(I){case 1:return`array<${rr}, 8>`;case 2:return`mat4x2<${rr}>`;case 4:return`mat2x4<${rr}>`;default:throw new Error(`${I}-component is not supported.`)}})(),Xr=`
        for (var word: u32 = 0; word < ${u}; word += ${U}) {
          ${dr.indicesSet("b_indices","2","word")};
          let b_data = ${dr.getByIndices("b_indices")};
          for (var i: u32 = 0; i < ${U}; i++) {
            let b_value: u32 = ${U===1?"b_data":"b_data[word + i]"};
            let b_mask: u32 = 0x0F0F0F0Fu;
            let b_value_lower: vec4<u32> = unpack4xU8(b_value & b_mask);
            let b_value_upper: vec4<u32> = unpack4xU8((b_value >> 4) & b_mask);
            let b_quantized_values = ${Lr}(${Array.from({length:4},(zs,En)=>`${rr}(b_value_lower[${En}]), ${rr}(b_value_upper[${En}])`).join(", ")});
            let b_dequantized_values = ${(()=>I===1?`${Lr}(${Array.from({length:8},(zs,En)=>`(b_quantized_values[${En}] - zero_point) * scale`).join(", ")});`:`(b_quantized_values - ${Lr}(${Array(8).fill("zero_point").join(",")})) * scale;`)()};
            // Number of B elements per 32-bit word is 32/bits = 32/4 = 8
            for (var m: u32 = 0; m < ${J?d:C}u; m++) {
              ${Wr.indicesSet("a_indices",Sr-2,J?"m":`row * ${C} + m`)};
              ${Wr.indicesSet("a_indices",Sr-1,"word_offset")};
              var input_offset = ${Wr.indicesToOffset("a_indices")};
              var a_data: ${Lr};
              for (var j: u32 = 0; j < ${8/I}; j++) {
                a_data[j] = ${Wr.getByOffset("input_offset")};
                input_offset++;
              }
              ${J?"workgroup_shared[workgroup_shared_offset + m]":"output_values[m]"}${oe>1?"[c]":""} += ${Array.from({length:8/I},(zs,En)=>`${I===1?`a_data[${En}] * b_dequantized_values[${En}]`:`dot(a_data[${En}], b_dequantized_values[${En}])`}`).join(" + ")};
            }
            word_offset += ${8/I};
          }
        }`,sn=Zt?`
          zero_point_offset += 4;
          if (zero_point_offset == 32) {
            zero_point_offset = 0;
            zero_point_index++;
            zero_point_word = ${Zt.getByOffset("zero_point_index")};
          }`:"";return J?`
        var<workgroup> workgroup_shared: array<${Le.type.value}, ${d*i}>;
        ${nr.declareVariables(...Lt,Le)}
        ${nr.mainStart([i,1,1])}
          var a_indices: ${Wr.type.indices};
          var block = local_id.x;
          var col = workgroup_id.y;
          var batch = workgroup_id.z;
          ${Wr.indicesSet("a_indices","0","batch")};
          // Two zero points are packed into one byte when uniforms.bits is 4.
          for (var c: u32 = 0; c < ${oe}; c++) {
            let col_times_components_plus_c = col * ${oe} + c;
              ${Zt?`
            var zero_point_bytes_per_col: u32 = (${i} + 1) / 2;
            var zero_point_byte_count: u32 = col_times_components_plus_c * zero_point_bytes_per_col + (block >> 0x1u);
            var zero_point_word_index: u32 = zero_point_byte_count >> 0x2u;
            var zero_point_byte_offset: u32 = zero_point_byte_count & 0x3u;
            var zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32 = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            var zero_point_word: u32 = ${Zt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;`:""}
            var b_indices: ${dr.type.indices};
            ${dr.indicesSet("b_indices","0","col_times_components_plus_c")};
            // The scale and zero points are computed per block.
            var scales_index = col_times_components_plus_c * ${i} + block;
            let scale = ${Nr.getByOffset("scales_index")};
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${rr}(${Zt?"(zero_point_word) & 0xFu":8});
            ${dr.indicesSet("b_indices","1","block")};
            var word_offset: u32 = block * ${t.blockSize/I};
            var workgroup_shared_offset: u32 = block * ${d};
            ${Xr}
          }
          workgroupBarrier();
          var output_indices: ${Le.type.indices};
          var elements_per_thread: u32 = ${Math.ceil(d/i)};
          ${Le.indicesSet("output_indices","0","batch")};
          ${Le.indicesSet("output_indices",fr-1,"col")};
          ${Le.indicesSet("output_indices",fr-2,"local_id.x * elements_per_thread")};
          var output_offset = ${Le.indicesToOffset("output_indices")};
          for (var m: u32 = 0u; m < elements_per_thread; m++) {
            var row = m + local_id.x * elements_per_thread;
            if (row < ${d}) {
              var output_value: ${Le.type.value} = ${Le.type.value}(0);
              var workgroup_shared_offset: u32 = row;
              for (var b: u32 = 0u; b < ${i}u; b++) {
                output_value += workgroup_shared[workgroup_shared_offset];
                workgroup_shared_offset += ${d};
              }
              ${Le.setByOffset("output_offset","output_value")};
              output_offset += ${h/oe};
            }
          }
        }`:`
        ${nr.registerUniforms(jt).declareVariables(...Lt,Le)}
        ${nr.mainStart()}
          ${nr.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var output_values: array<${Le.type.value}, ${C}>;
          var output_indices = ${Le.offsetToIndices("global_idx")};
          var col = ${Le.indicesGet("output_indices",fr-1)};
          var row = ${Le.indicesGet("output_indices",fr-2)};
          var a_indices: ${Wr.type.indices} = output_indices;
          // Two zero points are packed into one byte because uniforms.bits <= 4.
          // zero_point_offset is either 0 or 4. It is bit offset within one byte.
          // TODO support zero_point_offset for bits > 4
          ${Zt?`
          var zero_point_abs_offset = col * ${oe} * ((${i} + 1) / 2);
          var zero_point_index: u32 = zero_point_abs_offset / 4;
          var zero_point_word: u32 = ${Zt.getByOffset("zero_point_index")};
          var zero_point_offset: u32 = (zero_point_abs_offset % 4) * 8;`:""}
          var scale_index = col * ${i*oe};
          var b_indices: ${dr.type.indices};
          for (var c: u32 = 0; c < ${oe}; c++) {
            ${dr.indicesSet("b_indices","0",`col * ${oe} + c`)};
            var block_offset: u32 = 0;
            for (var block: u32 = 0; block < ${i}; block++) {
              // The scale and zero points are computed per block.
              let scale = ${Nr.getByOffset("scale_index")};
              // The default zero point is 8 for unsigned 4-bit quantization.
              let zero_point = ${rr}(${Zt?"extractBits(zero_point_word, zero_point_offset, 4)":8});
              ${dr.indicesSet("b_indices","1","block")};
              var word_offset: u32 = block_offset;
              ${Xr}
              scale_index++;
              ${sn}
              block_offset += uniforms.block_size / ${I};
            }
            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.
            ${Zt?`if (zero_point_offset % 8 > 0) {
                ${sn}
              }`:""}
            }
            for (var k: u32 = 0u; k < ${C}u; k++) {
              ${Le.indicesSet("output_indices",fr-2,`${C} * row + k`)};
              ${Le.setByIndices("output_indices","output_values[k]")}
            }
        }`};return{name:J?"BlockwiseMatMulNBits":"MatMulNBits",shaderCache:{hint:`${t.cacheKey};${d};${k};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:tt,dataType:k}],name:J?"BlockwiseMatMulNBits":"MatMulNBits",dispatchGroup:J?{x:1,y:Math.ceil(h/oe),z:y}:{x:Math.ceil(Ge/64)},programUniforms:dt}),getShaderSource:_r}},rn=(e,t)=>{Qr(e.inputs,t);let r=e.getMaxComputeWorkgroupSizes(),n=e.getMaxComputeWorkgroupStoragesize();e.compute(Zr(e.inputs,t,r,n))},Jn=e=>Gt(e)}),Su,ku,m,g,T,K,Fe,Pe,pt,Pt=B(()=>{Qt(),Yt(),or(),Su=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},ku=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
            k = i32(${e.indicesGet("indices",s)}) - ${Ot("uniforms.pads",s,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${Ot("uniforms.x_shape",s,t)})) {
              break;
            }
            offset += k * i32(${Ot("uniforms.x_strides",s,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},m=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Ot("uniforms.pads",s,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${Ot("uniforms.x_shape",s,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${Ot("uniforms.x_shape",s,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${Ot("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},g=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Ot("uniforms.pads",s,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${Ot("uniforms.x_shape",s,t)})) {
                  k = i32(${Ot("uniforms.x_shape",s,t)}) - 1;
                }
                offset += k * i32(${Ot("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},T=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Ot("uniforms.pads",s,r)};
                if (k < 0)  {
                  k += i32(${Ot("uniforms.x_shape",s,t)}]);
                }
                if (k >= i32(${Ot("uniforms.x_shape",s,t)})) {
                  k -= i32(${Ot("uniforms.x_shape",s,t)});
                }
                offset += k * i32(${Ot("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},K=(e,t,r)=>{switch(r.mode){case 0:return ku(e,t,r.pads.length);case 1:return m(e,t,r.pads.length);case 2:return g(e,t,r.pads.length);case 3:return T(e,t,r.pads.length);default:throw new Error("Invalid mode")}},Fe=(e,t)=>{let r=He.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,s=He.size(r),a=[{type:12,data:s},{type:6,data:t.pads}];t.mode===0&&a.push({type:e[0].dataType,data:t.value}),a.push(...St(e[0].dims,r));let i=["rank"],d=c=>{let h=Ut("output",e[0].dataType,r.length),w=it("x",e[0].dataType,n.length),y=w.type.value,u=K(h,n.length,t),k=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&k.push({name:"constant_value",type:y}),`
            ${c.registerUniforms(k).declareVariables(w,h)}
            ${c.mainStart()}
            ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${h.offsetToIndices("global_idx")};

            var value = ${y}(0);
            ${u}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:i},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(He.size(r)/64)},programUniforms:a}),getShaderSource:d}},Pe=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,s=e[0].dims.length,a=new Int32Array(2*s).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let c=0;c<d.length;c++)a[Number(d[c])]=Number(r[c]),a[Number(d[c])+s]=Number(r[c+d.length])}else r.forEach((d,c)=>a[Number(c)]=Number(d));let i=[];return a.forEach(d=>i.push(d)),{mode:t.mode,value:n,pads:i}}else return t},pt=(e,t)=>{Su(e.inputs);let r=Pe(e.inputs,t);e.compute(Fe(e.inputs,r),{inputs:[0]})}}),It,ir,hr,$r,tr,lr,vr,xr,yr,Dr,wn,on,Bn,ln,qr,nn,Sa,oi,ka,fc=B(()=>{E(),Qt(),Yt(),or(),It=e=>{if(A.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},ir=(e,t,r)=>{let n=t.format==="NHWC",s=e.dims.slice();n&&s.splice(1,0,s.pop());let a=Object.hasOwnProperty.call(t,"dilations"),i=t.kernelShape.slice(),d=t.strides.slice(),c=a?t.dilations.slice():[],h=t.pads.slice();gn.adjustPoolAttributes(r,s,i,d,c,h);let w=gn.computePoolOutputShape(r,s,d,c,i,h,t.autoPad),y=Object.assign({},t);a?Object.assign(y,{kernelShape:i,strides:d,pads:h,dilations:c,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:i,strides:d,pads:h,cacheKey:t.cacheKey});let u=w.slice();return u.push(u.splice(1,1)[0]),[y,n?u:w]},hr=(e,t)=>{let r=t.format==="NHWC",n=He.size(e),s=He.size(t.kernelShape),a=[{type:12,data:n},{type:12,data:s}],i=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],c=t.strides[t.strides.length-1],h=t.pads[t.pads.length/2-1],w=t.pads[t.pads.length-1],y=!!(h+w);a.push({type:12,data:d},{type:12,data:c},{type:12,data:h},{type:12,data:w}),i.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let u=!1;if(t.kernelShape.length===2){let k=t.kernelShape[t.kernelShape.length-2],C=t.strides[t.strides.length-2],I=t.pads[t.pads.length/2-2],U=t.pads[t.pads.length-2];u=!!(I+U),a.push({type:12,data:k},{type:12,data:C},{type:12,data:I},{type:12,data:U}),i.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[a,i,!0,y,u]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=He.computeStrides(t.kernelShape);a.push({type:12,data:d},{type:12,data:t.pads},{type:12,data:t.strides}),i.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let c=t.pads.reduce((h,w)=>h+w);return[a,i,!!c,!1,!1]}},$r=(e,t,r,n,s,a,i,d,c,h,w,y)=>{let u=s.format==="NHWC",k=t.type.value,C=Ut("output",t.type.tensor,n);if(s.kernelShape.length<=2){let I="",U="",q="",R=r-(u?2:1);if(w?I=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${R}] = indices[${R}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${R}] < 0 || xIndices[${R}]
                      >= uniforms.x_shape[${R}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${a}
                }`:I=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${R}] = indices[${R}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${a}
                }`,s.kernelShape.length===2){let ce=r-(u?3:2);y?U=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${ce}] = indices[${ce}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${ce}] < 0 || xIndices[${ce}] >= uniforms.x_shape[${ce}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:U=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${ce}] = indices[${ce}] * uniforms.sh - uniforms.phStart + j;
                `,q=`
              }
            `}return`
            ${e.registerUniforms(c).declareVariables(t,C)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${C.offsetToIndices("global_idx")};
              var xIndices = ${C.offsetToIndices("global_idx")};

              var value = ${k}(${d});
              var pad = 0;
              ${U}
              ${I}
              ${q}
              ${i}

              output[global_idx] = value;
            }`}else{if(u)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let I=s.kernelShape.length,U=s.pads.length,q="";return h?q=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${a}
              }`:q=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${a}
            `,`
            ${e.registerUniforms(c).declareVariables(t,C)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${C.offsetToIndices("global_idx")};
              var xIndices = ${C.offsetToIndices("global_idx")};

              var offsets: array<u32, ${I}>;

              var value = ${k}(${d});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${I-1}u; j++) {
                  offsets[j] = offset / ${Ot("uniforms.kernelStrides","j",I)};
                  offset -= offsets[j] * ${Ot("uniforms.kernelStrides","j",I)};
                }
                offsets[${I-1}] = offset;

                isPad = false;
                for (var j = ${r-I}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${Ot("uniforms.strides",`j - ${r-I}u`,I)}
                    + offsets[j - ${r-I}u] - ${Ot("uniforms.pads","j - 2u",U)};
                  ${q}
              }
              ${i}

              output[global_idx] = value;
            }`}},tr=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,lr=e=>`${tr(e)};${e.countIncludePad}`,vr=e=>`${tr(e)};${e.storageOrder};${e.dilations}`,xr=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),yr=(e,t,r,n)=>{let[s,a]=ir(t,n,r),i=it("x",t.dataType,t.dims.length),d=i.type.value,c="value += x_val;",h="";s.countIncludePad?h+=`value /= ${d}(uniforms.kernelSize);`:h+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[w,y,u,k,C]=hr(a,s);w.push(...St(t.dims,a));let I=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${u};${k};${C}`,inputDependencies:I},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(He.size(a)/64)},programUniforms:w}),getShaderSource:U=>$r(U,i,t.dims.length,a.length,s,c,h,0,y,u,k,C)}},Dr=e=>{let t=e.count_include_pad!==0,r=xr(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...r,cacheKey:""};return{...n,cacheKey:lr(n)}},wn=(e,t)=>{It(e.inputs),e.compute(yr("AveragePool",e.inputs[0],!1,t))},on={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Bn=e=>{let t=e.format;return{format:t,...on,cacheKey:t}},ln=(e,t)=>{It(e.inputs),e.compute(yr("GlobalAveragePool",e.inputs[0],!0,t))},qr=(e,t,r,n)=>{let[s,a]=ir(t,n,r),i=`
      value = max(x_val, value);
    `,d="",c=it("x",t.dataType,t.dims.length),h=["rank"],[w,y,u,k,C]=hr(a,s);return w.push(...St(t.dims,a)),{name:e,shaderCache:{hint:`${n.cacheKey};${u};${k};${C}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(He.size(a)/64)},programUniforms:w}),getShaderSource:I=>$r(I,c,t.dims.length,a.length,s,i,d,t.dataType===10?-65504:-1e5,y,u,k,C)}},nn=(e,t)=>{It(e.inputs),e.compute(qr("MaxPool",e.inputs[0],!1,t))},Sa=e=>{let t=e.storage_order,r=e.dilations,n=xr(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let s={storageOrder:t,dilations:r,...n,cacheKey:""};return{...s,cacheKey:vr(s)}},oi=e=>{let t=e.format;return{format:t,...on,cacheKey:t}},ka=(e,t)=>{It(e.inputs),e.compute(qr("GlobalMaxPool",e.inputs[0],!0,t))}}),kn,fs,ud,Id=B(()=>{E(),Qt(),or(),kn=(e,t,r)=>{let n=e===t,s=e<t&&r<0,a=e>t&&r>0;if(n||s||a)throw new Error("Range these inputs' contents are invalid.")},fs=(e,t,r,n)=>{let s=Math.abs(Math.ceil((t-e)/r)),a=[s],i=s,d=[{type:12,data:i},{type:n,data:e},{type:n,data:r},...St(a)],c=h=>{let w=Ut("output",n,a.length),y=w.type.value,u=[{name:"outputSize",type:"u32"},{name:"start",type:y},{name:"delta",type:y}];return`
        ${h.registerUniforms(u).declareVariables(w)}
        ${h.mainStart()}
        ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${y}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:c,getRunData:()=>({outputs:[{dims:a,dataType:n}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:d})}},ud=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),A.webgpu.validateInputContent&&kn(t,r,n),e.compute(fs(t,r,n,e.inputs[0].dataType),{inputs:[]})}}),dd,Pu,mc,_c,gc,wc,yc,bc,Mc,vc,xc,Fd,Tc,Cc,Ec,$c,Sc,kc,Pc,ef=B(()=>{Qt(),Yt(),pr(),or(),dd=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Pu=(e,t,r)=>{t.every(s=>s>=0&&s<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return t.forEach((s,a)=>n[s]=e[a]),n},mc=(e,t,r,n,s,a)=>{let[i,d,c]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],h=e[0].dims.length;if(i>0&&e.length>i&&e[i].dims.length>0)e[i].getFloat32Array().forEach(w=>a.push(w));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(w=>n.push(w)),n.length!==0&&n.length!==h&&r>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");dd(n,t),t.axes.length>0&&Pu(n,t.axes,h).forEach((w,y)=>n[y]=w)}if(c>0&&e.length>c&&(e[c].getBigInt64Array().forEach(w=>s.push(Number(w))),s.length!==h||r>=18&&s.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(s.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof s<"u"&&n.length>0&&s.length>h)throw new Error("Resize requires only of scales or sizes to be specified")},_c=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",gc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",wc=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),s=e.length===0?n:e.slice();return t.length>0?(t.forEach((a,i)=>{n[a]=s[i],n[i+r]=s[t.length+i]}),n):s},yc=(e,t,r,n)=>{let s=[];if(r.length>0)if(n.length>0){if(e.forEach(a=>s.push(a)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((a,i)=>s[a]=r[i])}else r.forEach(a=>s.push(a));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");s=e.map((a,i)=>Math.round(a*t[i]))}return s},bc=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(a=>t[a]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(a=>t[a]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let s=e.slice();return r.axes.length>0?(r.axes.forEach(a=>t[a]=n),r.axes.forEach(a=>s[a]=Math.round(e[a]*t[a]))):(t.fill(n,0,t.length),s.forEach((a,i)=>s[i]=Math.round(a*t[i]))),s},Mc=(e,t,r,n,s)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${Ot("uniforms.scales","i",n)};
        var roi_low = ${Ot("uniforms.roi","i",s)};
        var roi_hi = ${Ot("uniforms.roi",`i + ${t.length}`,s)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${Ot("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${Ot("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,vc=(e,t,r,n,s,a,i)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${Ot("uniforms.scales","i",s)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${Ot("uniforms.roi","i",a)};
          var roi_hi = ${Ot("uniforms.roi",`i + ${r.length}`,a)};
          var input_shape_i = ${Ot("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${Ot("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${i} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,xc=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${Ot("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Fd=(e,t,r,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",Tc=(e,t,r,n,s)=>{let[a,i,d,c]=r.length===2?[-1,0,1,-1]:[0,2,3,1],h=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",i,`max(0, min(row, ${r[i]} - 1))`)};
      ${e.indicesSet("input_indices",d,`max(0, min(col, ${r[d]} - 1))`)};
      ${Fd(e,c,a,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${h} = originalIndices[${i}];
      var col:${h} = originalIndices[${d}];
      ${n?`if (row < 0 || row > (${r[i]} - 1) || col < 0 || col > (${r[d]} - 1)) {
        return ${s};
      }`:""};
      row = max(0, min(row, ${r[i]} - 1));
      col = max(0, min(col, ${r[d]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${c}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${a}])`:"0"};
      var x11: ${h} = getInputValue(batch, channel, row1, col1);
      var x12: ${h} = getInputValue(batch, channel, row1, col2);
      var x21: ${h} = getInputValue(batch, channel, row2, col1);
      var x22: ${h} = getInputValue(batch, channel, row2, col2);
      var dx1: ${h} = abs(row - ${h}(row1));
      var dx2: ${h} = abs(${h}(row2) - row);
      var dy1: ${h} = abs(col - ${h}(col1));
      var dy2: ${h} = abs(${h}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Cc=(e,t,r,n,s,a,i,d,c,h)=>{let w=r.length===2,[y,u]=w?[0,1]:[2,3],k=e.type.value,C=I=>{let U=I===y?"row":"col";return`
      fn ${U}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${k} {
        var output_index = ${t.indicesGet("output_indices",I)};
        var originalIdx: ${k} = getOriginalCoordinateFromResizedCoordinate(output_index, ${s[I]},
        ${n[I]}, ${r[I]}, ${a[I]}, ${a[I]} + ${r.length});
        var fractOriginalIdx: ${k} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${d} && (originalIdx < 0 || originalIdx > (${r[I]} - 1))) {
          return ${c};
        }
        var data: array<${k}, 4> = array<${k}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${U}: ${k} = originalIdx + ${k}(i);
          if (${U} < 0 || ${U} >= ${r[I]}) {
            ${(()=>h?`coefs[i + 1] = 0.0;
                        continue;`:d?`return ${c};`:`${U} = max(0, min(${U}, ${r[I]} - 1));`)()};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",I,`u32(${U})`)};
          data[i + 1] = ${I===y?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${C(y)};
    ${C(u)};
  fn getCubicInterpolationCoefs(s: ${k}) -> array<${k}, 4> {
    var absS = abs(s);
    var coeffs: array<${k}, 4> = array<${k}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${k} = 1.0 - absS;
    var twoMinusAbsS: ${k} = 2.0 - absS;
    var onePlusAbsS: ${k} = 1.0 + absS;
    coeffs[0] = ((${i} * onePlusAbsS - 5 * ${i}) * onePlusAbsS + 8 * ${i}) * onePlusAbsS - 4 * ${i};
    coeffs[1] = ((${i} + 2) * absS - (${i} + 3)) * absS * absS + 1;
    coeffs[2] = ((${i} + 2) * oneMinusAbsS - (${i} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${i} * twoMinusAbsS - 5 * ${i}) * twoMinusAbsS + 8 * ${i}) * twoMinusAbsS - 4 * ${i};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${k}, 4>, coefs: array<${k}, 4>) -> ${k} {
    var coefsSum: ${k} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${k} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Ec=(e,t,r,n,s)=>{let[a,i,d,c,h]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],w=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${w} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",i,`max(0, min(depth, ${r[i]} - 1))`)};
      ${e.indicesSet("input_indices",d,`max(0, min(height, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",c,`max(0, min(width, ${r[c]} - 1))`)};
      ${Fd(e,h,a,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${w} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${w} = originalIndices[${i}];
      var height:${w} = originalIndices[${d}];
      var width:${w} = originalIndices[${c}];
      ${n?`if (depth < 0 || depth > (${r[i]} - 1) || height < 0 || height > (${r[d]} - 1) || width < 0 || (width > ${r[c]} - 1)) {
      return ${s};
        }`:""};

    depth = max(0, min(depth, ${r[i]} - 1));
      height = max(0, min(height, ${r[d]} - 1));
      width = max(0, min(width, ${r[c]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${h}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${a}])`:"0"};

      var x111: ${w} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${w} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${w} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${w} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${w} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${w} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${w} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${w} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${w} = abs(depth - ${w}(depth1));
      var dx2: ${w} = abs(${w}(depth2) - depth);
      var dy1: ${w} = abs(height - ${w}(height1));
      var dy2: ${w} = abs(${w}(height2) - height);
      var dz1: ${w} = abs(width - ${w}(width1));
      var dz2: ${w} = abs(${w}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},$c=(e,t,r,n,s,a)=>{let i=e.dims,d=wc(a,t.axes,i.length),c=yc(i,n,s,t.axes),h=n.slice();n.length===0&&(h=i.map((R,ce)=>R===0?1:c[ce]/R),t.keepAspectRatioPolicy!=="stretch"&&(c=bc(i,h,t)));let w=Ut("output",e.dataType,c.length),y=it("input",e.dataType,i.length),u=He.size(c),k=i.length===c.length&&i.every((R,ce)=>R===c[ce]),C=t.coordinateTransformMode==="tf_crop_and_resize",I=t.extrapolationValue,U=y.type.value,q=R=>`
      ${k?"":`
      ${_c(t.coordinateTransformMode,U)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${xc(y,i)};
              ${gc(t.nearestMode,r,U)};
              ${vc(y,w,i,c,h.length,d.length,C)};
              `;case"linear":return`
              ${Mc(w,i,c,h.length,d.length)};
              ${(()=>{if(i.length===2||i.length===4)return`${Tc(y,w,i,C,I)}`;if(i.length===3||i.length===5)return`${Ec(y,w,i,C,I)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(i.length===2||i.length===4)return`${Cc(y,w,i,c,h,d,t.cubicCoeffA,C,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${R.registerUniform("output_size","u32").registerUniform("scales","f32",h.length).registerUniform("roi","f32",d.length).declareVariables(y,w)}
      ${R.mainStart()}
        ${R.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${k?"output[global_idx] = input[global_idx];":`
        let output_indices = ${w.offsetToIndices("global_idx")};
        var input_indices: ${y.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${y.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${i.length===2||i.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${h.length>0?h:""}|${s.length>0?s:""}|${d.length>0?d:""}|${k}|${i}`,inputDependencies:["rank"]},getShaderSource:q,getRunData:()=>({outputs:[{dims:c,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:[{type:12,data:u},{type:1,data:h},{type:1,data:d},...St(i,c)]})}},Sc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},kc=(e,t)=>{let r=[],n=[],s=[],a=Sc(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");mc(e.inputs,t,a,r,n,s),e.compute($c(e.inputs[0],t,a,r,n,s),{inputs:[0]})},Pc=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,s=e.cubicCoeffA,a=e.excludeOutside!==0,i=e.extrapolationValue,d=e.keepAspectRatioPolicy,c=e.mode,h=e.nearestMode===""?"simple":e.nearestMode;return Gt({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:s,excludeOutside:a,extrapolationValue:i,keepAspectRatioPolicy:d,mode:c,nearestMode:h})}}),Ac,Ic,Fc,tf=B(()=>{Qt(),Yt(),pr(),or(),Ac=(e,t)=>{let[r,n,s,a]=e,{numHeads:i,rotaryEmbeddingDim:d}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!He.areEqual(n.dims,[])&&!He.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(s.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(a.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${a.dims.length}`);if(!He.areEqual(s.dims,a.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(d>0&&i===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let c=r.dims[0],h=r.dims[r.dims.length-2],w=s.dims[0],y=He.sizeFromDimension(r.dims,1)/h,u=d===0?s.dims[1]*2:y/i;if(d>u)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(n.dims.length===2){if(c!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(h!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(u/2!==s.dims[1]&&d/2!==s.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${s.dims[1]}`);if(h>w)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Ic=(e,t)=>{let{interleaved:r,numHeads:n,rotaryEmbeddingDim:s,scale:a}=t,i=e[0].dims[0],d=He.sizeFromDimension(e[0].dims,1),c=e[0].dims[e[0].dims.length-2],h=d/c,w=e[2].dims[1],y=s===0?w*2:h/n,u=new Array(i,c,h/y,y-w),k=He.computeStrides(u),C=[{type:1,data:a},{type:12,data:u},{type:12,data:k},...e[0].dims.length===3?new Array({type:12,data:[d,h,y,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[d,y,c*y,1]}):[],...St(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],I=U=>{let q=it("input",e[0].dataType,e[0].dims.length),R=it("position_ids",e[1].dataType,e[1].dims.length),ce=it("cos_cache",e[2].dataType,e[2].dims.length),J=it("sin_cache",e[3].dataType,e[3].dims.length),oe=Ut("output",e[0].dataType,e[0].dims.length);return U.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:u.length},{name:"global_strides",type:"u32",length:k.length},{name:"input_output_strides",type:"u32",length:k.length}]),`
        ${U.declareVariables(q,R,ce,J,oe)}

        ${U.mainStart(mn)}
          let half_rotary_emb_dim = uniforms.${ce.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${U.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${R.broadcastedIndicesToOffset("bsnh.xy",Ut("",R.type.tensor,2))};
            let position_id =
                u32(${R.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});
            let j = i + select(half_rotary_emb_dim, 1, ${r});
            let re = ${q.getByOffset("i")} * ${ce.get("position_id","bsnh[3]")} -
                ${q.getByOffset("j")} * ${J.get("position_id","bsnh[3]")};
            ${oe.setByOffset("i","re")}
            let im = ${q.getByOffset("i")} * ${J.get("position_id","bsnh[3]")} +
                ${q.getByOffset("j")} * ${ce.get("position_id","bsnh[3]")};
            ${oe.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${oe.setByOffset("k",q.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Gt({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:I,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(He.size(u)/mn)},programUniforms:C})}},Fc=(e,t)=>{Ac(e.inputs,t),e.compute(Ic(e.inputs,t))}}),Oc,zc,Dc,rf=B(()=>{Qt(),Yt(),or(),Oc=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let s=t.dims[t.dims.length-1],a=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==s)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==a)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==s)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let i=e[3];if(i.dims.length!==1)throw new Error("Beta must be 1D");if(i.dims[i.dims.length-1]!==s)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let i=e[4];if(i.dims.length!==1)throw new Error("Bias must be 1D");if(i.dims[i.dims.length-1]!==s)throw new Error("Bias must have the same hidden size as input")}},zc=(e,t,r,n)=>{let s=t.simplified,a=e[0].dims,i=He.size(a),d=a,c=i,h=a.slice(-1)[0],w=n?a.slice(0,-1).concat(1):[],y=!s&&e.length>3,u=e.length>4,k=n&&r>1,C=n&&r>2,I=r>3,U=64,q=mr(h),R=[{type:12,data:c},{type:12,data:q},{type:12,data:h},{type:1,data:t.epsilon}],ce=oe=>{let tt=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],Ge=[it("x",e[0].dataType,e[0].dims,q),it("skip",e[1].dataType,e[1].dims,q),it("gamma",e[2].dataType,e[2].dims,q)];y&&Ge.push(it("beta",e[3].dataType,e[3].dims,q)),u&&Ge.push(it("bias",e[4].dataType,e[4].dims,q)),Ge.push(Ut("output",e[0].dataType,d,q)),k&&Ge.push(Ut("mean_output",1,w)),C&&Ge.push(Ut("inv_std_output",1,w)),I&&Ge.push(Ut("input_skip_bias_sum",e[0].dataType,d,q));let dt=br(e[0].dataType),zt=br(1,q);return`

      ${oe.registerUniforms(tt).declareVariables(...Ge)}
      var<workgroup> sum_shared : array<${zt}, ${U}>;
      var<workgroup> sum_squared_shared : array<${zt}, ${U}>;

      ${oe.mainStart([U,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${U};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${U};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${U-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${u?"bias[offset1d + i]":dt+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${I?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${Vr(dt,q,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${U};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${_n("sum",q)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${_n("square_sum",q)} / f32(uniforms.hidden_size) ${s?"":"- mean * mean"} + uniforms.epsilon);
        ${k?"mean_output[global_idx] = mean;":""}
        ${C?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${s?"":`- ${dt}(mean)`}) *
            ${dt}(inv_std_dev) * gamma[offset1d + i]
            ${y?"+ beta[offset1d + i]":""};
        }
      }`},J=[{dims:d,dataType:e[0].dataType}];return r>1&&J.push({dims:w,dataType:1}),r>2&&J.push({dims:w,dataType:1}),r>3&&J.push({dims:a,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${q};${k};${C};${I}`,inputDependencies:e.map((oe,tt)=>"type")},getShaderSource:ce,getRunData:()=>({outputs:J,dispatchGroup:{x:Math.ceil(c/h)},programUniforms:R})}},Dc=(e,t)=>{Oc(e.inputs);let r=[0];e.outputCount>1&&r.push(-3),e.outputCount>2&&r.push(-3),e.outputCount>3&&r.push(3),e.compute(zc(e.inputs,t,e.outputCount,!1),{outputs:r})}}),Bc,Au,Lc,Od,Rc,Nc,jc,Vc,nf=B(()=>{Qt(),Yt(),pr(),or(),Bc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},Au=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Lc=(e,t)=>{if(e.length>1){let r=Au(e,1),n=Au(e,2),s=Au(e,3);return s.length===0&&(s=[...Array(e[0].dims.length).keys()]),Gt({starts:r,ends:n,axes:s})}else return t},Od=(e,t,r,n,s)=>{let a=e;return e<0&&(a+=r[n[t]]),s[t]<0?Math.max(0,Math.min(a,r[n[t]]-1)):Math.max(0,Math.min(a,r[n[t]]))},Rc=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${Ot("uniforms.input_shape","i",r.length)};
            let steps_i = ${Ot("uniforms.steps","i",r.length)};
            let signs_i = ${Ot("uniforms.signs","i",r.length)};
            let starts_i = ${Ot("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Nc=(e,t)=>{let r=e[0].dims,n=He.size(r),s=t.axes.length>0?He.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],a=Au(e,4);a.forEach(q=>q!==0||(()=>{throw new Error("step cannot be 0")})),a.length===0&&(a=Array(s.length).fill(1));let i=t.starts.map((q,R)=>Od(q,R,r,s,a)),d=t.ends.map((q,R)=>Od(q,R,r,s,a));if(s.length!==i.length||s.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(s.length!==r.length)for(let q=0;q<r.length;++q)s.includes(q)||(i.splice(q,0,0),d.splice(q,0,r[q]),a.splice(q,0,1));let c=a.map(q=>Math.sign(q));a.forEach((q,R,ce)=>{if(q<0){let J=(d[R]-i[R])/q,oe=i[R],tt=oe+J*a[R];i[R]=tt,d[R]=oe,ce[R]=-q}});let h=r.slice(0);s.forEach((q,R)=>{h[q]=Math.ceil((d[q]-i[q])/a[q])});let w={dims:h,dataType:e[0].dataType},y=Ut("output",e[0].dataType,h.length),u=it("input",e[0].dataType,e[0].dims.length),k=He.size(h),C=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:i.length},{name:"signs",type:"i32",length:c.length},{name:"steps",type:"u32",length:a.length}],I=[{type:12,data:k},{type:12,data:i},{type:6,data:c},{type:12,data:a},...St(e[0].dims,h)],U=q=>`
      ${q.registerUniforms(C).declareVariables(u,y)}
        ${Rc(u,y,r)}
        ${q.mainStart()}
          ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${y.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${y.setByOffset("global_idx",u.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${c.length}_${i.length}_${a.length}`,inputDependencies:["rank"]},getShaderSource:U,getRunData:()=>({outputs:[w],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:I})}},jc=(e,t)=>{Bc(e.inputs,t);let r=Lc(e.inputs,t);e.compute(Nc(e.inputs,r),{inputs:[0]})},Vc=e=>{let t=e.starts,r=e.ends,n=e.axes;return Gt({starts:t,ends:r,axes:n})}}),Uc,Wc,Gc,qc,sf=B(()=>{Qt(),Yt(),pr(),or(),Uc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Wc=(e,t)=>{let r=e.dims,n=He.size(r),s=64,a=t.axis;if(a<0&&(a=r.length+a),a<r.length-1)throw new Error("softmax only supports last axis for now.");let i=r[a],d=n/i,c=mr(i),h=i/c,w=(U,q)=>q===4?`max(max(${U}.x, ${U}.y), max(${U}.z, ${U}.w))`:q===2?`max(${U}.x, ${U}.y)`:q===3?`max(max(${U}.x, ${U}.y), ${U}.z)`:U,y=it("x",e.dataType,e.dims,c),u=Ut("result",e.dataType,e.dims,c),k=y.type.value,C=br(e.dataType)==="f32"?`var threadMax = ${k}(-3.402823e+38f);`:`var threadMax = ${k}(-65504.0h);`,I=U=>`
      var<workgroup> rowMaxShared : ${k};
      var<workgroup> rowSumShared : ${k};
      var<workgroup> threadShared : array<${k}, ${s}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${k} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${k}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${U.registerUniform("packedCols","i32").declareVariables(y,u)}
      ${U.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${s};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${C}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${k}(${w("threadShared[0]",c)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${k}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${k}(${_n("threadShared[0]",c)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${c}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:6,data:h}]}),getShaderSource:I}},Gc=(e,t)=>{Uc(e.inputs),e.compute(Wc(e.inputs[0],t))},qc=e=>Gt({axis:e.axis})}),Hc,Kc,Xc,Qc,Yc,Zc,Jc,af=B(()=>{Qt(),Yt(),pr(),or(),Hc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Kc=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(s=>r.push(Number(s))),n=r.length),Gt({numOutputs:n,axis:t.axis,splitSizes:r})},Xc=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${Ot("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Qc=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let s=e[n].setByIndices("indices","input[global_idx]");t===1?r.push(s):n===0?r.push(`if (output_number == ${n}u) { ${s} }`):n===t-1?r.push(`else { ${s} }`):r.push(`else if (output_number == ${n}) { ${s} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Yc=(e,t)=>{let r=e[0].dims,n=He.size(r),s=e[0].dataType,a=He.normalizeAxis(t.axis,r.length),i=new Array(t.numOutputs),d=it("input",s,r.length),c=new Array(t.numOutputs),h=[],w=[],y=0,u=[{type:12,data:n}];for(let C=0;C<t.numOutputs;C++){y+=t.splitSizes[C],c[C]=y;let I=r.slice();I[t.axis]=t.splitSizes[C],w.push(I),i[C]=Ut(`output${C}`,s,I.length),h.push({dims:w[C],dataType:e[0].dataType})}u.push({type:12,data:c},...St(r,...w));let k=C=>`
  ${C.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",c.length).declareVariables(d,...i)}
  ${Xc(c.length)}
  ${Qc(i)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${d.offsetToIndices("global_idx")};
    var index = ${d.indicesGet("indices",a)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${Ot("uniforms.size_in_split_axis","output_number - 1u",c.length)};
      ${d.indicesSet("indices",a,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:k,getRunData:()=>({outputs:h,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:u})}},Zc=(e,t)=>{Hc(e.inputs);let r=e.inputs.length===1?t:Kc(e.inputs,t);e.compute(Yc(e.inputs,r),{inputs:[0]})},Jc=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Gt({axis:t,numOutputs:n,splitSizes:r})}}),ep,tp,rp,of=B(()=>{Qt(),Yt(),or(),ep=(e,t,r,n,s)=>{let a=Ut("output_data",s,r.length,4),i=it("a_data",t[1].dataType,t[1].dims.length,4),d=it("b_data",t[2].dataType,t[2].dims.length,4),c=it("c_data",t[0].dataType,t[0].dims.length,4),h,w=(y,u,k)=>`select(${u}, ${y}, ${k})`;if(!n)h=a.setByOffset("global_idx",w(i.getByOffset("global_idx"),d.getByOffset("global_idx"),c.getByOffset("global_idx")));else{let y=(u,k,C="")=>{let I=`a_data[index_a${k}][component_a${k}]`,U=`b_data[index_b${k}][component_b${k}]`,q=`bool(c_data[index_c${k}] & (0xffu << (component_c${k} * 8)))`;return`
            let output_indices${k} = ${a.offsetToIndices(`global_idx * 4u + ${k}u`)};
            let offset_a${k} = ${i.broadcastedIndicesToOffset(`output_indices${k}`,a)};
            let offset_b${k} = ${d.broadcastedIndicesToOffset(`output_indices${k}`,a)};
            let offset_c${k} = ${c.broadcastedIndicesToOffset(`output_indices${k}`,a)};
            let index_a${k} = offset_a${k} / 4u;
            let index_b${k} = offset_b${k} / 4u;
            let index_c${k} = offset_c${k} / 4u;
            let component_a${k} = offset_a${k} % 4u;
            let component_b${k} = offset_b${k} % 4u;
            let component_c${k} = offset_c${k} % 4u;
            ${u}[${k}] = ${C}(${w(I,U,q)});
          `};s===9?h=`
            var data = vec4<u32>(0);
            ${y("data",0,"u32")}
            ${y("data",1,"u32")}
            ${y("data",2,"u32")}
            ${y("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:h=`
            ${y("output_data[global_idx]",0)}
            ${y("output_data[global_idx]",1)}
            ${y("output_data[global_idx]",2)}
            ${y("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(c,i,d,a)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${h}
      }`},tp=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,s=e[1].dataType,a=!(He.areEqual(t,r)&&He.areEqual(r,n)),i=t,d=He.size(t);if(a){let h=Yr.calcShape(Yr.calcShape(t,r,!1),n,!1);if(!h)throw new Error("Can't perform where op on the given tensors");i=h,d=He.size(i)}let c=Math.ceil(d/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:h=>ep(h,e,i,a,s),getRunData:()=>({outputs:[{dims:i,dataType:s}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:12,data:c},...St(n,t,r,i)]})}},rp=e=>{e.compute(tp(e.inputs))}}),np,lf=B(()=>{Ru(),Di(),Nu(),ju(),Vu(),Uu(),Yn(),Al(),Nl(),jl(),ql(),Ju(),ed(),Pd(),rd(),nd(),sd(),id(),ad(),ld(),$l(),Ad(),fu(),Pt(),fc(),Id(),Gs(),ef(),tf(),rf(),nf(),sf(),af(),wu(),ds(),Xi(),of(),np=new Map([["Abs",[Co]],["Acos",[Ni]],["Acosh",[Eo]],["Add",[nl]],["ArgMax",[Ai,Ii]],["ArgMin",[_o,Ii]],["Asin",[$o]],["Asinh",[ji]],["Atan",[So]],["Atanh",[ko]],["Attention",[zi]],["AveragePool",[wn,Dr]],["BatchNormalization",[vo]],["BiasAdd",[To]],["BiasSplitGelu",[Qi]],["Cast",[Po,Vi]],["Ceil",[Io]],["Clip",[qs]],["Concat",[hl,fl]],["Conv",[da,ri]],["ConvTranspose",[Rl,ha]],["Cos",[Fo]],["Cosh",[Oo]],["CumSum",[Qu,ma]],["DepthToSpace",[Wl,Gl]],["Div",[Zi]],["Einsum",[ga,Ql]],["Elu",[zo,cs]],["Equal",[sl]],["Erf",[Do]],["Exp",[Bo]],["Expand",[Zl]],["FastGelu",[td]],["Floor",[Lo]],["FusedConv",[da,ri]],["Gather",[ru,tu]],["GatherElements",[au,iu]],["Gelu",[Ui]],["Gemm",[du,uu]],["GlobalAveragePool",[ln,Bn]],["GlobalMaxPool",[ka,oi]],["Greater",[ol]],["GreaterOrEqual",[ul]],["GroupQueryAttention",[vu,bu]],["HardSigmoid",[Wo,Gi]],["InstanceNormalization",[Eu]],["LayerNormalization",[ur]],["LeakyRelu",[Ro,cs]],["Less",[ll]],["LessOrEqual",[dl]],["Log",[Yo]],["MatMul",[El]],["MatMulNBits",[rn,Jn]],["MaxPool",[nn,Sa]],["Mul",[il]],["MultiHeadAttention",[hu,cu]],["Neg",[jo]],["Not",[No]],["Pad",[pt]],["Pow",[Ji]],["QuickGelu",[Jo,cs]],["Range",[ud]],["Reciprocal",[Wi]],["ReduceMin",[po]],["ReduceMean",[lo]],["ReduceMax",[Si]],["ReduceSum",[ki]],["ReduceProd",[ho]],["ReduceL1",[$i]],["ReduceL2",[uo]],["ReduceLogSum",[mo]],["ReduceLogSumExp",[co]],["ReduceSumSquare",[fo]],["Relu",[Vo]],["Resize",[kc,Pc]],["RotaryEmbedding",[Fc]],["Sigmoid",[Uo]],["Sin",[Go]],["Sinh",[qi]],["Slice",[jc,Vc]],["SkipLayerNormalization",[Dc]],["Split",[Zc,Jc]],["Sqrt",[qo]],["Softmax",[Gc,qc]],["Sub",[al]],["Tan",[Ho]],["Tanh",[Ko]],["ThresholdedRelu",[Qo,cs]],["Tile",[gu]],["Transpose",[Ra,Lu]],["Where",[rp]]])}),sp,uf=B(()=>{E(),fn(),or(),sp=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,r,n,s){qe(e.programInfo.name);let a=this.backend.device,i=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let d=[];for(let h of t)d.push({binding:d.length,resource:{buffer:h.buffer}});for(let h of r)d.push({binding:d.length,resource:{buffer:h.buffer}});s&&d.push({binding:d.length,resource:s});let c=a.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:d,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let h={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:c,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(h)}i.setPipeline(e.computePipeline),i.setBindGroup(0,c),i.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Ve(e.programInfo.name)}dispose(){}build(e,t){qe(e.name);let r=this.backend.device,n=[];r.features.has("shader-f16")&&n.push("enable f16;");let s=Da(t,this.backend.device.limits),a=e.getShaderSource(s),i=`${n.join(`
`)}
${s.additionalImplementations}
${a}`,d=r.createShaderModule({code:i,label:e.name});Br("verbose",()=>`[WebGPU] ${e.name} shader code: ${i}`);let c=r.createComputePipeline({compute:{module:d,entryPoint:"main"},layout:"auto",label:e.name});return Ve(e.name),{programInfo:e,computePipeline:c,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(e){let t=typeof e=="number"?e:e.x,r=typeof e=="number"?1:e.y||1,n=typeof e=="number"?1:e.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=s&&r<=s&&n<=s)return[t,r,n];let a=t*r*n,i=Math.ceil(Math.sqrt(a));if(i>s){if(i=Math.ceil(Math.cbrt(a)),i>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[i,i,i]}else return[i,i,1]}}}),ip,ap,op,lp,df=B(()=>{E(),Qt(),fn(),_(),Er(),lf(),uf(),ip=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let s=e[n].dataType;switch(t[n]){case"none":{r.push("");break}case"type":{r.push(`${s}`);break}case"rank":{let a=e[n].dims.length;r.push(`${s};${a}`);break}case"dims":{let a=e[n].dims.join(",");r.push(`${s};${a}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join("|")},ap=(e,t,r)=>{var s,a;let n=e.name;return(s=e.shaderCache)!=null&&s.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+r+`:${ip(t,((a=e.shaderCache)==null?void 0:a.inputDependencies)??new Array(t.length).fill("dims"))}`,n},op=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},lp=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let r=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:r};t.features.has("chromium-experimental-timestamp-query-inside-passes")?r.push("chromium-experimental-timestamp-query-inside-passes"):t.features.has("timestamp-query")&&r.push("timestamp-query"),t.features.has("shader-f16")&&r.push("shader-f16"),this.device=await t.requestDevice(n),this.adapterInfo=new op(t.info||await t.requestAdapterInfo()),this.gpuDataManager=Jt(this),this.programManager=new sp(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ls(e.logLevel,!!e.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;qe(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{var n;let t=new BigUint64Array(e.getMappedRange()),r=this.pendingQueries.get(e);for(let s=0;s<t.length/2;s++){let a=r[s],i=a.kernelId,d=this.kernels.get(i),c=d.kernelType,h=d.kernelName,w=a.programName,y=a.inputTensorViews,u=a.outputTensorViews,k=t[s*2],C=t[s*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=k);let I=Number(k-this.queryTimeBase),U=Number(C-this.queryTimeBase);if(!Number.isSafeInteger(I)||!Number.isSafeInteger(U))throw new RangeError("incorrect timestamp range");if((n=this.env.webgpu.profiling)!=null&&n.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:y.map(q=>({dims:q.dims,dataType:Sn(q.dataType)})),outputsMetadata:u.map(q=>({dims:q.dims,dataType:Sn(q.dataType)})),kernelId:i,kernelType:c,kernelName:h,programName:w,startTime:I,endTime:U});else{let q="";y.forEach((ce,J)=>{q+=`input[${J}]: [${ce.dims}] | ${Sn(ce.dataType)}, `});let R="";u.forEach((ce,J)=>{R+=`output[${J}]: [${ce.dims}] | ${Sn(ce.dataType)}, `}),console.log(`[profiling] kernel "${i}|${c}|${h}|${w}" ${q}${R}execution time: ${U-I} ns`)}Ee("GPU",`${w}::${k}::${C}`)}e.unmap(),this.pendingQueries.delete(e)}),Ve()}run(e,t,r,n,s,a){qe(e.name);let i=[];for(let R=0;R<t.length;++R){let ce=t[R].data;if(ce===0)continue;let J=this.gpuDataManager.get(ce);if(!J)throw new Error(`no GPU data for input: ${ce}`);i.push(J)}let{outputs:d,dispatchGroup:c,programUniforms:h}=e.getRunData(t),w=r.length===0?d.map((R,ce)=>ce):r;if(w.length!==d.length)throw new Error(`Output size ${w.length} must be equal to ${d.length}.`);let y=[],u=[];for(let R=0;R<d.length;++R){if(!Number.isInteger(w[R])||w[R]<-3||w[R]>=a)throw new Error(`Invalid output index: ${w[R]}`);if(w[R]===-3)continue;let ce=w[R]===-1,J=w[R]===-2,oe=ce||J?s(d[R].dataType,d[R].dims):n(w[R],d[R].dataType,d[R].dims);if(y.push(oe),oe.data===0)continue;let tt=this.gpuDataManager.get(oe.data);if(!tt)throw new Error(`no GPU data for output: ${oe.data}`);if(ce&&this.temporaryData.push(tt),J){let Ge=this.kernelPersistentData.get(this.currentKernelId);Ge||(Ge=[],this.kernelPersistentData.set(this.currentKernelId,Ge)),Ge.push(tt)}u.push(tt)}if(i.length!==t.length||u.length!==y.length){if(u.length===0)return Ve(e.name),y;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let k;if(h){let R=0,ce=[];h.forEach(Ge=>{let dt=typeof Ge.data=="number"?[Ge.data]:Ge.data;if(dt.length===0)return;let zt=Ge.type===10?2:4,Dt,cr;Ge.type===10?(cr=dt.length>4?16:dt.length>2?8:dt.length*zt,Dt=dt.length>4?16:zt*dt.length):(cr=dt.length<=2?dt.length*zt:16,Dt=16),R=Math.ceil(R/cr)*cr,ce.push(R);let _r=Ge.type===10?8:4;R+=dt.length>4?Math.ceil(dt.length/_r)*Dt:dt.length*zt});let J=16;R=Math.ceil(R/J)*J;let oe=new ArrayBuffer(R);h.forEach((Ge,dt)=>{let zt=ce[dt],Dt=typeof Ge.data=="number"?[Ge.data]:Ge.data;if(Ge.type===6)new Int32Array(oe,zt,Dt.length).set(Dt);else if(Ge.type===12)new Uint32Array(oe,zt,Dt.length).set(Dt);else if(Ge.type===10)new Uint16Array(oe,zt,Dt.length).set(Dt);else if(Ge.type===1)new Float32Array(oe,zt,Dt.length).set(Dt);else throw new Error(`Unsupported uniform type: ${Sn(Ge.type)}`)});let tt=this.gpuDataManager.create(R,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(tt.buffer,0,oe,0,R),this.gpuDataManager.release(tt.id),k={offset:0,size:R,buffer:tt.buffer}}let C=this.programManager.normalizeDispatchGroupSize(c),I=C[1]===1&&C[2]===1,U=ap(e,t,I),q=this.programManager.getArtifact(U);if(q||(q=this.programManager.build(e,C),this.programManager.setArtifact(U,q),Br("info",()=>`[artifact] key: ${U}, programName: ${e.name}`)),h&&q.uniformVariablesInfo){if(h.length!==q.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${q.uniformVariablesInfo.length}, got ${h.length} in program "${q.programInfo.name}".`);for(let R=0;R<h.length;R++){let ce=h[R],J=ce.type,oe=typeof ce.data=="number"?1:ce.data.length,[tt,Ge]=q.uniformVariablesInfo[R];if(J!==tt||oe!==Ge)throw new Error(`Uniform variable ${R} mismatch: expect type ${tt} with size ${Ge}, got type ${J} with size ${oe} in program "${q.programInfo.name}".`)}}if(Br("info",()=>`[ProgramManager] run "${e.name}" (key=${U}) with ${C[0]}x${C[1]}x${C[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let R={kernelId:this.currentKernelId,programName:q.programInfo.name,inputTensorViews:t,outputTensorViews:y};this.pendingKernels.push(R),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(R)}return this.programManager.run(q,i,u,C,k),Ve(e.name),y}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,r,n){let s=np.get(e);if(!s)throw new Error(`kernel not implemented: ${e}`);let a={kernelType:e,kernelName:n,kernelEntry:s[0],attributes:[s[1],r]};this.kernels.set(t,a)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let r of t)this.gpuDataManager.release(r.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,r){let n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);let s=n.kernelType,a=n.kernelName,i=n.kernelEntry,d=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${a}" is not allowed to be called recursively`);this.currentKernelId=e,d[0]&&(d[1]=d[0](d[1]),d[0]=void 0),Br("info",()=>`[WebGPU] Start to run kernel "[${s}] ${a}"...`);let c=this.env.debug;this.temporaryData=[];try{return c&&this.device.pushErrorScope("validation"),i(t,d[1]),0}catch(h){return r.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${a}" failed. ${h}`)),1}finally{c&&r.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${a}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,r,n){let s=this.sessionExternalDataMapping.get(e);s||(s=new Map,this.sessionExternalDataMapping.set(e,s));let a=s.get(t),i=this.gpuDataManager.registerExternalBuffer(r,n,a==null?void 0:a[1]);return s.set(t,[i,r]),i}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach(r=>this.gpuDataManager.unregisterExternalBuffer(r[1])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,r){return async()=>{let n=await wt(this,e,t);return ve(n.buffer,r)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){var e;this.queryType="none",(((e=this.env.webgpu.profiling)==null?void 0:e.mode)==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Br("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Br("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Br("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),r=e.length;this.pendingKernels=[];for(let n=0;n<r;n++){let s=this.getComputePassEncoder(),a=e[n];this.writeTimestamp(this.pendingDispatchNumber*2),s.setPipeline(a.computePipeline),s.setBindGroup(0,a.bindGroup),s.dispatchWorkgroups(...a.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(t[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),up={};$(up,{init:()=>cp});var cd,dp,cp,cf=B(()=>{Qt(),df(),fn(),Yt(),cd=class Qh{constructor(t,r,n,s){this.module=t,this.dataType=r,this.data=n,this.dims=s}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=He.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=He.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=He.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(He.size(t)!==He.size(this.dims))throw new Error("Invalid new shape");return new Qh(this.module,this.dataType,this.data,t)}},dp=class{constructor(e,t,r){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo;let n=e.HEAPU32,s=r>>>2;this.opKernelContext=n[s++];let a=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let i=[];for(let d=0;d<a;d++){let c=n[s++],h=n[s++],w=n[s++],y=[];for(let u=0;u<w;u++)y.push(n[s++]);i.push(new cd(e,c,h,y))}this.inputs=i}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(e,t){var i;let r=((i=t==null?void 0:t.inputs)==null?void 0:i.map(d=>typeof d=="number"?this.inputs[d]:d))??this.inputs,n=(t==null?void 0:t.outputs)??[],s=(d,c,h)=>new cd(this.module,c,this.output(d,h),h),a=(d,c)=>{let h=Fn(d);if(!h)throw new Error(`Unsupported data type: ${d}`);let w=h*He.size(c),y=w>0?this.backend.gpuDataManager.create(w).id:0;return new cd(this.module,d,y,c)};return this.backend.run(e,r,n,s,a,this.outputCount)}output(e,t){let r=this.module.stackSave();try{let n=this.module.stackAlloc((1+t.length)*4),s=n>>2;this.module.HEAPU32[s++]=t.length;for(let a=0;a<t.length;a++)this.module.HEAPU32[s++]=t[a];return this.module._JsepOutput(this.opKernelContext,e,n)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(r)}}},cp=async(e,t,r,n)=>{let s=t.jsepInit;if(!s)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let a=new lp;await a.initialize(r,n),s("webgpu",[a,i=>a.alloc(i),i=>a.free(i),(i,d,c,h=!1)=>{if(h)Br("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${i}, dst=${d}, size=${c}`),a.memcpy(i,d);else{Br("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${i}, gpuDataId=${d}, size=${c}`);let w=t.HEAPU8.subarray(i>>>0,(i>>>0)+c);a.upload(d,w)}},async(i,d,c)=>{Br("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${i}, dataOffset=${d}, size=${c}`),await a.download(i,()=>t.HEAPU8.subarray(d>>>0,(d>>>0)+c))},(i,d,c)=>a.createKernel(i,d,c,t.UTF8ToString(t._JsepGetNodeName(d))),i=>a.releaseKernel(i),(i,d,c,h)=>{Br("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${c}, kernel=${i}, contextDataOffset=${d}`);let w=new dp(t,a,d);return a.computeKernel(i,w,h)},()=>a.captureBegin(),()=>a.captureEnd(),()=>a.replay()])}else s("webnn")}}),pp,zd,Dd,Fs,hp,pd,Bd,Ld,Rd,Nd,jd,Vd,fp=B(()=>{Vs(),Us(),Qt(),Jr(),Vn(),Ms(),pp=(e,t)=>{Rr()._OrtInit(e,t)!==0&&Pr("Can't initialize onnxruntime.")},zd=async e=>{pp(e.wasm.numThreads,Kn(e.logLevel))},Dd=async(e,t)=>{{let r=(cf(),P(up)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let n=e.webgpu.adapter;if(n){if(typeof n.limits!="object"||typeof n.features!="object"||typeof n.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let s=e.webgpu.powerPreference;if(s!==void 0&&s!=="low-power"&&s!=="high-performance")throw new Error(`Invalid powerPreference setting: "${s}"`);let a=e.webgpu.forceFallbackAdapter;if(a!==void 0&&typeof a!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${a}"`);if(n=await navigator.gpu.requestAdapter({powerPreference:s,forceFallbackAdapter:a}),!n)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await r("webgpu",Rr(),e,n)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await r("webnn",Rr(),e)}}},Fs=new Map,hp=e=>{let t=Rr(),r=t.stackSave();try{let n=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,n,n+4)!==0&&Pr("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(r)}},pd=e=>{let t=Rr(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Bd=async(e,t)=>{var y,u;let r,n,s=Rr();Array.isArray(e)?[r,n]=e:e.buffer===s.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=pd(e);let a=0,i=0,d=0,c=[],h=[],w=[];try{if([i,c]=Un(t),(t==null?void 0:t.externalData)&&s.mountExternalData){let J=[];for(let oe of t.externalData){let tt=typeof oe=="string"?oe:oe.path;J.push(Xn(typeof oe=="string"?oe:oe.data).then(Ge=>{s.mountExternalData(tt,Ge)}))}await Promise.all(J)}for(let J of(t==null?void 0:t.executionProviders)??[])if((typeof J=="string"?J:J.name)==="webnn"){if(s.currentContext)throw new Error("WebNN execution provider is already set.");if(typeof J!="string"){let oe=J,tt=oe==null?void 0:oe.context,Ge=oe==null?void 0:oe.gpuDevice,dt=oe==null?void 0:oe.deviceType,zt=oe==null?void 0:oe.numThreads,Dt=oe==null?void 0:oe.powerPreference;tt?s.currentContext=tt:Ge?s.currentContext=await navigator.ml.createContext(Ge):s.currentContext=await navigator.ml.createContext({deviceType:dt,numThreads:zt,powerPreference:Dt})}else s.currentContext=await navigator.ml.createContext();break}a=await s._OrtCreateSession(r,n,i),a===0&&Pr("Can't create a session."),s.currentContext&&(s.currentContext=void 0);let[k,C]=hp(a),I=!!(t!=null&&t.enableGraphCapture),U=[],q=[],R=[];for(let J=0;J<k;J++){let oe=s._OrtGetInputName(a,J);oe===0&&Pr("Can't get an input name."),h.push(oe),U.push(s.UTF8ToString(oe))}for(let J=0;J<C;J++){let oe=s._OrtGetOutputName(a,J);oe===0&&Pr("Can't get an output name."),w.push(oe);let tt=s.UTF8ToString(oe);q.push(tt);{if(I&&(t==null?void 0:t.preferredOutputLocation)===void 0){R.push("gpu-buffer");continue}let Ge=typeof(t==null?void 0:t.preferredOutputLocation)=="string"?t.preferredOutputLocation:((y=t==null?void 0:t.preferredOutputLocation)==null?void 0:y[tt])??"cpu";if(Ge!=="cpu"&&Ge!=="cpu-pinned"&&Ge!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${Ge}.`);if(I&&Ge!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${Ge}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);R.push(Ge)}}let ce=null;return R.some(J=>J==="gpu-buffer")&&(d=s._OrtCreateBinding(a),d===0&&Pr("Can't create IO binding."),ce={handle:d,outputPreferredLocations:R,outputPreferredLocationsEncoded:R.map(J=>as(J))}),Fs.set(a,[a,h,w,ce,I,!1]),[a,U,q]}catch(k){throw h.forEach(C=>s._OrtFree(C)),w.forEach(C=>s._OrtFree(C)),d!==0&&s._OrtReleaseBinding(d),a!==0&&s._OrtReleaseSession(a),k}finally{s._free(r),i!==0&&s._OrtReleaseSessionOptions(i),c.forEach(k=>s._free(k)),(u=s.unmountExternalData)==null||u.call(s)}},Ld=e=>{var c;let t=Rr(),r=Fs.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,s,a,i,d]=r;i&&(d&&t._OrtClearBoundOutputs(i.handle),t._OrtReleaseBinding(i.handle)),(c=t.jsepOnReleaseSession)==null||c.call(t,e),s.forEach(h=>t._OrtFree(h)),a.forEach(h=>t._OrtFree(h)),t._OrtReleaseSession(n),Fs.delete(e)},Rd=(e,t,r,n,s,a=!1)=>{if(!e){t.push(0);return}let i=Rr(),d=e[0],c=e[1],h=e[3],w,y;if(d==="string"&&h==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(a&&h!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${s} when enableGraphCapture is true.`);if(h==="gpu-buffer"){let C=e[2].gpuBuffer,I=Fn(ss(d));y=c.reduce((q,R)=>q*R,1)*I;let U=i.jsepRegisterBuffer;if(!U)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');w=U(n,s,C,y)}else{let C=e[2];if(Array.isArray(C)){y=4*C.length,w=i._malloc(y),r.push(w);let I=w/4;for(let U=0;U<C.length;U++){if(typeof C[U]!="string")throw new TypeError(`tensor data at index ${U} is not a string`);i.HEAPU32[I++]=jr(C[U],r)}}else y=C.byteLength,w=i._malloc(y),r.push(w),i.HEAPU8.set(new Uint8Array(C.buffer,C.byteOffset,y),w)}let u=i.stackSave(),k=i.stackAlloc(4*c.length);try{let C=k/4;c.forEach(U=>i.HEAP32[C++]=U);let I=i._OrtCreateTensor(ss(d),w,y,k,c.length,as(h));I===0&&Pr(`Can't create tensor for input/output. session=${n}, index=${s}.`),t.push(I)}finally{i.stackRestore(u)}},Nd=async(e,t,r,n,s,a)=>{var Dt,cr;let i=Rr(),d=Fs.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let c=d[0],h=d[1],w=d[2],y=d[3],u=d[4],k=d[5],C=t.length,I=n.length,U=0,q=[],R=[],ce=[],J=[],oe=i.stackSave(),tt=i.stackAlloc(C*4),Ge=i.stackAlloc(C*4),dt=i.stackAlloc(I*4),zt=i.stackAlloc(I*4);try{[U,q]=In(a);for(let Lt=0;Lt<C;Lt++)Rd(r[Lt],R,J,e,t[Lt],u);for(let Lt=0;Lt<I;Lt++)Rd(s[Lt],ce,J,e,C+n[Lt],u);let _r=tt/4,nr=Ge/4,Sr=dt/4,Wr=zt/4;for(let Lt=0;Lt<C;Lt++)i.HEAPU32[_r++]=R[Lt],i.HEAPU32[nr++]=h[t[Lt]];for(let Lt=0;Lt<I;Lt++)i.HEAPU32[Sr++]=ce[Lt],i.HEAPU32[Wr++]=w[n[Lt]];if(y&&!k){let{handle:Lt,outputPreferredLocations:Zt,outputPreferredLocationsEncoded:fr}=y;if(h.length!==C)throw new Error(`input count from feeds (${C}) is expected to be always equal to model's input count (${h.length}).`);for(let Le=0;Le<C;Le++){let jt=t[Le];await i._OrtBindInput(Lt,h[jt],R[Le])!==0&&Pr(`Can't bind input[${Le}] for session=${e}.`)}for(let Le=0;Le<I;Le++){let jt=n[Le];(Dt=s[Le])!=null&&Dt[3]?i._OrtBindOutput(Lt,w[jt],ce[Le],0)!==0&&Pr(`Can't bind pre-allocated output[${Le}] for session=${e}.`):i._OrtBindOutput(Lt,w[jt],0,fr[jt])!==0&&Pr(`Can't bind output[${Le}] to ${Zt[Le]} for session=${e}.`)}Fs.set(e,[c,h,w,y,u,!0])}(cr=i.jsepOnRunStart)==null||cr.call(i,c);let dr;y?dr=await i._OrtRunWithBinding(c,y.handle,I,dt,U):dr=await i._OrtRun(c,Ge,tt,C,zt,I,dt,U),dr!==0&&Pr("failed to call OrtRun().");let Nr=[];for(let Lt=0;Lt<I;Lt++){let Zt=i.HEAPU32[dt/4+Lt];if(Zt===ce[Lt]){Nr.push(s[Lt]);continue}let fr=i.stackSave(),Le=i.stackAlloc(4*4),jt=!1,rr,Lr=0;try{i._OrtGetTensorData(Zt,Le,Le+4,Le+8,Le+12)!==0&&Pr(`Can't access output tensor data on index ${Lt}.`);let Xr=Le/4,sn=i.HEAPU32[Xr++];Lr=i.HEAPU32[Xr++];let zs=i.HEAPU32[Xr++],En=i.HEAPU32[Xr++],Pn=[];for(let hn=0;hn<En;hn++)Pn.push(i.HEAPU32[zs/4+hn]);i._OrtFree(zs);let pn=Pn.reduce((hn,yn)=>hn*yn,1);rr=Sn(sn);let Ou=y==null?void 0:y.outputPreferredLocations[n[Lt]];if(rr==="string"){if(Ou==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let hn=[],yn=Lr/4;for(let Ln=0;Ln<pn;Ln++){let Ds=i.HEAPU32[yn++],md=Ln===pn-1?void 0:i.HEAPU32[yn]-Ds;hn.push(i.UTF8ToString(Ds,md))}Nr.push([rr,Pn,hn,"cpu"])}else if(Ou==="gpu-buffer"&&pn>0){let hn=i.jsepGetBuffer;if(!hn)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let yn=hn(Lr),Ln=Fn(sn);if(Ln===void 0||!is(rr))throw new Error(`Unsupported data type: ${rr}`);jt=!0,Nr.push([rr,Pn,{gpuBuffer:yn,download:i.jsepCreateDownloader(yn,pn*Ln,rr),dispose:()=>{i._OrtReleaseTensor(Zt)}},"gpu-buffer"])}else{let hn=On(rr),yn=new hn(pn);new Uint8Array(yn.buffer,yn.byteOffset,yn.byteLength).set(i.HEAPU8.subarray(Lr,Lr+yn.byteLength)),Nr.push([rr,Pn,yn,"cpu"])}}finally{i.stackRestore(fr),rr==="string"&&Lr&&i._free(Lr),jt||i._OrtReleaseTensor(Zt)}}return y&&!u&&(i._OrtClearBoundOutputs(y.handle),Fs.set(e,[c,h,w,y,u,!1])),Nr}finally{i.stackRestore(oe),R.forEach(_r=>i._OrtReleaseTensor(_r)),ce.forEach(_r=>i._OrtReleaseTensor(_r)),J.forEach(_r=>i._free(_r)),U!==0&&i._OrtReleaseRunOptions(U),q.forEach(_r=>i._free(_r))}},jd=e=>{let t=Rr(),r=Fs.get(e);if(!r)throw new Error("invalid session id");let n=r[0],s=t._OrtEndProfiling(n);s===0&&Pr("Can't get an profile file name."),t._OrtFree(s)},Vd=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}}),Os,Cn,Pa,Iu,Fu,hd,Ud,fd,li,ui,mp,_p,gp,wp,yp,bp,Mp,vp,xp=B(()=>{E(),fp(),Jr(),Ur(),Os=()=>!!A.wasm.proxy&&typeof document<"u",Pa=!1,Iu=!1,Fu=!1,fd=new Map,li=(e,t)=>{let r=fd.get(e);r?r.push(t):fd.set(e,[t])},ui=()=>{if(Pa||!Iu||Fu||!Cn)throw new Error("worker not ready")},mp=e=>{switch(e.data.type){case"init-wasm":Pa=!1,e.data.err?(Fu=!0,Ud[1](e.data.err)):(Iu=!0,Ud[0]()),hd&&(URL.revokeObjectURL(hd),hd=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=fd.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},_p=async()=>{if(!Iu){if(Pa)throw new Error("multiple calls to 'initWasm()' detected.");if(Fu)throw new Error("previous call to 'initWasm()' failed.");if(Pa=!0,Os())return new Promise((e,t)=>{Cn==null||Cn.terminate(),er().then(([r,n])=>{try{Cn=n,Cn.onerror=a=>t(a),Cn.onmessage=mp,Ud=[e,t];let s={type:"init-wasm",in:A};Cn.postMessage(s),hd=r}catch(s){t(s)}},t)});try{await An(A.wasm),await zd(A),Iu=!0}catch(e){throw Fu=!0,e}finally{Pa=!1}}},gp=async e=>{if(Os())return ui(),new Promise((t,r)=>{li("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:A}};Cn.postMessage(n)});await Dd(A,e)},wp=async e=>Os()?(ui(),new Promise((t,r)=>{li("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};Cn.postMessage(n,[e.buffer])})):pd(e),yp=async(e,t)=>{if(Os()){if(t!=null&&t.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return ui(),new Promise((r,n)=>{li("create",[r,n]);let s={type:"create",in:{model:e,options:{...t}}},a=[];e instanceof Uint8Array&&a.push(e.buffer),Cn.postMessage(s,a)})}else return Bd(e,t)},bp=async e=>{if(Os())return ui(),new Promise((t,r)=>{li("release",[t,r]);let n={type:"release",in:e};Cn.postMessage(n)});Ld(e)},Mp=async(e,t,r,n,s,a)=>{if(Os()){if(r.some(i=>i[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(s.some(i=>i))throw new Error("pre-allocated output tensor is not supported for proxy.");return ui(),new Promise((i,d)=>{li("run",[i,d]);let c=r,h={type:"run",in:{sessionId:e,inputIndices:t,inputs:c,outputIndices:n,options:a}};Cn.postMessage(h,Vd(c))})}else return Nd(e,t,r,n,s,a)},vp=async e=>{if(Os())return ui(),new Promise((t,r)=>{li("end-profiling",[t,r]);let n={type:"end-profiling",in:e};Cn.postMessage(n)});jd(e)}}),Wd,Tp,Cp,pf=B(()=>{E(),xp(),Qt(),X(),Ms(),Wd=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Tp=e=>{switch(e[3]){case"cpu":return new ze(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!is(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:s}=e[2];return ze.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:s})}default:throw new Error(`invalid data location: ${e[3]}`)}},Cp=class{async fetchModelAndCopyToWasmMemory(e){return wp(await Xn(e))}async loadModel(e,t){qe();let r;typeof e=="string"?r=await this.fetchModelAndCopyToWasmMemory(e):r=e,[this.sessionId,this.inputNames,this.outputNames]=await yp(r,t),Ve()}async dispose(){return bp(this.sessionId)}async run(e,t,r){qe();let n=[],s=[];Object.entries(e).forEach(y=>{let u=y[0],k=y[1],C=this.inputNames.indexOf(u);if(C===-1)throw new Error(`invalid input '${u}'`);n.push(k),s.push(C)});let a=[],i=[];Object.entries(t).forEach(y=>{let u=y[0],k=y[1],C=this.outputNames.indexOf(u);if(C===-1)throw new Error(`invalid output '${u}'`);a.push(k),i.push(C)});let d=n.map((y,u)=>Wd(y,()=>`input "${this.inputNames[s[u]]}"`)),c=a.map((y,u)=>y?Wd(y,()=>`output "${this.outputNames[i[u]]}"`):null),h=await Mp(this.sessionId,s,d,i,c,r),w={};for(let y=0;y<h.length;y++)w[this.outputNames[i[y]]]=a[y]??Tp(h[y]);return Ve(),w}startProfiling(){}endProfiling(){vp(this.sessionId)}}}),Ep,$p,hf=B(()=>{E(),xp(),pf(),Ur(),Ep=()=>{if((typeof A.wasm.initTimeout!="number"||A.wasm.initTimeout<0)&&(A.wasm.initTimeout=0),A.wasm.simd===!1&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),typeof A.wasm.proxy!="boolean"&&(A.wasm.proxy=!1),typeof A.wasm.trace!="boolean"&&(A.wasm.trace=!1),typeof A.wasm.numThreads!="number"||!Number.isInteger(A.wasm.numThreads)||A.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)A.wasm.numThreads=1;else{let e=typeof navigator>"u"?xe("node:os").cpus().length:navigator.hardwareConcurrency;A.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},$p=class{async init(e){Ep(),await _p(),await gp(e)}async createInferenceSessionHandler(e,t){let r=new Cp;return await r.loadModel(e,t),Promise.resolve(r)}}}),Sp={};$(Sp,{wasmBackend:()=>kp});var kp,ff=B(()=>{hf(),kp=new $p});E(),E(),E();var mf="1.19.0-dev.20240804-ee2fe87e2d",_f=Se;{let e=(ff(),P(Sp)).wasmBackend;ie("webgpu",e,5),ie("webnn",e,5),ie("cpu",e,10),ie("wasm",e,10)}Object.defineProperty(A.versions,"web",{value:mf,enumerable:!0});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */},"./src/backends/onnx.js":(xt,me,l)=>{var x;l.r(me),l.d(me,{Tensor:()=>xe.Tensor,createInferenceSession:()=>ie,deviceToExecutionProviders:()=>ee,isONNXProxy:()=>te,isONNXTensor:()=>ae});var H=l("./src/env.js"),we=l("?2ce3"),be=l("./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs"),xe=l("./node_modules/onnxruntime-common/dist/esm/index.js");const B=[];let $,N;H.apis.IS_NODE_ENV?(N=we??(x||(x=l.t(we,2))),B.push("cpu"),$=["cpu"]):(N=be,H.apis.IS_WEBGPU_AVAILABLE&&B.push("webgpu"),B.push("wasm"),$=["wasm"]);const P=N.InferenceSession;function ee(G){let re=$;if(G){if(!B.includes(G))throw new Error(`Unsupported device: "${G}". Should be one of: ${B.join(", ")}.`);re=[G]}return re}let Z=null;async function ie(G,re){Z&&await Z;const pe=P.create(G,re);return Z??(Z=pe),await pe}function ae(G){return G instanceof N.Tensor}const z=N==null?void 0:N.env;z!=null&&z.wasm&&(z.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${H.env.version}/dist/`,z.wasm.proxy=!H.apis.IS_WEBWORKER_ENV,(typeof crossOriginIsolated>"u"||!crossOriginIsolated)&&(z.wasm.numThreads=1),typeof navigator<"u"&&/iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent)&&(z.wasm.simd=!1)),z!=null&&z.webgpu&&(z.webgpu.powerPreference="high-performance");function te(){var G;return(G=z==null?void 0:z.wasm)==null?void 0:G.proxy}H.env.backends.onnx=z},"./src/configs.js":(xt,me,l)=>{l.r(me),l.d(me,{AutoConfig:()=>$,PretrainedConfig:()=>B,getKeyValueShapes:()=>xe});var x=l("./src/utils/core.js"),H=l("./src/utils/hub.js");async function we(N,P){return await(0,H.getModelJSON)(N,"config.json",!0,P)}function be(N){const P={};let ee={};switch(N.model_type){case"llava":case"paligemma":case"florence2":ee=be(N.text_config);break;case"moondream1":ee=be(N.phi_config);break;case"musicgen":ee=be(N.decoder);break;case"gpt2":case"gptj":case"codegen":case"gpt_bigcode":P.num_heads="n_head",P.num_layers="n_layer",P.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"phi":case"phi3":case"falcon":P.num_heads="num_attention_heads",P.num_layers="num_hidden_layers",P.hidden_size="hidden_size";break;case"llama":case"cohere":case"mistral":case"starcoder2":case"qwen2":P.num_heads="num_key_value_heads",P.num_layers="num_hidden_layers",P.hidden_size="hidden_size",P.num_attention_heads="num_attention_heads";break;case"gemma":case"gemma2":P.num_heads="num_key_value_heads",P.num_layers="num_hidden_layers",P.dim_kv="head_dim";break;case"openelm":P.num_heads="num_kv_heads",P.num_layers="num_transformer_layers",P.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":P.num_heads="num_heads",P.num_layers="num_layers",P.hidden_size="hidden_size";break;case"bloom":P.num_heads="n_head",P.num_layers="n_layer",P.hidden_size="hidden_size";break;case"mpt":P.num_heads="n_heads",P.num_layers="n_layers",P.hidden_size="d_model";break;case"t5":case"mt5":case"longt5":P.num_decoder_layers="num_decoder_layers",P.num_decoder_heads="num_heads",P.decoder_dim_kv="d_kv",P.num_encoder_layers="num_layers",P.num_encoder_heads="num_heads",P.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":P.num_decoder_layers="decoder_layers",P.num_decoder_heads="decoder_attention_heads",P.decoder_hidden_size="d_model",P.num_encoder_layers="encoder_layers",P.num_encoder_heads="encoder_attention_heads",P.encoder_hidden_size="d_model";break;case"speecht5":P.num_decoder_layers="decoder_layers",P.num_decoder_heads="decoder_attention_heads",P.decoder_hidden_size="hidden_size",P.num_encoder_layers="encoder_layers",P.num_encoder_heads="encoder_attention_heads",P.encoder_hidden_size="hidden_size";break;case"trocr":P.num_encoder_layers=P.num_decoder_layers="decoder_layers",P.num_encoder_heads=P.num_decoder_heads="decoder_attention_heads",P.encoder_hidden_size=P.decoder_hidden_size="d_model";break;case"musicgen_decoder":P.num_encoder_layers=P.num_decoder_layers="num_hidden_layers",P.num_encoder_heads=P.num_decoder_heads="num_attention_heads",P.encoder_hidden_size=P.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const ie=be(N.decoder),ae="num_decoder_layers"in ie,z=(0,x.pick)(N,["model_type","is_encoder_decoder"]);return ae?(z.num_decoder_layers=ie.num_decoder_layers,z.num_decoder_heads=ie.num_decoder_heads,z.decoder_hidden_size=ie.decoder_hidden_size,z.num_encoder_layers=ie.num_encoder_layers,z.num_encoder_heads=ie.num_encoder_heads,z.encoder_hidden_size=ie.encoder_hidden_size):(z.num_layers=ie.num_layers,z.num_heads=ie.num_heads,z.hidden_size=ie.hidden_size),z}const Z={...ee,...(0,x.pick)(N,["model_type","multi_query","is_encoder_decoder"])};for(const ie in P)Z[ie]=N[P[ie]];return Z}function xe(N,{prefix:P="past_key_values"}={}){const ee={},Z=N.normalized_config,ie=1;if(Z.is_encoder_decoder&&"num_encoder_heads"in Z&&"num_decoder_heads"in Z){const ae=Z.encoder_dim_kv??Z.encoder_hidden_size/Z.num_encoder_heads,z=Z.decoder_dim_kv??Z.decoder_hidden_size/Z.num_decoder_heads,te=[ie,Z.num_encoder_heads,0,ae],G=[ie,Z.num_decoder_heads,0,z];for(let re=0;re<Z.num_decoder_layers;++re)ee[`${P}.${re}.encoder.key`]=te,ee[`${P}.${re}.encoder.value`]=te,ee[`${P}.${re}.decoder.key`]=G,ee[`${P}.${re}.decoder.value`]=G}else{const ae=Z.num_heads,z=Z.num_layers,te=Z.dim_kv??Z.hidden_size/(Z.num_attention_heads??ae);if(Z.model_type==="falcon"){const G=[ie*ae,0,te];for(let re=0;re<z;++re)ee[`${P}.${re}.key`]=G,ee[`${P}.${re}.value`]=G}else if(Z.multi_query){const G=[ie*ae,0,2*te];for(let re=0;re<z;++re)ee[`${P}.${re}.key_value`]=G}else if(Z.model_type==="bloom"){const G=[ie*ae,te,0],re=[ie*ae,0,te];for(let pe=0;pe<z;++pe)ee[`${P}.${pe}.key`]=G,ee[`${P}.${pe}.value`]=re}else if(Z.model_type==="openelm")for(let G=0;G<z;++G){const re=[ie,ae[G],0,te];ee[`${P}.${G}.key`]=re,ee[`${P}.${G}.value`]=re}else{const G=[ie,ae,0,te];for(let re=0;re<z;++re)ee[`${P}.${re}.key`]=G,ee[`${P}.${re}.value`]=G}}return ee}class B{constructor(P){Te(this,"max_position_embeddings");this.model_type=null,this.is_encoder_decoder=!1,Object.assign(this,P),this.normalized_config=be(this)}static async from_pretrained(P,{progress_callback:ee=null,config:Z=null,cache_dir:ie=null,local_files_only:ae=!1,revision:z="main"}={}){Z&&!(Z instanceof B)&&(Z=new B(Z));const te=Z??await we(P,{progress_callback:ee,config:Z,cache_dir:ie,local_files_only:ae,revision:z});return new this(te)}}class ${static async from_pretrained(...P){return B.from_pretrained(...P)}}},"./src/env.js":(xt,me,l)=>{var j;l.r(me),l.d(me,{apis:()=>ae,env:()=>L});var x=l("?569f"),H=l("?3f59"),we=l("?154a");const be="3.0.0-alpha.4",xe=typeof self<"u",B=xe&&self.constructor.name==="DedicatedWorkerGlobalScope",$=xe&&"caches"in self,N=typeof navigator<"u"&&"gpu"in navigator,P=typeof process<"u",ee=P&&((j=process==null?void 0:process.release)==null?void 0:j.name)==="node",Z=!O(x),ie=!O(H),ae=Object.freeze({IS_BROWSER_ENV:xe,IS_WEBWORKER_ENV:B,IS_WEB_CACHE_AVAILABLE:$,IS_WEBGPU_AVAILABLE:N,IS_PROCESS_AVAILABLE:P,IS_NODE_ENV:ee,IS_FS_AVAILABLE:Z,IS_PATH_AVAILABLE:ie}),z=Z&&ie,te=z?H.dirname(H.dirname(we.fileURLToPath(self.location.href))):"./",G=z?H.join(te,"/.cache/"):null,re="/models/",pe=z?H.join(te,re):re,L={version:be,backends:{onnx:{},tfjs:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!xe,localModelPath:pe,useFS:Z,useBrowserCache:$,useFSCache:Z,cacheDir:G,useCustomCache:!1,customCache:null};function O(A){return Object.keys(A).length===0}},"./src/generation/configuration_utils.js":(xt,me,l)=>{l.r(me),l.d(me,{GenerationConfig:()=>H});var x=l("./src/utils/core.js");class H{constructor(be){Te(this,"max_length",20);Te(this,"max_new_tokens",null);Te(this,"min_length",0);Te(this,"min_new_tokens",null);Te(this,"early_stopping",!1);Te(this,"max_time",null);Te(this,"do_sample",!1);Te(this,"num_beams",1);Te(this,"num_beam_groups",1);Te(this,"penalty_alpha",null);Te(this,"use_cache",!0);Te(this,"temperature",1);Te(this,"top_k",50);Te(this,"top_p",1);Te(this,"typical_p",1);Te(this,"epsilon_cutoff",0);Te(this,"eta_cutoff",0);Te(this,"diversity_penalty",0);Te(this,"repetition_penalty",1);Te(this,"encoder_repetition_penalty",1);Te(this,"length_penalty",1);Te(this,"no_repeat_ngram_size",0);Te(this,"bad_words_ids",null);Te(this,"force_words_ids",null);Te(this,"renormalize_logits",!1);Te(this,"constraints",null);Te(this,"forced_bos_token_id",null);Te(this,"forced_eos_token_id",null);Te(this,"remove_invalid_values",!1);Te(this,"exponential_decay_length_penalty",null);Te(this,"suppress_tokens",null);Te(this,"begin_suppress_tokens",null);Te(this,"forced_decoder_ids",null);Te(this,"guidance_scale",null);Te(this,"num_return_sequences",1);Te(this,"output_attentions",!1);Te(this,"output_hidden_states",!1);Te(this,"output_scores",!1);Te(this,"return_dict_in_generate",!1);Te(this,"pad_token_id",null);Te(this,"bos_token_id",null);Te(this,"eos_token_id",null);Te(this,"encoder_no_repeat_ngram_size",0);Te(this,"decoder_start_token_id",null);Te(this,"generation_kwargs",{});Object.assign(this,(0,x.pick)(be,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(xt,me,l)=>{l.r(me),l.d(me,{ClassifierFreeGuidanceLogitsProcessor:()=>te,ForcedBOSTokenLogitsProcessor:()=>B,ForcedEOSTokenLogitsProcessor:()=>$,LogitsProcessor:()=>we,LogitsProcessorList:()=>xe,LogitsWarper:()=>be,MinLengthLogitsProcessor:()=>ie,MinNewTokensLengthLogitsProcessor:()=>ae,NoBadWordsLogitsProcessor:()=>z,NoRepeatNGramLogitsProcessor:()=>ee,RepetitionPenaltyLogitsProcessor:()=>Z,SuppressTokensAtBeginLogitsProcessor:()=>N,TemperatureLogitsWarper:()=>G,TopKLogitsWarper:()=>pe,TopPLogitsWarper:()=>re,WhisperTimeStampLogitsProcessor:()=>P});var x=l("./src/utils/generic.js");l("./src/utils/tensor.js");var H=l("./src/utils/maths.js");class we extends x.Callable{_call(O,j){throw Error("`_call` should be implemented in a subclass")}}class be extends x.Callable{_call(O,j){throw Error("`_call` should be implemented in a subclass")}}class xe extends x.Callable{constructor(){super(),this.processors=[]}push(O){this.processors.push(O)}extend(O){this.processors.push(...O)}_call(O,j){let A=j;for(const _e of this.processors)A=_e(O,A);return A}[Symbol.iterator](){return this.processors.values()}}class B extends we{constructor(O){super(),this.bos_token_id=O}_call(O,j){for(let A=0;A<O.length;++A)if(O[A].length===1){const _e=j[A];_e.data.fill(-1/0),_e.data[this.bos_token_id]=0}return j}}class $ extends we{constructor(O,j){super(),this.max_length=O,this.eos_token_id=Array.isArray(j)?j:[j]}_call(O,j){for(let A=0;A<O.length;++A)if(O[A].length===this.max_length-1){const _e=j[A];_e.data.fill(-1/0);for(const Me of this.eos_token_id)_e.data[Me]=0}return j}}class N extends we{constructor(O,j){super(),this.begin_suppress_tokens=O,this.begin_index=j}_call(O,j){for(let A=0;A<O.length;++A)if(O[A].length===this.begin_index){const _e=j[A];for(const Me of this.begin_suppress_tokens)_e.data[Me]=-1/0}return j}}class P extends we{constructor(O,j){super(),this.eos_token_id=Array.isArray(O.eos_token_id)?O.eos_token_id[0]:O.eos_token_id,this.no_timestamps_token_id=O.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=j.length,j.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=O.max_initial_timestamp_index}_call(O,j){for(let A=0;A<O.length;++A){const Me=j[A].data;if(Me[this.no_timestamps_token_id]=-1/0,O[A].length===this.begin_index-1){Me.fill(-1/0),Me[this.timestamp_begin]=0;continue}const Ce=O[A].slice(this.begin_index),ke=Ce.length>=1&&Ce[Ce.length-1]>=this.timestamp_begin,De=Ce.length<2||Ce[Ce.length-2]>=this.timestamp_begin;if(ke&&(De?Me.subarray(this.timestamp_begin).fill(-1/0):Me.subarray(0,this.eos_token_id).fill(-1/0)),O[A].length===this.begin_index&&this.max_initial_timestamp_index!==null){const ge=this.timestamp_begin+this.max_initial_timestamp_index;Me.subarray(ge+1).fill(-1/0)}const Je=(0,H.log_softmax)(Me),Ue=Math.log(Je.subarray(this.timestamp_begin).map(Math.exp).reduce((ge,V)=>ge+V)),bt=(0,H.max)(Je.subarray(0,this.timestamp_begin))[0];Ue>bt&&Me.subarray(0,this.timestamp_begin).fill(-1/0)}return j}}class ee extends we{constructor(O){super(),this.no_repeat_ngram_size=O}getNgrams(O){const j=O.length,A=[];for(let Me=0;Me<j+1-this.no_repeat_ngram_size;++Me){const Ce=[];for(let ke=0;ke<this.no_repeat_ngram_size;++ke)Ce.push(O[Me+ke]);A.push(Ce.map(Number))}const _e=new Map;for(const Me of A){const Ce=Me.slice(0,Me.length-1),ke=JSON.stringify(Ce),De=_e.get(ke)??[];De.push(Me[Me.length-1]),_e.set(ke,De)}return _e}getGeneratedNgrams(O,j){const A=j.slice(j.length+1-this.no_repeat_ngram_size,j.length);return O.get(JSON.stringify(A.map(Number)))??[]}calcBannedNgramTokens(O){const j=[];if(O.length+1<this.no_repeat_ngram_size)return j;{const A=this.getNgrams(O);return this.getGeneratedNgrams(A,O)}}_call(O,j){for(let A=0;A<O.length;++A){const _e=j[A],Me=this.calcBannedNgramTokens(O[A]);for(const Ce of Me)_e.data[Ce]=-1/0}return j}}class Z extends we{constructor(O){super(),this.penalty=O}_call(O,j){for(let A=0;A<O.length;++A){const _e=j[A];for(const Me of O[A])_e.data[Me]<0?_e.data[Me]*=this.penalty:_e.data[Me]/=this.penalty}return j}}class ie extends we{constructor(O,j){super(),this.min_length=O,this.eos_token_id=Array.isArray(j)?j:[j]}_call(O,j){for(let A=0;A<O.length;++A)if(O[A].length<this.min_length){const _e=j[A];for(const Me of this.eos_token_id)_e.data[Me]=-1/0}return j}}class ae extends we{constructor(O,j,A){super(),this.prompt_length_to_skip=O,this.min_new_tokens=j,this.eos_token_id=Array.isArray(A)?A:[A]}_call(O,j){for(let A=0;A<O.length;++A)if(O[A].length-this.prompt_length_to_skip<this.min_new_tokens){const Me=j[A];for(const Ce of this.eos_token_id)Me[Ce]=-1/0}return j}}class z extends we{constructor(O,j){super(),this.bad_words_ids=O,this.eos_token_id=Array.isArray(j)?j:[j]}_call(O,j){for(let A=0;A<O.length;++A){const _e=j[A];for(const Me of this.bad_words_ids){let Ce=!0;for(let ke=1;ke<=Me.length-1&&Me.length<O[ke].length;++ke)if(Me.at(-ke-1)!==Number(O[ke].at(-ke))){Ce=!1;break}Ce&&(_e[Me.at(-1)]=-1/0)}}return j}}class te extends we{constructor(O){if(super(),O<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${O}.`);this.guidance_scale=O}_call(O,j){if(j.dims[0]!==2*O.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${j.dims[0]} for the logits and ${O.length} for the input ids.`);const A=O.length,_e=j.slice([0,A],null),Me=j.slice([A,j.dims[0]],null);for(let Ce=0;Ce<Me.data.length;++Ce)Me.data[Ce]+=(_e.data[Ce]-Me.data[Ce])*this.guidance_scale;return Me}}class G extends be{constructor(O){super(),this.temperature=O}_call(O,j){const A=j.data;for(let _e=0;_e<A.length;++_e)A[_e]/=this.temperature;return j}}class re extends be{constructor(O,{filter_value:j=-1/0,min_tokens_to_keep:A=1}={}){if(super(),O<0||O>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${O}`);if(!Number.isInteger(A)||A<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${A}`);this.top_p=O,this.filter_value=j,this.min_tokens_to_keep=A}}class pe extends be{constructor(O,{filter_value:j=-1/0,min_tokens_to_keep:A=1}={}){if(super(),!Number.isInteger(O)||O<0)throw new Error(`\`top_k\` must be a positive integer, but is ${O}`);this.top_k=Math.max(O,A),this.filter_value=j}}},"./src/generation/logits_sampler.js":(xt,me,l)=>{l.r(me),l.d(me,{LogitsSampler:()=>be});var x=l("./src/utils/generic.js"),H=l("./src/utils/tensor.js"),we=l("./src/utils/maths.js");l("./src/generation/configuration_utils.js");class be extends x.Callable{constructor(P){super(),this.generation_config=P}async _call(P){return this.sample(P)}async sample(P){throw Error("sample should be implemented in subclasses.")}getLogits(P,ee){let Z=P.dims.at(-1),ie=P.data;if(ee===-1)ie=ie.slice(-Z);else{let ae=ee*Z;ie=ie.slice(ae,ae+Z)}return ie}randomSelect(P){let ee=0;for(let ie=0;ie<P.length;++ie)ee+=P[ie];let Z=Math.random()*ee;for(let ie=0;ie<P.length;++ie)if(Z-=P[ie],Z<=0)return ie;return 0}static getSampler(P){if(P.do_sample)return new B(P);if(P.num_beams>1)return new $(P);if(P.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${P.num_return_sequences}.`);return new xe(P)}}class xe extends be{async sample(P){const ee=(0,we.max)(P.data)[1];return[[BigInt(ee),0]]}}class B extends be{async sample(P){let ee=P.dims.at(-1);this.generation_config.top_k>0&&(ee=Math.min(this.generation_config.top_k,ee));const[Z,ie]=await(0,H.topk)(P,ee),ae=(0,we.softmax)(Z.data);return Array.from({length:this.generation_config.num_beams},()=>{const z=this.randomSelect(ae);return[ie.data[z],Math.log(ae[z])]})}}class $ extends be{async sample(P){let ee=P.dims.at(-1);this.generation_config.top_k>0&&(ee=Math.min(this.generation_config.top_k,ee));const[Z,ie]=await(0,H.topk)(P,ee),ae=(0,we.softmax)(Z.data);return Array.from({length:this.generation_config.num_beams},(z,te)=>[ie.data[te],Math.log(ae[te])])}}},"./src/generation/stopping_criteria.js":(xt,me,l)=>{l.r(me),l.d(me,{EosTokenCriteria:()=>xe,InterruptableStoppingCriteria:()=>B,MaxLengthCriteria:()=>be,StoppingCriteria:()=>H,StoppingCriteriaList:()=>we});var x=l("./src/utils/generic.js");class H extends x.Callable{_call(N,P){throw Error("StoppingCriteria needs to be subclassed")}}class we extends x.Callable{constructor(){super(),this.criteria=[]}push(N){this.criteria.push(N)}extend(N){N instanceof we?N=N.criteria:N instanceof H&&(N=[N]),this.criteria.push(...N)}_call(N,P){const ee=new Array(N.length).fill(!1);for(const Z of this.criteria){const ie=Z(N,P);for(let ae=0;ae<ee.length;++ae)ee[ae]||(ee[ae]=ie[ae])}return ee}[Symbol.iterator](){return this.criteria.values()}}class be extends H{constructor(N,P=null){super(),this.max_length=N,this.max_position_embeddings=P}_call(N){return N.map(P=>P.length>=this.max_length)}}class xe extends H{constructor(N){super(),Array.isArray(N)||(N=[N]),this.eos_token_id=N}_call(N,P){return N.map(ee=>{const Z=ee.at(-1);return this.eos_token_id.some(ie=>Z==ie)})}}class B extends H{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(N,P){return new Array(N.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(xt,me,l)=>{l.r(me),l.d(me,{BaseStreamer:()=>be,TextStreamer:()=>B,WhisperTextStreamer:()=>$});var x=l("./src/utils/core.js"),H=l("./src/tokenizers.js"),we=l("./src/env.js");class be{put(P){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const xe=we.apis.IS_PROCESS_AVAILABLE?N=>process.stdout.write(N):N=>console.log(N);class B extends be{constructor(P,{skip_prompt:ee=!1,callback_function:Z=null,token_callback_function:ie=null,decode_kwargs:ae={},...z}={}){super(),this.tokenizer=P,this.skip_prompt=ee,this.callback_function=Z??xe,this.token_callback_function=ie,this.decode_kwargs={...ae,...z},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(P){var ae;if(P.length>1)throw Error("TextStreamer only supports batch size of 1");const ee=P[0];if((ae=this.token_callback_function)==null||ae.call(this,ee),this.skip_prompt&&this.next_tokens_are_prompt){this.next_tokens_are_prompt=!1;return}this.token_cache=(0,x.mergeArrays)(this.token_cache,ee);const Z=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let ie;Z.endsWith(`
`)?(ie=Z.slice(this.print_len),this.token_cache=[],this.print_len=0):Z.length>0&&(0,H.is_chinese_char)(Z.charCodeAt(Z.length-1))?(ie=Z.slice(this.print_len),this.print_len+=ie.length):(ie=Z.slice(this.print_len,Z.lastIndexOf(" ")+1),this.print_len+=ie.length),this.on_finalized_text(ie,!1)}end(){let P;this.token_cache.length>0?(P=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):P="",this.next_tokens_are_prompt=!0,this.on_finalized_text(P,!0)}on_finalized_text(P,ee){var Z,ie;P.length>0&&((Z=this.callback_function)==null||Z.call(this,P)),ee&&this.callback_function===xe&&we.apis.IS_PROCESS_AVAILABLE&&((ie=this.callback_function)==null||ie.call(this,`
`))}}class $ extends B{constructor(P,{skip_prompt:ee=!1,callback_function:Z=null,token_callback_function:ie=null,on_chunk_start:ae=null,on_chunk_end:z=null,on_finalize:te=null,time_precision:G=.02,skip_special_tokens:re=!0,decode_kwargs:pe={}}={}){super(P,{skip_prompt:ee,callback_function:Z,token_callback_function:ie,decode_kwargs:{skip_special_tokens:re,...pe}}),this.timestamp_begin=P.timestamp_begin,this.on_chunk_start=ae,this.on_chunk_end=z,this.on_finalize=te,this.time_precision=G,this.waiting_for_timestamp=!1}put(P){var Z,ie;if(P.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const ee=P[0];if(ee.length===1){const ae=Number(ee[0])-this.timestamp_begin;if(ae>=0){const z=ae*this.time_precision;this.waiting_for_timestamp?(Z=this.on_chunk_end)==null||Z.call(this,z):(ie=this.on_chunk_start)==null||ie.call(this,z),this.waiting_for_timestamp=!this.waiting_for_timestamp,P=[[]]}}return super.put(P)}end(){var P;super.end(),(P=this.on_finalize)==null||P.call(this)}}},"./src/models.js":(xt,me,l)=>{l.r(me),l.d(me,{ASTForAudioClassification:()=>Ws,ASTModel:()=>Ot,ASTPreTrainedModel:()=>_n,AlbertForMaskedLM:()=>Qt,AlbertForQuestionAnswering:()=>as,AlbertForSequenceClassification:()=>is,AlbertModel:()=>Kn,AlbertPreTrainedModel:()=>On,AutoModel:()=>va,AutoModelForAudioClassification:()=>vu,AutoModelForAudioFrameClassification:()=>xu,AutoModelForCTC:()=>$a,AutoModelForCausalLM:()=>Ta,AutoModelForDepthEstimation:()=>ad,AutoModelForDocumentQuestionAnswering:()=>Tu,AutoModelForImageClassification:()=>gu,AutoModelForImageFeatureExtraction:()=>$u,AutoModelForImageMatting:()=>Cu,AutoModelForImageSegmentation:()=>wu,AutoModelForImageToImage:()=>Eu,AutoModelForMaskGeneration:()=>Mu,AutoModelForMaskedLM:()=>mu,AutoModelForObjectDetection:()=>Ea,AutoModelForQuestionAnswering:()=>_u,AutoModelForSemanticSegmentation:()=>yu,AutoModelForSeq2SeqLM:()=>pu,AutoModelForSequenceClassification:()=>cu,AutoModelForSpeechSeq2Seq:()=>Is,AutoModelForTextToSpectrogram:()=>hu,AutoModelForTextToWaveform:()=>fu,AutoModelForTokenClassification:()=>xa,AutoModelForVision2Seq:()=>Ca,AutoModelForXVector:()=>id,AutoModelForZeroShotObjectDetection:()=>bu,BartForConditionalGeneration:()=>_,BartForSequenceClassification:()=>F,BartModel:()=>ve,BartPretrainedModel:()=>fn,BaseModelOutput:()=>ct,BeitForImageClassification:()=>Ao,BeitModel:()=>Po,BeitPreTrainedModel:()=>Vi,BertForMaskedLM:()=>Re,BertForQuestionAnswering:()=>ze,BertForSequenceClassification:()=>st,BertForTokenClassification:()=>Tt,BertModel:()=>ot,BertPreTrainedModel:()=>rt,BlenderbotForConditionalGeneration:()=>kt,BlenderbotModel:()=>wt,BlenderbotPreTrainedModel:()=>yt,BlenderbotSmallForConditionalGeneration:()=>sr,BlenderbotSmallModel:()=>Er,BlenderbotSmallPreTrainedModel:()=>Jt,BloomForCausalLM:()=>Ru,BloomModel:()=>Ii,BloomPreTrainedModel:()=>Ai,CLIPModel:()=>La,CLIPPreTrainedModel:()=>Qn,CLIPSegForImageSegmentation:()=>qa,CLIPSegModel:()=>Ga,CLIPSegPreTrainedModel:()=>gi,CLIPTextModel:()=>zn,CLIPTextModelWithProjection:()=>Ra,CLIPVisionModel:()=>Lu,CLIPVisionModelWithProjection:()=>ds,CamembertForMaskedLM:()=>ye,CamembertForQuestionAnswering:()=>Ne,CamembertForSequenceClassification:()=>Be,CamembertForTokenClassification:()=>Ae,CamembertModel:()=>X,CamembertPreTrainedModel:()=>E,CausalLMOutput:()=>Jn,CausalLMOutputWithPast:()=>Ad,ChineseCLIPModel:()=>Wa,ChineseCLIPPreTrainedModel:()=>Ua,ClapAudioModelWithProjection:()=>Fl,ClapModel:()=>Il,ClapPreTrainedModel:()=>ni,ClapTextModelWithProjection:()=>Hu,CodeGenForCausalLM:()=>vn,CodeGenModel:()=>vi,CodeGenPreTrainedModel:()=>Es,CohereForCausalLM:()=>io,CohereModel:()=>so,CoherePreTrainedModel:()=>Ti,ConvBertForMaskedLM:()=>M,ConvBertForQuestionAnswering:()=>Q,ConvBertForSequenceClassification:()=>W,ConvBertForTokenClassification:()=>S,ConvBertModel:()=>vt,ConvBertPreTrainedModel:()=>gt,ConvNextForImageClassification:()=>rl,ConvNextModel:()=>Vu,ConvNextPreTrainedModel:()=>Qi,ConvNextV2ForImageClassification:()=>nl,ConvNextV2Model:()=>Tn,ConvNextV2PreTrainedModel:()=>Yi,DPTForDepthEstimation:()=>Qo,DPTModel:()=>Xo,DPTPreTrainedModel:()=>Ks,DebertaForMaskedLM:()=>Mt,DebertaForQuestionAnswering:()=>Rt,DebertaForSequenceClassification:()=>ht,DebertaForTokenClassification:()=>Ct,DebertaModel:()=>nt,DebertaPreTrainedModel:()=>ut,DebertaV2ForMaskedLM:()=>Nt,DebertaV2ForQuestionAnswering:()=>er,DebertaV2ForSequenceClassification:()=>Ht,DebertaV2ForTokenClassification:()=>Xt,DebertaV2Model:()=>Vt,DebertaV2PreTrainedModel:()=>Qe,DeiTForImageClassification:()=>Uo,DeiTModel:()=>Vo,DeiTPreTrainedModel:()=>Wi,DepthAnythingForDepthEstimation:()=>Zo,DepthAnythingPreTrainedModel:()=>Yo,DetrForObjectDetection:()=>Fo,DetrForSegmentation:()=>Oo,DetrModel:()=>Io,DetrObjectDetectionOutput:()=>cs,DetrPreTrainedModel:()=>qs,DetrSegmentationOutput:()=>zo,Dinov2ForImageClassification:()=>il,Dinov2Model:()=>sl,Dinov2PreTrainedModel:()=>Zi,DistilBertForMaskedLM:()=>$t,DistilBertForQuestionAnswering:()=>Ze,DistilBertForSequenceClassification:()=>Ur,DistilBertForTokenClassification:()=>Cr,DistilBertModel:()=>Tr,DistilBertPreTrainedModel:()=>Wt,DonutSwinModel:()=>tl,DonutSwinPreTrainedModel:()=>el,EfficientNetForImageClassification:()=>Rl,EfficientNetModel:()=>Ll,EfficientNetPreTrainedModel:()=>fa,ElectraForMaskedLM:()=>et,ElectraForQuestionAnswering:()=>Se,ElectraForSequenceClassification:()=>At,ElectraForTokenClassification:()=>mt,ElectraModel:()=>Ye,ElectraPreTrainedModel:()=>fe,EsmForMaskedLM:()=>jn,EsmForSequenceClassification:()=>An,EsmForTokenClassification:()=>Rr,EsmModel:()=>Hr,EsmPreTrainedModel:()=>Bt,FalconForCausalLM:()=>Al,FalconModel:()=>da,FalconPreTrainedModel:()=>ua,FastViTForImageClassification:()=>vo,FastViTModel:()=>Mo,FastViTPreTrainedModel:()=>Bi,Florence2ForConditionalGeneration:()=>mi,Florence2PreTrainedModel:()=>Ba,GLPNForDepthEstimation:()=>Xi,GLPNModel:()=>Jo,GLPNPreTrainedModel:()=>Ki,GPT2LMHeadModel:()=>Ha,GPT2Model:()=>bn,GPT2PreTrainedModel:()=>wi,GPTBigCodeForCausalLM:()=>to,GPTBigCodeModel:()=>Mn,GPTBigCodePreTrainedModel:()=>eo,GPTJForCausalLM:()=>Ja,GPTJModel:()=>Za,GPTJPreTrainedModel:()=>Mi,GPTNeoForCausalLM:()=>Xa,GPTNeoModel:()=>Ka,GPTNeoPreTrainedModel:()=>yi,GPTNeoXForCausalLM:()=>Ya,GPTNeoXModel:()=>Qa,GPTNeoXPreTrainedModel:()=>bi,Gemma2ForCausalLM:()=>lo,Gemma2Model:()=>xn,Gemma2PreTrainedModel:()=>Ei,GemmaForCausalLM:()=>oo,GemmaModel:()=>ao,GemmaPreTrainedModel:()=>Ci,HubertForCTC:()=>ks,HubertForSequenceClassification:()=>Ml,HubertModel:()=>aa,HubertPreTrainedModel:()=>Gu,ImageMattingOutput:()=>Su,LlamaForCausalLM:()=>no,LlamaModel:()=>ro,LlamaPreTrainedModel:()=>xi,LlavaForConditionalGeneration:()=>us,LlavaPreTrainedModel:()=>Da,LongT5ForConditionalGeneration:()=>Ts,LongT5Model:()=>xs,LongT5PreTrainedModel:()=>os,M2M100ForConditionalGeneration:()=>fl,M2M100Model:()=>hl,M2M100PreTrainedModel:()=>ta,MBartForCausalLM:()=>_t,MBartForConditionalGeneration:()=>ue,MBartForSequenceClassification:()=>Ie,MBartModel:()=>le,MBartPreTrainedModel:()=>Y,MPNetForMaskedLM:()=>gs,MPNetForQuestionAnswering:()=>bs,MPNetForSequenceClassification:()=>ws,MPNetForTokenClassification:()=>ys,MPNetModel:()=>Vs,MPNetPreTrainedModel:()=>In,MT5ForConditionalGeneration:()=>Br,MT5Model:()=>Cs,MT5PreTrainedModel:()=>ls,MarianMTModel:()=>pl,MarianModel:()=>cl,MarianPreTrainedModel:()=>ea,MaskedLMOutput:()=>Zr,MistralForCausalLM:()=>ti,MistralModel:()=>Sl,MistralPreTrainedModel:()=>Ps,MobileBertForMaskedLM:()=>$n,MobileBertForQuestionAnswering:()=>Vn,MobileBertForSequenceClassification:()=>Pr,MobileBertModel:()=>jr,MobileBertPreTrainedModel:()=>Jr,MobileNetV1ForImageClassification:()=>Ul,MobileNetV1Model:()=>Vl,MobileNetV1PreTrainedModel:()=>jl,MobileNetV2ForImageClassification:()=>Gl,MobileNetV2Model:()=>Wl,MobileNetV2PreTrainedModel:()=>_a,MobileNetV3ForImageClassification:()=>As,MobileNetV3Model:()=>ii,MobileNetV3PreTrainedModel:()=>ql,MobileNetV4ForImageClassification:()=>Kl,MobileNetV4Model:()=>Hl,MobileNetV4PreTrainedModel:()=>ai,MobileViTForImageClassification:()=>ju,MobileViTModel:()=>To,MobileViTPreTrainedModel:()=>Li,MobileViTV2ForImageClassification:()=>Co,MobileViTV2Model:()=>wr,MobileViTV2PreTrainedModel:()=>Ri,ModelOutput:()=>Ke,Moondream1ForConditionalGeneration:()=>or,MptForCausalLM:()=>wo,MptModel:()=>go,MptPreTrainedModel:()=>Fi,MusicgenForCausalLM:()=>Qu,MusicgenForConditionalGeneration:()=>ma,MusicgenModel:()=>Xu,MusicgenPreTrainedModel:()=>Nl,NomicBertModel:()=>Ee,NomicBertPreTrainedModel:()=>se,OPTForCausalLM:()=>yo,OPTModel:()=>$s,OPTPreTrainedModel:()=>Oi,OpenELMForCausalLM:()=>co,OpenELMModel:()=>uo,OpenELMPreTrainedModel:()=>$i,OwlViTForObjectDetection:()=>$o,OwlViTModel:()=>Eo,OwlViTPreTrainedModel:()=>Ni,Owlv2ForObjectDetection:()=>ko,Owlv2Model:()=>So,Owlv2PreTrainedModel:()=>ji,Phi3ForCausalLM:()=>_o,Phi3Model:()=>Pi,Phi3PreTrainedModel:()=>Gs,PhiForCausalLM:()=>mo,PhiModel:()=>fo,PhiPreTrainedModel:()=>ki,PreTrainedModel:()=>ne,PretrainedMixin:()=>Ir,PyAnnoteForAudioFrameClassification:()=>na,PyAnnoteModel:()=>tn,PyAnnotePreTrainedModel:()=>Dn,QuestionAnsweringModelOutput:()=>rn,Qwen2ForCausalLM:()=>ho,Qwen2Model:()=>po,Qwen2PreTrainedModel:()=>Si,RTDetrForObjectDetection:()=>Bo,RTDetrModel:()=>Do,RTDetrObjectDetectionOutput:()=>Lo,RTDetrPreTrainedModel:()=>Ss,ResNetForImageClassification:()=>Go,ResNetModel:()=>Wo,ResNetPreTrainedModel:()=>Gi,RoFormerForMaskedLM:()=>Ve,RoFormerForQuestionAnswering:()=>ft,RoFormerForSequenceClassification:()=>Xe,RoFormerForTokenClassification:()=>lt,RoFormerModel:()=>qe,RoFormerPreTrainedModel:()=>je,RobertaForMaskedLM:()=>an,RobertaForQuestionAnswering:()=>gn,RobertaForSequenceClassification:()=>Yr,RobertaForTokenClassification:()=>He,RobertaModel:()=>pr,RobertaPreTrainedModel:()=>Gt,SamImageSegmentationOutput:()=>Uu,SamModel:()=>dl,SamPreTrainedModel:()=>ul,SegformerForImageClassification:()=>zl,SegformerForSemanticSegmentation:()=>pa,SegformerModel:()=>Ku,SegformerPreTrainedModel:()=>si,Seq2SeqLMOutput:()=>od,SequenceClassifierOutput:()=>ur,SiglipModel:()=>Na,SiglipPreTrainedModel:()=>_i,SiglipTextModel:()=>ja,SiglipVisionModel:()=>Va,SpeechT5ForSpeechToText:()=>la,SpeechT5ForTextToSpeech:()=>Cl,SpeechT5HifiGan:()=>El,SpeechT5Model:()=>kd,SpeechT5PreTrainedModel:()=>Js,SqueezeBertForMaskedLM:()=>ss,SqueezeBertForQuestionAnswering:()=>Fn,SqueezeBertForSequenceClassification:()=>Sn,SqueezeBertModel:()=>Us,SqueezeBertPreTrainedModel:()=>Un,StableLmForCausalLM:()=>Bl,StableLmModel:()=>Dl,StableLmPreTrainedModel:()=>ha,Starcoder2ForCausalLM:()=>Pl,Starcoder2Model:()=>kl,Starcoder2PreTrainedModel:()=>ri,Swin2SRForImageSuperResolution:()=>Hi,Swin2SRModel:()=>Ko,Swin2SRPreTrainedModel:()=>Hs,SwinForImageClassification:()=>Ho,SwinModel:()=>qo,SwinPreTrainedModel:()=>qi,T5ForConditionalGeneration:()=>vs,T5Model:()=>Ms,T5PreTrainedModel:()=>Xn,TableTransformerForObjectDetection:()=>No,TableTransformerModel:()=>Ro,TableTransformerObjectDetectionOutput:()=>jo,TableTransformerPreTrainedModel:()=>Ui,TokenClassifierOutput:()=>Qr,TrOCRForCausalLM:()=>ei,TrOCRPreTrainedModel:()=>$l,UniSpeechForCTC:()=>_l,UniSpeechForSequenceClassification:()=>Ys,UniSpeechModel:()=>ml,UniSpeechPreTrainedModel:()=>Qs,UniSpeechSatForAudioFrameClassification:()=>ia,UniSpeechSatForCTC:()=>Zs,UniSpeechSatForSequenceClassification:()=>wl,UniSpeechSatModel:()=>gl,UniSpeechSatPreTrainedModel:()=>ps,ViTForImageClassification:()=>bo,ViTModel:()=>Di,ViTPreTrainedModel:()=>zi,VisionEncoderDecoderModel:()=>fi,VitMatteForImageMatting:()=>xo,VitMattePreTrainedModel:()=>Nu,VitsModel:()=>Ol,VitsModelOutput:()=>ku,VitsPreTrainedModel:()=>ca,Wav2Vec2BertForCTC:()=>bl,Wav2Vec2BertForSequenceClassification:()=>Wu,Wav2Vec2BertModel:()=>yl,Wav2Vec2BertPreTrainedModel:()=>hs,Wav2Vec2ForAudioFrameClassification:()=>ra,Wav2Vec2ForCTC:()=>Gn,Wav2Vec2ForSequenceClassification:()=>qn,Wav2Vec2Model:()=>Wn,Wav2Vec2PreTrainedModel:()=>Yn,WavLMForAudioFrameClassification:()=>oa,WavLMForCTC:()=>xl,WavLMForSequenceClassification:()=>Tl,WavLMForXVector:()=>qu,WavLMModel:()=>vl,WavLMPreTrainedModel:()=>Zn,WeSpeakerResNetModel:()=>sa,WeSpeakerResNetPreTrainedModel:()=>Xs,WhisperForConditionalGeneration:()=>hi,WhisperModel:()=>Ut,WhisperPreTrainedModel:()=>it,XLMForQuestionAnswering:()=>en,XLMForSequenceClassification:()=>Yt,XLMForTokenClassification:()=>mn,XLMModel:()=>Kr,XLMPreTrainedModel:()=>gr,XLMRobertaForMaskedLM:()=>St,XLMRobertaForQuestionAnswering:()=>Vr,XLMRobertaForSequenceClassification:()=>mr,XLMRobertaForTokenClassification:()=>Ar,XLMRobertaModel:()=>Mr,XLMRobertaPreTrainedModel:()=>br,XLMWithLMHeadModel:()=>dn,XVectorOutput:()=>ld,YolosForObjectDetection:()=>ol,YolosModel:()=>al,YolosObjectDetectionOutput:()=>ll,YolosPreTrainedModel:()=>Ji});var x=l("./src/configs.js"),H=l("./src/backends/onnx.js"),we=l("./src/utils/dtypes.js"),be=l("./src/utils/generic.js"),xe=l("./src/utils/core.js"),B=l("./src/utils/hub.js"),$=l("./src/generation/logits_process.js"),N=l("./src/generation/configuration_utils.js"),P=l("./src/utils/tensor.js"),ee=l("./src/utils/maths.js"),Z=l("./src/generation/stopping_criteria.js"),ie=l("./src/generation/logits_sampler.js"),ae=l("./src/env.js"),z=l("./src/models/whisper/generation_whisper.js"),te=l("./src/models/whisper/common_whisper.js");const G={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7},re=new Map,pe=new Map,L=new Map;async function O(m,g,T){let K=T.device;K&&typeof K!="string"&&(K.hasOwnProperty(g)?K=K[g]:(console.warn(`device not specified for "${g}". Using the default device.`),K=null));const Fe=(0,H.deviceToExecutionProviders)(K);let Pe=T.dtype;if(typeof Pe!="string"&&(Pe&&Pe.hasOwnProperty(g)?Pe=Pe[g]:(Pe=we.DEFAULT_DEVICE_DTYPE_MAPPING[Fe[0]],console.warn(`dtype not specified for "${g}". Using the default dtype for this device (${Pe}).`))),we.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(Pe)){if(Pe===we.DATA_TYPES.fp16&&K==="webgpu"&&!await(0,we.isWebGpuFp16Supported)())throw new Error(`The device (${K}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${Pe}. Should be one of: ${Object.keys(we.DATA_TYPES).join(", ")}`);const pt=we.DEFAULT_DTYPE_SUFFIX_MAPPING[Pe],Pt=`${T.subfolder??""}/${g}${pt}.onnx`,It={...T.session_options};It.executionProviders??(It.executionProviders=Fe);const ir=(0,B.getModelFile)(m,Pt,!0,T);let hr=[];if(T.use_external_data_format&&(T.use_external_data_format===!0||typeof T.use_external_data_format=="object"&&T.use_external_data_format.hasOwnProperty(g)&&T.use_external_data_format[g]===!0)){if(ae.apis.IS_NODE_ENV)throw new Error("External data format is not yet supported in Node.js");const tr=`${g}${pt}.onnx_data`,lr=`${T.subfolder??""}/${tr}`;hr.push(new Promise(async(vr,xr)=>{const yr=await(0,B.getModelFile)(m,lr,!0,T);vr({path:tr,data:yr})}))}else It.externalData!==void 0&&(hr=It.externalData.map(async tr=>{if(typeof tr.data=="string"){const lr=await(0,B.getModelFile)(m,tr.data,!0,T);return{...tr,data:lr}}return tr}));if(hr.length>0&&(It.externalData=await Promise.all(hr)),K==="webgpu"){const tr=(0,x.getKeyValueShapes)(T.config,{prefix:"present"});if(Object.keys(tr).length>0&&!(0,H.isONNXProxy)()){const lr={};for(const vr in tr)lr[vr]="gpu-buffer";It.preferredOutputLocation=lr}}return{buffer:await ir,session_options:It}}async function j(m,g,T){return Object.fromEntries(await Promise.all(Object.keys(g).map(async K=>{const{buffer:Fe,session_options:Pe}=await O(m,g[K],T),pt=await(0,H.createInferenceSession)(Fe,Pe);return[K,pt]})))}function A(m,g){const T=Object.create(null),K=[];for(const pt of m.inputNames){const Pt=g[pt];if(!(Pt instanceof P.Tensor)){K.push(pt);continue}T[pt]=(0,H.isONNXProxy)()?Pt.clone():Pt}if(K.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${K.join(", ")}.`);const Fe=Object.keys(g).length,Pe=m.inputNames.length;if(Fe>Pe){let pt=Object.keys(g).filter(Pt=>!m.inputNames.includes(Pt));console.warn(`WARNING: Too many inputs were provided (${Fe} > ${Pe}). The following inputs will be ignored: "${pt.join(", ")}".`)}return T}async function _e(m,g){const T=A(m,g);try{const K=Object.fromEntries(Object.entries(T).map(([Pe,pt])=>[Pe,pt.ort_tensor]));let Fe=await m.run(K);return Fe=Me(Fe),Fe}catch(K){throw console.error(`An error occurred during model execution: "${K}".`),console.error("Inputs given to model:",T),K}}function Me(m){for(let g in m)(0,H.isONNXTensor)(m[g])?m[g]=new P.Tensor(m[g]):typeof m[g]=="object"&&Me(m[g]);return m}function Ce(m){if(m instanceof P.Tensor)return m;if(m.length===0)throw Error("items must be non-empty");if(Array.isArray(m[0])){if(m.some(g=>g.length!==m[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new P.Tensor("int64",BigInt64Array.from(m.flat().map(g=>BigInt(g))),[m.length,m[0].length])}else return new P.Tensor("int64",BigInt64Array.from(m.map(g=>BigInt(g))),[1,m.length])}function ke(m){return new P.Tensor("bool",[m],[1])}async function De(m,g){let{encoder_outputs:T,input_ids:K,decoder_input_ids:Fe,...Pe}=g;if(!T){const Pt=(0,xe.pick)(g,m.sessions.model.inputNames);T=(await Je(m,Pt)).last_hidden_state}return Pe.input_ids=Fe,Pe.encoder_hidden_states=T,m.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(Pe.encoder_attention_mask=g.attention_mask),await Ue(m,Pe,!0)}async function Je(m,g){const T=m.sessions.model,K=(0,xe.pick)(g,T.inputNames);if(T.inputNames.includes("inputs_embeds")&&!K.inputs_embeds){if(!g.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");K.inputs_embeds=await m.encode_text({input_ids:g.input_ids})}return T.inputNames.includes("token_type_ids")&&!K.token_type_ids&&(K.token_type_ids=new P.Tensor("int64",new BigInt64Array(K.input_ids.data.length),K.input_ids.dims)),await _e(T,K)}async function Ue(m,g,T=!1){const K=m.sessions[T?"decoder_model_merged":"model"],{past_key_values:Fe,...Pe}=g;K.inputNames.includes("use_cache_branch")&&(Pe.use_cache_branch=ke(!!Fe)),K.inputNames.includes("position_ids")&&Pe.attention_mask&&!Pe.position_ids&&(Pe.position_ids=ge(Pe,Fe)),m.addPastKeyValues(Pe,Fe);const pt=(0,xe.pick)(Pe,K.inputNames);return await _e(K,pt)}async function bt(m,{input_ids:g=null,attention_mask:T=null,pixel_values:K=null,position_ids:Fe=null,inputs_embeds:Pe=null,past_key_values:pt=null,generation_config:Pt=null,logits_processor:It=null,...ir}){if(!Pe){if(Pe=await m.encode_text({input_ids:g}),K&&g.dims[1]!==1){const $r=await m.encode_image({pixel_values:K});({inputs_embeds:Pe,attention_mask:T}=m._merge_input_ids_with_image_features({image_features:$r,inputs_embeds:Pe,input_ids:g,attention_mask:T}))}else if(pt&&K&&g.dims[1]===1){const $r=g.dims[1],tr=Object.values(pt)[0].dims.at(-2);T=(0,P.cat)([(0,P.ones)([g.dims[0],tr]),T.slice(null,[T.dims[1]-$r,T.dims[1]])],1)}}return await Ue(m,{inputs_embeds:Pe,past_key_values:pt,attention_mask:T,position_ids:Fe,generation_config:Pt,logits_processor:It},!0)}function ge(m,g=null){const{input_ids:T,inputs_embeds:K,attention_mask:Fe}=m,[Pe,pt]=Fe.dims,Pt=new BigInt64Array(Fe.data.length);for(let ir=0;ir<Pe;++ir){const hr=ir*pt;let $r=BigInt(0);for(let tr=0;tr<pt;++tr){const lr=hr+tr;Fe.data[lr]===0n?Pt[lr]=BigInt(1):(Pt[lr]=$r,$r+=Fe.data[lr])}}let It=new P.Tensor("int64",Pt,Fe.dims);if(g){const ir=-(T??K).dims.at(1);It=It.slice(null,[ir,null])}return It}function V(m,g,T,K){if(T.past_key_values){const Fe=Object.values(T.past_key_values)[0].dims.at(-2),{input_ids:Pe,attention_mask:pt}=T;if(!(pt&&pt.dims[1]>Pe.dims[1])){if(Fe<Pe.dims[1])T.input_ids=Pe.slice(null,[Fe,null]);else if(m.config.image_token_index!=null&&Pe.data.some(Pt=>Pt==m.config.image_token_index)){const Pt=m.config.num_image_tokens;if(!Pt)throw new Error("`num_image_tokens` is missing in the model configuration.");const It=Pe.dims[1]-(Fe-Pt);T.input_ids=Pe.slice(null,[-It,null]),T.attention_mask=(0,P.ones)([1,Fe+It])}}}return T}function he(m,g,T,K){return T.past_key_values&&(g=g.map(Fe=>[Fe.at(-1)])),{...T,decoder_input_ids:Ce(g)}}function $e(m,...g){return m.config.is_encoder_decoder?he(m,...g):V(m,...g)}class ne extends be.Callable{constructor(T,K){super();Te(this,"main_input_name","input_ids");Te(this,"forward_params",["input_ids","attention_mask"]);this.config=T,this.sessions=K;const Fe=L.get(this.constructor),Pe=re.get(Fe);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,Pe){case G.DecoderOnly:this.can_generate=!0,this._forward=Ue,this._prepare_inputs_for_generation=V;break;case G.Seq2Seq:case G.Vision2Seq:case G.Musicgen:this.can_generate=!0,this._forward=De,this._prepare_inputs_for_generation=he;break;case G.EncoderDecoder:this._forward=De;break;case G.ImageTextToText:this.can_generate=!0,this._forward=bt,this._prepare_inputs_for_generation=$e;break;default:this._forward=Je;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){var K;const T=[];for(const Fe of Object.values(this.sessions))(K=Fe==null?void 0:Fe.handler)!=null&&K.dispose&&T.push(Fe.handler.dispose());return await Promise.all(T)}static async from_pretrained(T,{progress_callback:K=null,config:Fe=null,cache_dir:Pe=null,local_files_only:pt=!1,revision:Pt="main",model_file_name:It=null,subfolder:ir="onnx",device:hr=null,dtype:$r=null,use_external_data_format:tr=null,session_options:lr={}}={}){let vr={progress_callback:K,config:Fe,cache_dir:Pe,local_files_only:pt,revision:Pt,model_file_name:It,subfolder:ir,device:hr,dtype:$r,use_external_data_format:tr,session_options:lr};const xr=L.get(this),yr=re.get(xr);Fe=vr.config=await x.AutoConfig.from_pretrained(T,vr);let Dr;if(yr===G.DecoderOnly)Dr=await Promise.all([j(T,{model:vr.model_file_name??"model"},vr),(0,B.getModelJSON)(T,"generation_config.json",!1,vr)]);else if(yr===G.Seq2Seq||yr===G.Vision2Seq)Dr=await Promise.all([j(T,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},vr),(0,B.getModelJSON)(T,"generation_config.json",!1,vr)]);else if(yr===G.MaskGeneration)Dr=await Promise.all([j(T,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},vr)]);else if(yr===G.EncoderDecoder)Dr=await Promise.all([j(T,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},vr)]);else if(yr===G.ImageTextToText){const wn={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};Fe.is_encoder_decoder&&(wn.model="encoder_model"),Dr=await Promise.all([j(T,wn,vr),(0,B.getModelJSON)(T,"generation_config.json",!1,vr)])}else yr===G.Musicgen?Dr=await Promise.all([j(T,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},vr),(0,B.getModelJSON)(T,"generation_config.json",!1,vr)]):(yr!==G.EncoderOnly&&console.warn(`Model type for '${xr??(Fe==null?void 0:Fe.model_type)}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`),Dr=await Promise.all([j(T,{model:vr.model_file_name??"model"},vr)]));return new this(Fe,...Dr)}async _call(T){return await this.forward(T)}async forward(T){return await this._forward(this,T)}_get_logits_warper(T){const K=new $.LogitsProcessorList;return T.temperature!==null&&T.temperature!==1&&K.push(new $.TemperatureLogitsWarper(T.temperature)),T.top_k!==null&&T.top_k!==0&&K.push(new $.TopKLogitsWarper(T.top_k)),T.top_p!==null&&T.top_p<1&&K.push(new $.TopPLogitsWarper(T.top_p)),K}_get_logits_processor(T,K,Fe=null){const Pe=new $.LogitsProcessorList;if(T.repetition_penalty!==null&&T.repetition_penalty!==1&&Pe.push(new $.RepetitionPenaltyLogitsProcessor(T.repetition_penalty)),T.no_repeat_ngram_size!==null&&T.no_repeat_ngram_size>0&&Pe.push(new $.NoRepeatNGramLogitsProcessor(T.no_repeat_ngram_size)),T.bad_words_ids!==null&&Pe.push(new $.NoBadWordsLogitsProcessor(T.bad_words_ids,T.eos_token_id)),T.min_length!==null&&T.eos_token_id!==null&&T.min_length>0&&Pe.push(new $.MinLengthLogitsProcessor(T.min_length,T.eos_token_id)),T.min_new_tokens!==null&&T.eos_token_id!==null&&T.min_new_tokens>0&&Pe.push(new $.MinNewTokensLengthLogitsProcessor(K,T.min_new_tokens,T.eos_token_id)),T.forced_bos_token_id!==null&&Pe.push(new $.ForcedBOSTokenLogitsProcessor(T.forced_bos_token_id)),T.forced_eos_token_id!==null&&Pe.push(new $.ForcedEOSTokenLogitsProcessor(T.max_length,T.forced_eos_token_id)),T.begin_suppress_tokens!==null){const pt=K>1||T.forced_bos_token_id===null?K:K+1;Pe.push(new $.SuppressTokensAtBeginLogitsProcessor(T.begin_suppress_tokens,pt))}return T.guidance_scale!==null&&T.guidance_scale>1&&Pe.push(new $.ClassifierFreeGuidanceLogitsProcessor(T.guidance_scale)),Fe!==null&&Pe.extend(Fe),Pe}_prepare_generation_config(T,K,Fe=N.GenerationConfig){const Pe={...this.config};for(const Pt of["decoder","generator","text_config"])Pt in Pe&&Object.assign(Pe,Pe[Pt]);const pt=new Fe(Pe);return"generation_config"in this&&Object.assign(pt,this.generation_config),T&&Object.assign(pt,T),K&&Object.assign(pt,(0,xe.pick)(K,Object.getOwnPropertyNames(pt))),pt}_get_stopping_criteria(T,K=null){const Fe=new Z.StoppingCriteriaList;return T.max_length!==null&&Fe.push(new Z.MaxLengthCriteria(T.max_length,this.config.max_position_embeddings??null)),T.eos_token_id!==null&&Fe.push(new Z.EosTokenCriteria(T.eos_token_id)),K&&Fe.extend(K),Fe}_validate_model_class(){if(!this.can_generate){const T=[ba,Ma,ya,ga],K=L.get(this.constructor),Fe=new Set,Pe=this.config.model_type;for(const Pt of T){const It=Pt.get(Pe);It&&Fe.add(It[0])}let pt=`The current model class (${K}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw Fe.size>0&&(pt+=` Please use the following class instead: ${[...Fe].join(", ")}`),Error(pt)}}prepare_inputs_for_generation(...T){return this._prepare_inputs_for_generation(this,...T)}_update_model_kwargs_for_generation({generated_input_ids:T,outputs:K,model_inputs:Fe,is_encoder_decoder:Pe}){return Fe.past_key_values=this.getPastKeyValues(K,Fe.past_key_values),Fe.input_ids=new P.Tensor("int64",T.flat(),[T.length,1]),Pe||(Fe.attention_mask=(0,P.cat)([Fe.attention_mask,(0,P.ones)([Fe.attention_mask.dims[0],1])],1)),Fe.position_ids=null,Fe}_prepare_model_inputs({inputs:T,bos_token_id:K,model_kwargs:Fe}){const Pe=(0,xe.pick)(Fe,this.forward_params),pt=this.main_input_name;if(pt in Pe){if(T)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else Pe[pt]=T;return{inputs_tensor:Pe[pt],model_inputs:Pe,model_input_name:pt}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:T,model_inputs:K,model_input_name:Fe,generation_config:Pe}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!K.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:Pt,pixel_values:It,attention_mask:ir,...hr}=K,$r=await this._prepare_inputs_embeds(K);K={...hr,...(0,xe.pick)($r,["inputs_embeds","attention_mask"])}}let{last_hidden_state:pt}=await Je(this,K);if(Pe.guidance_scale!==null&&Pe.guidance_scale>1)pt=(0,P.cat)([pt,(0,P.full_like)(pt,0)],0),"attention_mask"in K&&(K.attention_mask=(0,P.cat)([K.attention_mask,(0,P.zeros_like)(K.attention_mask)],0));else if(K.decoder_input_ids){const Pt=Ce(K.decoder_input_ids).dims[0];if(Pt!==pt.dims[0]){if(pt.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${pt.dims[0]}) than the decoder inputs (${Pt}).`);pt=(0,P.cat)(Array.from({length:Pt},()=>pt),0)}}return K.encoder_outputs=pt,K}_prepare_decoder_input_ids_for_generation({batch_size:T,model_input_name:K,model_kwargs:Fe,decoder_start_token_id:Pe,bos_token_id:pt,generation_config:Pt}){let{decoder_input_ids:It,...ir}=Fe;if(It)Array.isArray(It[0])||(It=Array.from({length:T},()=>It));else if(Pe??(Pe=pt),this.config.model_type==="musicgen")It=Array.from({length:T*this.config.decoder.num_codebooks},()=>[Pe]);else if(Array.isArray(Pe)){if(Pe.length!==T)throw new Error(`\`decoder_start_token_id\` expcted to have length ${T} but got ${Pe.length}`);It=Pe}else It=Array.from({length:T},()=>[Pe]);return It=Ce(It),Fe.decoder_attention_mask=(0,P.ones_like)(It),{input_ids:It,model_inputs:ir}}async generate({inputs:T=null,generation_config:K=null,logits_processor:Fe=null,stopping_criteria:Pe=null,streamer:pt=null,...Pt}){this._validate_model_class(),K=this._prepare_generation_config(K,Pt);let{inputs_tensor:It,model_inputs:ir,model_input_name:hr}=this._prepare_model_inputs({inputs:T,model_kwargs:Pt});const $r=this.config.is_encoder_decoder;$r&&("encoder_outputs"in ir||(ir=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:It,model_inputs:ir,model_input_name:hr,generation_config:K})));let tr;$r?{input_ids:tr,model_inputs:ir}=this._prepare_decoder_input_ids_for_generation({batch_size:ir[hr].dims.at(0),model_input_name:hr,model_kwargs:ir,decoder_start_token_id:K.decoder_start_token_id,bos_token_id:K.bos_token_id,generation_config:K}):tr=ir[hr];let lr=tr.dims.at(-1);K.max_new_tokens!==null&&(K.max_length=lr+K.max_new_tokens);const vr=this._get_logits_processor(K,lr,Fe),xr=this._get_stopping_criteria(K,Pe),yr=ir[hr].dims.at(0),Dr=ie.LogitsSampler.getSampler(K),wn=new Array(yr).fill(0),on=tr.tolist();pt&&pt.put(on);let Bn=null,ln={};for(;;){ir=this.prepare_inputs_for_generation(on,ir,K);const nn=await this.forward(ir);if(K.output_attentions&&K.return_dict_in_generate){const kn=this.getAttentions(nn);for(const fs in kn)fs in ln||(ln[fs]=[]),ln[fs].push(kn[fs])}const Sa=nn.logits.slice(null,-1,null),oi=vr(on,Sa),ka=[];for(let kn=0;kn<oi.dims.at(0);++kn){const fs=oi[kn],ud=await Dr(fs);for(const[Id,dd]of ud){const Pu=BigInt(Id);wn[kn]+=dd,on[kn].push(Pu),ka.push([Pu]);break}}if(pt&&pt.put(ka),xr(on).every(kn=>kn)){K.return_dict_in_generate&&(Bn=this.getPastKeyValues(nn,ir.past_key_values,!1));break}ir=this._update_model_kwargs_for_generation({generated_input_ids:ka,outputs:nn,model_inputs:ir,is_encoder_decoder:$r})}pt&&pt.end();const qr=new P.Tensor("int64",on.flat(),[on.length,on[0].length]);return K.return_dict_in_generate?{sequences:qr,past_key_values:Bn,...ln}:qr}getPastKeyValues(T,K,Fe=!0){const Pe=Object.create(null);for(const pt in T)if(pt.startsWith("present")){const Pt=pt.replace("present","past_key_values");if(K&&pt.includes("encoder"))Pe[Pt]=K[Pt];else{if(Fe&&K){const It=K[Pt];It.location==="gpu-buffer"&&It.dispose()}Pe[Pt]=T[pt]}}return Pe}getAttentions(T){const K={};for(const Fe of["cross_attentions","encoder_attentions","decoder_attentions"])for(const Pe in T)Pe.startsWith(Fe)&&(Fe in K||(K[Fe]=[]),K[Fe].push(T[Pe]));return K}addPastKeyValues(T,K){if(K)Object.assign(T,K);else{const Fe=this.custom_config.kv_cache_dtype??"float32",Pe=Fe==="float16"?new Uint16Array:[],pt=(0,x.getKeyValueShapes)(this.config);for(const Pt in pt)T[Pt]=new P.Tensor(Fe,Pe,pt[Pt])}}async encode_image({pixel_values:T}){const K=(await _e(this.sessions.vision_encoder,{pixel_values:T})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${K.dims[1]}).`),this.config.num_image_tokens=K.dims[1]),K}async encode_text({input_ids:T}){return(await _e(this.sessions.embed_tokens,{input_ids:T})).inputs_embeds}}class Ke{}class ct extends Ke{constructor({last_hidden_state:g,hidden_states:T=null,attentions:K=null}){super(),this.last_hidden_state=g,this.hidden_states=T,this.attentions=K}}class rt extends ne{}class ot extends rt{}class Re extends rt{async _call(g){return new Zr(await super._call(g))}}class st extends rt{async _call(g){return new ur(await super._call(g))}}class Tt extends rt{async _call(g){return new Qr(await super._call(g))}}class ze extends rt{async _call(g){return new rn(await super._call(g))}}class se extends ne{}class Ee extends se{}class je extends ne{}class qe extends je{}class Ve extends je{async _call(g){return new Zr(await super._call(g))}}class Xe extends je{async _call(g){return new ur(await super._call(g))}}class lt extends je{async _call(g){return new Qr(await super._call(g))}}class ft extends je{async _call(g){return new rn(await super._call(g))}}class gt extends ne{}class vt extends gt{}class M extends gt{async _call(g){return new Zr(await super._call(g))}}class W extends gt{async _call(g){return new ur(await super._call(g))}}class S extends gt{async _call(g){return new Qr(await super._call(g))}}class Q extends gt{async _call(g){return new rn(await super._call(g))}}class fe extends ne{}class Ye extends fe{}class et extends fe{async _call(g){return new Zr(await super._call(g))}}class At extends fe{async _call(g){return new ur(await super._call(g))}}class mt extends fe{async _call(g){return new Qr(await super._call(g))}}class Se extends fe{async _call(g){return new rn(await super._call(g))}}class E extends ne{}class X extends E{}class ye extends E{async _call(g){return new Zr(await super._call(g))}}class Be extends E{async _call(g){return new ur(await super._call(g))}}class Ae extends E{async _call(g){return new Qr(await super._call(g))}}class Ne extends E{async _call(g){return new rn(await super._call(g))}}class ut extends ne{}class nt extends ut{}class Mt extends ut{async _call(g){return new Zr(await super._call(g))}}class ht extends ut{async _call(g){return new ur(await super._call(g))}}class Ct extends ut{async _call(g){return new Qr(await super._call(g))}}class Rt extends ut{async _call(g){return new rn(await super._call(g))}}class Qe extends ne{}class Vt extends Qe{}class Nt extends Qe{async _call(g){return new Zr(await super._call(g))}}class Ht extends Qe{async _call(g){return new ur(await super._call(g))}}class Xt extends Qe{async _call(g){return new Qr(await super._call(g))}}class er extends Qe{async _call(g){return new rn(await super._call(g))}}class Wt extends ne{}class Tr extends Wt{}class Ur extends Wt{async _call(g){return new ur(await super._call(g))}}class Cr extends Wt{async _call(g){return new Qr(await super._call(g))}}class Ze extends Wt{async _call(g){return new rn(await super._call(g))}}class $t extends Wt{async _call(g){return new Zr(await super._call(g))}}class Bt extends ne{}class Hr extends Bt{}class jn extends Bt{async _call(g){return new Zr(await super._call(g))}}class An extends Bt{async _call(g){return new ur(await super._call(g))}}class Rr extends Bt{async _call(g){return new Qr(await super._call(g))}}class Jr extends ne{}class jr extends Jr{}class $n extends Jr{async _call(g){return new Zr(await super._call(g))}}class Pr extends Jr{async _call(g){return new ur(await super._call(g))}}class Vn extends Jr{async _call(g){return new rn(await super._call(g))}}class In extends ne{}class Vs extends In{}class gs extends In{async _call(g){return new Zr(await super._call(g))}}class ws extends In{async _call(g){return new ur(await super._call(g))}}class ys extends In{async _call(g){return new Qr(await super._call(g))}}class bs extends In{async _call(g){return new rn(await super._call(g))}}class Un extends ne{}class Us extends Un{}class ss extends Un{async _call(g){return new Zr(await super._call(g))}}class Sn extends Un{async _call(g){return new ur(await super._call(g))}}class Fn extends Un{async _call(g){return new rn(await super._call(g))}}class On extends ne{}class Kn extends On{}class is extends On{async _call(g){return new ur(await super._call(g))}}class as extends On{async _call(g){return new rn(await super._call(g))}}class Qt extends On{async _call(g){return new Zr(await super._call(g))}}class Xn extends ne{constructor(T,K,Fe){super(T,K);Te(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]);this.generation_config=Fe}}class Ms extends Xn{}class vs extends Xn{}class os extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class xs extends os{}class Ts extends os{}class ls extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Cs extends ls{}class Br extends ls{}class fn extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class ve extends fn{}class _ extends fn{}class F extends fn{async _call(g){return new ur(await super._call(g))}}class Y extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class le extends Y{}class ue extends Y{}class Ie extends Y{async _call(g){return new ur(await super._call(g))}}class _t extends Y{}class yt extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class wt extends yt{}class kt extends yt{}class Jt extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Er extends Jt{}class sr extends Jt{}class Gt extends ne{}class pr extends Gt{}class an extends Gt{async _call(g){return new Zr(await super._call(g))}}class Yr extends Gt{async _call(g){return new ur(await super._call(g))}}class He extends Gt{async _call(g){return new Qr(await super._call(g))}}class gn extends Gt{async _call(g){return new rn(await super._call(g))}}class gr extends ne{}class Kr extends gr{}class dn extends gr{async _call(g){return new Zr(await super._call(g))}}class Yt extends gr{async _call(g){return new ur(await super._call(g))}}class mn extends gr{async _call(g){return new Qr(await super._call(g))}}class en extends gr{async _call(g){return new rn(await super._call(g))}}class br extends ne{}class Mr extends br{}class St extends br{async _call(g){return new Zr(await super._call(g))}}class mr extends br{async _call(g){return new ur(await super._call(g))}}class Ar extends br{async _call(g){return new Qr(await super._call(g))}}class Vr extends br{async _call(g){return new rn(await super._call(g))}}class _n extends ne{}class Ot extends _n{}class Ws extends _n{}class it extends ne{constructor(T,K,Fe){super(T,K);Te(this,"requires_attention_mask",!1);Te(this,"main_input_name","input_features");Te(this,"forward_params",["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]);this.generation_config=Fe}}class Ut extends it{}class hi extends it{_prepare_generation_config(g,T){return super._prepare_generation_config(g,T,z.WhisperGenerationConfig)}_retrieve_init_tokens(g){const T=[g.decoder_start_token_id];let K=g.language;const Fe=g.task;if(g.is_multilingual){K||(console.warn("No language specified - defaulting to English (en)."),K="en");const pt=`<|${(0,te.whisper_language_to_code)(K)}|>`;T.push(g.lang_to_id[pt]),T.push(g.task_to_id[Fe??"transcribe"])}else if(K||Fe)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!g.return_timestamps&&g.no_timestamps_token_id&&T.at(-1)!==g.no_timestamps_token_id?T.push(g.no_timestamps_token_id):g.return_timestamps&&T.at(-1)===g.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),T.pop()),T.filter(Pe=>Pe!=null)}async generate({inputs:g=null,generation_config:T=null,logits_processor:K=null,stopping_criteria:Fe=null,...Pe}){T=this._prepare_generation_config(T,Pe);const pt=Pe.decoder_input_ids??this._retrieve_init_tokens(T);if(T.return_timestamps&&(K??(K=new $.LogitsProcessorList),K.push(new $.WhisperTimeStampLogitsProcessor(T,pt))),T.begin_suppress_tokens&&(K??(K=new $.LogitsProcessorList),K.push(new $.SuppressTokensAtBeginLogitsProcessor(T.begin_suppress_tokens,pt.length))),T.return_token_timestamps){if(!T.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");T.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),T.output_attentions=!0,T.return_dict_in_generate=!0}const Pt=await super.generate({inputs:g,generation_config:T,logits_processor:K,decoder_input_ids:pt,...Pe});return T.return_token_timestamps&&(Pt.token_timestamps=this._extract_token_timestamps(Pt,T.alignment_heads,T.num_frames)),Pt}_extract_token_timestamps(g,T,K=null,Fe=.02){if(!g.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");K==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let Pe=this.config.median_filter_width;Pe===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),Pe=7);const pt=g.cross_attentions,Pt=Array.from({length:this.config.decoder_layers},(xr,yr)=>(0,P.cat)(pt.map(Dr=>Dr[yr]),2)),It=(0,P.stack)(T.map(([xr,yr])=>{if(xr>=Pt.length)throw new Error(`Layer index ${xr} is out of bounds for cross attentions (length ${Pt.length}).`);return K?Pt[xr].slice(null,yr,null,[0,K]):Pt[xr].slice(null,yr)})).transpose(1,0,2,3),[ir,hr]=(0,P.std_mean)(It,-2,0,!0),$r=It.clone();for(let xr=0;xr<$r.dims[0];++xr){const yr=$r[xr];for(let Dr=0;Dr<yr.dims[0];++Dr){const wn=yr[Dr],on=ir[xr][Dr][0].data,Bn=hr[xr][Dr][0].data;for(let ln=0;ln<wn.dims[0];++ln){let qr=wn[ln].data;for(let nn=0;nn<qr.length;++nn)qr[nn]=(qr[nn]-Bn[nn])/on[nn];qr.set((0,ee.medianFilter)(qr,Pe))}}}const tr=[(0,P.mean)($r,1)],lr=g.sequences.dims,vr=new P.Tensor("float32",new Float32Array(lr[0]*lr[1]),lr);for(let xr=0;xr<lr[0];++xr){const yr=tr[xr].neg().squeeze_(0),[Dr,wn]=(0,ee.dynamic_time_warping)(yr.tolist()),on=Array.from({length:Dr.length-1},(qr,nn)=>Dr[nn+1]-Dr[nn]),Bn=(0,xe.mergeArrays)([1],on).map(qr=>!!qr),ln=[];for(let qr=0;qr<Bn.length;++qr)Bn[qr]&&ln.push(wn[qr]*Fe);vr[xr].data.set(ln,1)}return vr}}class fi extends ne{constructor(T,K,Fe){super(T,K);Te(this,"main_input_name","pixel_values");Te(this,"forward_params",["pixel_values","input_ids","encoder_hidden_states","past_key_values"]);this.generation_config=Fe}}class Da extends ne{constructor(T,K,Fe){super(T,K);Te(this,"forward_params",["input_ids","pixel_values","attention_mask","position_ids","past_key_values"]);this.generation_config=Fe}}class us extends Da{_merge_input_ids_with_image_features({inputs_embeds:g,image_features:T,input_ids:K,attention_mask:Fe}){const Pe=this.config.image_token_index,Pt=K.tolist().map(tr=>tr.findIndex(lr=>lr==Pe)),It=Pt.every(tr=>tr===-1),ir=Pt.every(tr=>tr!==-1);if(!It&&!ir)throw new Error("Every input should contain either 0 or 1 image token.");if(It)return{inputs_embeds:g,attention_mask:Fe};const hr=[],$r=[];for(let tr=0;tr<Pt.length;++tr){const lr=Pt[tr],vr=g[tr],xr=T[tr],yr=Fe[tr];hr.push((0,P.cat)([vr.slice([0,lr]),xr,vr.slice([lr+1,vr.dims[0]])],0)),$r.push((0,P.cat)([yr.slice([0,lr]),(0,P.ones)([xr.dims[0]]),yr.slice([lr+1,yr.dims[0]])],0))}return{inputs_embeds:(0,P.stack)(hr,0),attention_mask:(0,P.stack)($r,0)}}}class or extends us{}class Ba extends ne{constructor(T,K,Fe){super(T,K);Te(this,"forward_params",["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"]);Te(this,"main_input_name","inputs_embeds");this.generation_config=Fe}}class mi extends Ba{_merge_input_ids_with_image_features({inputs_embeds:g,image_features:T,input_ids:K,attention_mask:Fe}){return{inputs_embeds:(0,P.cat)([T,g],1),attention_mask:(0,P.cat)([(0,P.ones)(T.dims.slice(0,2)),Fe],1)}}async _prepare_inputs_embeds({input_ids:g,pixel_values:T,inputs_embeds:K,attention_mask:Fe}){if(!g&&!T)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let Pe,pt;return g&&(Pe=await this.encode_text({input_ids:g})),T&&(pt=await this.encode_image({pixel_values:T})),Pe&&pt?{inputs_embeds:K,attention_mask:Fe}=this._merge_input_ids_with_image_features({inputs_embeds:Pe,image_features:pt,input_ids:g,attention_mask:Fe}):K=Pe||pt,{inputs_embeds:K,attention_mask:Fe}}async forward({input_ids:g,pixel_values:T,attention_mask:K,decoder_input_ids:Fe,decoder_attention_mask:Pe,encoder_outputs:pt,past_key_values:Pt,inputs_embeds:It,decoder_inputs_embeds:ir}){if(It||({inputs_embeds:It,attention_mask:K}=await this._prepare_inputs_embeds({input_ids:g,pixel_values:T,inputs_embeds:It,attention_mask:K})),!pt){let{last_hidden_state:tr}=await Je(this,{inputs_embeds:It,attention_mask:K});pt=tr}if(!ir){if(!Fe)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");ir=await this.encode_text({input_ids:Fe})}return await Ue(this,{inputs_embeds:ir,attention_mask:Pe,encoder_attention_mask:K,encoder_hidden_states:pt,past_key_values:Pt},!0)}}class Qn extends ne{}class La extends Qn{}class zn extends Qn{static async from_pretrained(g,T={}){return T.model_file_name??(T.model_file_name="text_model"),super.from_pretrained(g,T)}}class Ra extends Qn{static async from_pretrained(g,T={}){return T.model_file_name??(T.model_file_name="text_model"),super.from_pretrained(g,T)}}class Lu extends Qn{static async from_pretrained(g,T={}){return T.model_file_name??(T.model_file_name="vision_model"),super.from_pretrained(g,T)}}class ds extends Qn{static async from_pretrained(g,T={}){return T.model_file_name??(T.model_file_name="vision_model"),super.from_pretrained(g,T)}}class _i extends ne{}class Na extends _i{}class ja extends _i{static async from_pretrained(g,T={}){return T.model_file_name??(T.model_file_name="text_model"),super.from_pretrained(g,T)}}class Va extends Qn{static async from_pretrained(g,T={}){return T.model_file_name??(T.model_file_name="vision_model"),super.from_pretrained(g,T)}}class Ua extends ne{}class Wa extends Ua{}class gi extends ne{}class Ga extends gi{}class qa extends gi{}class wi extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class bn extends wi{}class Ha extends wi{}class yi extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Ka extends yi{}class Xa extends yi{}class bi extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Qa extends bi{}class Ya extends bi{}class Mi extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Za extends Mi{}class Ja extends Mi{}class eo extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Mn extends eo{}class to extends eo{}class Es extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class vi extends Es{}class vn extends Es{}class xi extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class ro extends xi{}class no extends xi{}class Ti extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class so extends Ti{}class io extends Ti{}class Ci extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class ao extends Ci{}class oo extends Ci{}class Ei extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class xn extends Ei{}class lo extends Ei{}class $i extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class uo extends $i{}class co extends $i{}class Si extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class po extends Si{}class ho extends Si{}class ki extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class fo extends ki{}class mo extends ki{}class Gs extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Pi extends Gs{}class _o extends Gs{}class Ai extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Ii extends Ai{}class Ru extends Ai{}class Fi extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class go extends Fi{}class wo extends Fi{}class Oi extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class $s extends Oi{}class yo extends Oi{}class zi extends ne{}class Di extends zi{}class bo extends zi{async _call(g){return new ur(await super._call(g))}}class Bi extends ne{}class Mo extends Bi{}class vo extends Bi{async _call(g){return new ur(await super._call(g))}}class Nu extends ne{}class xo extends Nu{async _call(g){return new Su(await super._call(g))}}class Li extends ne{}class To extends Li{}class ju extends Li{async _call(g){return new ur(await super._call(g))}}class Ri extends ne{}class wr extends Ri{}class Co extends Ri{async _call(g){return new ur(await super._call(g))}}class Ni extends ne{}class Eo extends Ni{}class $o extends Ni{}class ji extends ne{}class So extends ji{}class ko extends ji{}class Vi extends ne{}class Po extends Vi{}class Ao extends Vi{async _call(g){return new ur(await super._call(g))}}class qs extends ne{}class Io extends qs{}class Fo extends qs{async _call(g){return new cs(await super._call(g))}}class Oo extends qs{async _call(g){return new zo(await super._call(g))}}class cs extends Ke{constructor({logits:g,pred_boxes:T}){super(),this.logits=g,this.pred_boxes=T}}class zo extends Ke{constructor({logits:g,pred_boxes:T,pred_masks:K}){super(),this.logits=g,this.pred_boxes=T,this.pred_masks=K}}class Ss extends ne{}class Do extends Ss{}class Bo extends Ss{async _call(g){return new Lo(await super._call(g))}}class Lo extends Ke{constructor({logits:g,pred_boxes:T}){super(),this.logits=g,this.pred_boxes=T}}class Ui extends ne{}class Ro extends Ui{}class No extends Ui{async _call(g){return new jo(await super._call(g))}}class jo extends cs{}class Wi extends ne{}class Vo extends Wi{}class Uo extends Wi{async _call(g){return new ur(await super._call(g))}}class Gi extends ne{}class Wo extends Gi{}class Go extends Gi{async _call(g){return new ur(await super._call(g))}}class qi extends ne{}class qo extends qi{}class Ho extends qi{async _call(g){return new ur(await super._call(g))}}class Hs extends ne{}class Ko extends Hs{}class Hi extends Hs{}class Ks extends ne{}class Xo extends Ks{}class Qo extends Ks{}class Yo extends ne{}class Zo extends Yo{}class Ki extends ne{}class Jo extends Ki{}class Xi extends Ki{}class el extends ne{}class tl extends el{}class Qi extends ne{}class Vu extends Qi{}class rl extends Qi{async _call(g){return new ur(await super._call(g))}}class Yi extends ne{}class Tn extends Yi{}class nl extends Yi{async _call(g){return new ur(await super._call(g))}}class Zi extends ne{}class sl extends Zi{}class il extends Zi{async _call(g){return new ur(await super._call(g))}}class Ji extends ne{}class al extends Ji{}class ol extends Ji{async _call(g){return new ll(await super._call(g))}}class ll extends Ke{constructor({logits:g,pred_boxes:T}){super(),this.logits=g,this.pred_boxes=T}}class ul extends ne{}class dl extends ul{async get_image_embeddings({pixel_values:g}){return await Je(this,{pixel_values:g})}async forward(g){if((!g.image_embeddings||!g.image_positional_embeddings)&&(g={...g,...await this.get_image_embeddings(g)}),!g.input_labels&&g.input_points){const K=g.input_points.dims.slice(0,-1),Fe=K.reduce((Pe,pt)=>Pe*pt,1);g.input_labels=new P.Tensor("int64",new BigInt64Array(Fe).fill(1n),K)}const T={image_embeddings:g.image_embeddings,image_positional_embeddings:g.image_positional_embeddings};return g.input_points&&(T.input_points=g.input_points),g.input_labels&&(T.input_labels=g.input_labels),g.input_boxes&&(T.input_boxes=g.input_boxes),await _e(this.sessions.prompt_encoder_mask_decoder,T)}async _call(g){return new Uu(await super._call(g))}}class Uu extends Ke{constructor({iou_scores:g,pred_masks:T}){super(),this.iou_scores=g,this.pred_masks=T}}class ea extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class cl extends ea{}class pl extends ea{}class ta extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class hl extends ta{}class fl extends ta{}class Yn extends ne{}class Wn extends Yn{}class Gn extends Yn{async _call(g){return new Jn(await super._call(g))}}class qn extends Yn{async _call(g){return new ur(await super._call(g))}}class ra extends Yn{async _call(g){return new Qr(await super._call(g))}}class Dn extends ne{}class tn extends Dn{}class na extends Dn{async _call(g){return new Qr(await super._call(g))}}class Xs extends ne{}class sa extends Xs{}class Qs extends ne{}class ml extends Qs{}class _l extends Qs{async _call(g){return new Jn(await super._call(g))}}class Ys extends Qs{async _call(g){return new ur(await super._call(g))}}class ps extends ne{}class gl extends ps{}class Zs extends ps{async _call(g){return new Jn(await super._call(g))}}class wl extends ps{async _call(g){return new ur(await super._call(g))}}class ia extends ps{async _call(g){return new Qr(await super._call(g))}}class hs extends ne{}class yl extends hs{}class bl extends hs{async _call(g){return new Jn(await super._call(g))}}class Wu extends hs{async _call(g){return new ur(await super._call(g))}}class Gu extends ne{}class aa extends Yn{}class ks extends Yn{async _call(g){return new Jn(await super._call(g))}}class Ml extends Yn{async _call(g){return new ur(await super._call(g))}}class Zn extends ne{}class vl extends Zn{}class xl extends Zn{async _call(g){return new Jn(await super._call(g))}}class Tl extends Zn{async _call(g){return new ur(await super._call(g))}}class qu extends Zn{async _call(g){return new ld(await super._call(g))}}class oa extends Zn{async _call(g){return new Qr(await super._call(g))}}class Js extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class kd extends Js{}class la extends Js{}class Cl extends Js{async generate_speech(g,T,{threshold:K=.5,minlenratio:Fe=0,maxlenratio:Pe=20,vocoder:pt=null}={}){const Pt={input_ids:g},{encoder_outputs:It,encoder_attention_mask:ir}=await Je(this,Pt),hr=It.dims[1]/this.config.reduction_factor,$r=Math.floor(hr*Pe),tr=Math.floor(hr*Fe),lr=this.config.num_mel_bins;let vr=[],xr=null,yr=null,Dr=0;for(;;){++Dr;const Bn=ke(!!yr);let ln;yr?ln=yr.output_sequence_out:ln=new P.Tensor("float32",new Float32Array(lr),[1,1,lr]);let qr={use_cache_branch:Bn,output_sequence:ln,encoder_attention_mask:ir,speaker_embeddings:T,encoder_hidden_states:It};this.addPastKeyValues(qr,xr),yr=await _e(this.sessions.decoder_model_merged,qr),xr=this.getPastKeyValues(yr,xr);const{prob:nn,spectrum:Sa}=yr;if(vr.push(Sa),Dr>=tr&&(Array.from(nn.data).filter(oi=>oi>=K).length>0||Dr>=$r))break}const wn=(0,P.cat)(vr),{waveform:on}=await _e(pt.sessions.model,{spectrogram:wn});return{spectrogram:wn,waveform:on}}}class El extends ne{constructor(){super(...arguments);Te(this,"main_input_name","spectrogram")}}class $l extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class ei extends $l{}class Ps extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Sl extends Ps{}class ti extends Ps{}class ri extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class kl extends ri{}class Pl extends ri{}class ua extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class da extends ua{}class Al extends ua{}class ni extends ne{}class Il extends ni{}class Hu extends ni{static async from_pretrained(g,T={}){return T.model_file_name??(T.model_file_name="text_model"),super.from_pretrained(g,T)}}class Fl extends ni{static async from_pretrained(g,T={}){return T.model_file_name??(T.model_file_name="audio_model"),super.from_pretrained(g,T)}}class ca extends ne{}class Ol extends ca{async _call(g){return new ku(await super._call(g))}}class si extends ne{}class Ku extends si{}class zl extends si{}class pa extends si{}class ha extends ne{constructor(g,T,K){super(g,T),this.generation_config=K}}class Dl extends ha{}class Bl extends ha{}class fa extends ne{}class Ll extends fa{}class Rl extends fa{async _call(g){return new ur(await super._call(g))}}class Nl extends ne{}class Xu extends Nl{}class Qu extends Nl{}class ma extends ne{constructor(T,K,Fe){super(T,K);Te(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]);this.generation_config=Fe}_apply_and_filter_by_delay_pattern_mask(T){const[K,Fe]=T.dims,Pe=this.config.decoder.num_codebooks,pt=Fe-Pe;let Pt=0;for(let hr=0;hr<T.size;++hr){if(T.data[hr]===this.config.decoder.pad_token_id)continue;const $r=hr%Fe,tr=Math.floor(hr/Fe)%Pe,lr=$r-tr;lr>0&&lr<=pt&&(T.data[Pt++]=T.data[hr])}const It=Math.floor(K/Pe),ir=Pt/(It*Pe);return new P.Tensor(T.type,T.data.slice(0,Pt),[It,Pe,ir])}prepare_inputs_for_generation(T,K,Fe){let Pe=structuredClone(T);for(let Pt=0;Pt<Pe.length;++Pt)for(let It=0;It<Pe[Pt].length;++It)Pt%this.config.decoder.num_codebooks>=It&&(Pe[Pt][It]=BigInt(this.config.decoder.pad_token_id));return Fe.guidance_scale!==null&&Fe.guidance_scale>1&&(Pe=Pe.concat(Pe)),super.prepare_inputs_for_generation(Pe,K,Fe)}async generate(T){const K=await super.generate(T),Fe=this._apply_and_filter_by_delay_pattern_mask(K).unsqueeze_(0),{audio_values:Pe}=await _e(this.sessions.encodec_decode,{audio_codes:Fe});return Pe}}class jl extends ne{}class Vl extends jl{}class Ul extends jl{async _call(g){return new ur(await super._call(g))}}class _a extends ne{}class Wl extends _a{}class Gl extends _a{async _call(g){return new ur(await super._call(g))}}class ql extends ne{}class ii extends ql{}class As extends ql{async _call(g){return new ur(await super._call(g))}}class ai extends ne{}class Hl extends ai{}class Kl extends ai{async _call(g){return new ur(await super._call(g))}}class Ir{static async from_pretrained(g,{progress_callback:T=null,config:K=null,cache_dir:Fe=null,local_files_only:Pe=!1,revision:pt="main",model_file_name:Pt=null,subfolder:It="onnx",device:ir=null,dtype:hr=null,use_external_data_format:$r=null,session_options:tr={}}={}){let lr={progress_callback:T,config:K,cache_dir:Fe,local_files_only:Pe,revision:pt,model_file_name:Pt,subfolder:It,device:ir,dtype:hr,use_external_data_format:$r,session_options:tr};if(lr.config=await x.AutoConfig.from_pretrained(g,lr),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(let vr of this.MODEL_CLASS_MAPPINGS){const xr=vr.get(lr.config.model_type);if(xr)return await xr[1].from_pretrained(g,lr)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${lr.config.model_type}", attempting to construct from base class.`),await ne.from_pretrained(g,lr);throw Error(`Unsupported model type: ${lr.config.model_type}`)}}Te(Ir,"MODEL_CLASS_MAPPINGS",null),Te(Ir,"BASE_IF_FAIL",!1);const Yu=new Map([["bert",["BertModel",ot]],["nomic_bert",["NomicBertModel",Ee]],["roformer",["RoFormerModel",qe]],["electra",["ElectraModel",Ye]],["esm",["EsmModel",Hr]],["convbert",["ConvBertModel",vt]],["camembert",["CamembertModel",X]],["deberta",["DebertaModel",nt]],["deberta-v2",["DebertaV2Model",Vt]],["mpnet",["MPNetModel",Vs]],["albert",["AlbertModel",Kn]],["distilbert",["DistilBertModel",Tr]],["roberta",["RobertaModel",pr]],["xlm",["XLMModel",Kr]],["xlm-roberta",["XLMRobertaModel",Mr]],["clap",["ClapModel",Il]],["clip",["CLIPModel",La]],["clipseg",["CLIPSegModel",Ga]],["chinese_clip",["ChineseCLIPModel",Wa]],["siglip",["SiglipModel",Na]],["mobilebert",["MobileBertModel",jr]],["squeezebert",["SqueezeBertModel",Us]],["wav2vec2",["Wav2Vec2Model",Wn]],["wav2vec2-bert",["Wav2Vec2BertModel",yl]],["unispeech",["UniSpeechModel",ml]],["unispeech-sat",["UniSpeechSatModel",gl]],["hubert",["HubertModel",aa]],["wavlm",["WavLMModel",vl]],["audio-spectrogram-transformer",["ASTModel",Ot]],["vits",["VitsModel",Ol]],["pyannote",["PyAnnoteModel",tn]],["wespeaker-resnet",["WeSpeakerResNetModel",sa]],["detr",["DetrModel",Io]],["rt_detr",["RTDetrModel",Do]],["table-transformer",["TableTransformerModel",Ro]],["vit",["ViTModel",Di]],["fastvit",["FastViTModel",Mo]],["mobilevit",["MobileViTModel",To]],["mobilevitv2",["MobileViTV2Model",wr]],["owlvit",["OwlViTModel",Eo]],["owlv2",["Owlv2Model",So]],["beit",["BeitModel",Po]],["deit",["DeiTModel",Vo]],["convnext",["ConvNextModel",Vu]],["convnextv2",["ConvNextV2Model",Tn]],["dinov2",["Dinov2Model",sl]],["resnet",["ResNetModel",Wo]],["swin",["SwinModel",qo]],["swin2sr",["Swin2SRModel",Ko]],["donut-swin",["DonutSwinModel",tl]],["yolos",["YolosModel",al]],["dpt",["DPTModel",Xo]],["glpn",["GLPNModel",Jo]],["hifigan",["SpeechT5HifiGan",El]],["efficientnet",["EfficientNetModel",Ll]],["mobilenet_v1",["MobileNetV1Model",Vl]],["mobilenet_v2",["MobileNetV2Model",Wl]],["mobilenet_v3",["MobileNetV3Model",ii]],["mobilenet_v4",["MobileNetV4Model",Hl]]]),Xl=new Map([["t5",["T5Model",Ms]],["longt5",["LongT5Model",xs]],["mt5",["MT5Model",Cs]],["bart",["BartModel",ve]],["mbart",["MBartModel",le]],["marian",["MarianModel",cl]],["whisper",["WhisperModel",Ut]],["m2m_100",["M2M100Model",hl]],["blenderbot",["BlenderbotModel",wt]],["blenderbot-small",["BlenderbotSmallModel",Er]]]),Zu=new Map([["bloom",["BloomModel",Ii]],["gpt2",["GPT2Model",bn]],["gptj",["GPTJModel",Za]],["gpt_bigcode",["GPTBigCodeModel",Mn]],["gpt_neo",["GPTNeoModel",Ka]],["gpt_neox",["GPTNeoXModel",Qa]],["codegen",["CodeGenModel",vi]],["llama",["LlamaModel",ro]],["cohere",["CohereModel",so]],["gemma",["GemmaModel",ao]],["gemma2",["Gemma2Model",xn]],["openelm",["OpenELMModel",uo]],["qwen2",["Qwen2Model",po]],["phi",["PhiModel",fo]],["phi3",["Phi3Model",Pi]],["mpt",["MptModel",go]],["opt",["OPTModel",$s]],["mistral",["MistralModel",Sl]],["starcoder2",["Starcoder2Model",kl]],["falcon",["FalconModel",da]],["stablelm",["StableLmModel",Dl]]]),ga=new Map([["speecht5",["SpeechT5ForSpeechToText",la]],["whisper",["WhisperForConditionalGeneration",hi]]]),Ql=new Map([["speecht5",["SpeechT5ForTextToSpeech",Cl]]]),Ju=new Map([["vits",["VitsModel",Ol]],["musicgen",["MusicgenForConditionalGeneration",ma]]]),Yl=new Map([["bert",["BertForSequenceClassification",st]],["roformer",["RoFormerForSequenceClassification",Xe]],["electra",["ElectraForSequenceClassification",At]],["esm",["EsmForSequenceClassification",An]],["convbert",["ConvBertForSequenceClassification",W]],["camembert",["CamembertForSequenceClassification",Be]],["deberta",["DebertaForSequenceClassification",ht]],["deberta-v2",["DebertaV2ForSequenceClassification",Ht]],["mpnet",["MPNetForSequenceClassification",ws]],["albert",["AlbertForSequenceClassification",is]],["distilbert",["DistilBertForSequenceClassification",Ur]],["roberta",["RobertaForSequenceClassification",Yr]],["xlm",["XLMForSequenceClassification",Yt]],["xlm-roberta",["XLMRobertaForSequenceClassification",mr]],["bart",["BartForSequenceClassification",F]],["mbart",["MBartForSequenceClassification",Ie]],["mobilebert",["MobileBertForSequenceClassification",Pr]],["squeezebert",["SqueezeBertForSequenceClassification",Sn]]]),wa=new Map([["bert",["BertForTokenClassification",Tt]],["roformer",["RoFormerForTokenClassification",lt]],["electra",["ElectraForTokenClassification",mt]],["esm",["EsmForTokenClassification",Rr]],["convbert",["ConvBertForTokenClassification",S]],["camembert",["CamembertForTokenClassification",Ae]],["deberta",["DebertaForTokenClassification",Ct]],["deberta-v2",["DebertaV2ForTokenClassification",Xt]],["mpnet",["MPNetForTokenClassification",ys]],["distilbert",["DistilBertForTokenClassification",Cr]],["roberta",["RobertaForTokenClassification",He]],["xlm",["XLMForTokenClassification",mn]],["xlm-roberta",["XLMRobertaForTokenClassification",Ar]]]),ya=new Map([["t5",["T5ForConditionalGeneration",vs]],["longt5",["LongT5ForConditionalGeneration",Ts]],["mt5",["MT5ForConditionalGeneration",Br]],["bart",["BartForConditionalGeneration",_]],["mbart",["MBartForConditionalGeneration",ue]],["marian",["MarianMTModel",pl]],["m2m_100",["M2M100ForConditionalGeneration",fl]],["blenderbot",["BlenderbotForConditionalGeneration",kt]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",sr]]]),ba=new Map([["bloom",["BloomForCausalLM",Ru]],["gpt2",["GPT2LMHeadModel",Ha]],["gptj",["GPTJForCausalLM",Ja]],["gpt_bigcode",["GPTBigCodeForCausalLM",to]],["gpt_neo",["GPTNeoForCausalLM",Xa]],["gpt_neox",["GPTNeoXForCausalLM",Ya]],["codegen",["CodeGenForCausalLM",vn]],["llama",["LlamaForCausalLM",no]],["cohere",["CohereForCausalLM",io]],["gemma",["GemmaForCausalLM",oo]],["gemma2",["Gemma2ForCausalLM",lo]],["openelm",["OpenELMForCausalLM",co]],["qwen2",["Qwen2ForCausalLM",ho]],["phi",["PhiForCausalLM",mo]],["phi3",["Phi3ForCausalLM",_o]],["mpt",["MptForCausalLM",wo]],["opt",["OPTForCausalLM",yo]],["mbart",["MBartForCausalLM",_t]],["mistral",["MistralForCausalLM",ti]],["starcoder2",["Starcoder2ForCausalLM",Pl]],["falcon",["FalconForCausalLM",Al]],["trocr",["TrOCRForCausalLM",ei]],["stablelm",["StableLmForCausalLM",Bl]]]),Zl=new Map([["bert",["BertForMaskedLM",Re]],["roformer",["RoFormerForMaskedLM",Ve]],["electra",["ElectraForMaskedLM",et]],["esm",["EsmForMaskedLM",jn]],["convbert",["ConvBertForMaskedLM",M]],["camembert",["CamembertForMaskedLM",ye]],["deberta",["DebertaForMaskedLM",Mt]],["deberta-v2",["DebertaV2ForMaskedLM",Nt]],["mpnet",["MPNetForMaskedLM",gs]],["albert",["AlbertForMaskedLM",Qt]],["distilbert",["DistilBertForMaskedLM",$t]],["roberta",["RobertaForMaskedLM",an]],["xlm",["XLMWithLMHeadModel",dn]],["xlm-roberta",["XLMRobertaForMaskedLM",St]],["mobilebert",["MobileBertForMaskedLM",$n]],["squeezebert",["SqueezeBertForMaskedLM",ss]]]),ed=new Map([["bert",["BertForQuestionAnswering",ze]],["roformer",["RoFormerForQuestionAnswering",ft]],["electra",["ElectraForQuestionAnswering",Se]],["convbert",["ConvBertForQuestionAnswering",Q]],["camembert",["CamembertForQuestionAnswering",Ne]],["deberta",["DebertaForQuestionAnswering",Rt]],["deberta-v2",["DebertaV2ForQuestionAnswering",er]],["mpnet",["MPNetForQuestionAnswering",bs]],["albert",["AlbertForQuestionAnswering",as]],["distilbert",["DistilBertForQuestionAnswering",Ze]],["roberta",["RobertaForQuestionAnswering",gn]],["xlm",["XLMForQuestionAnswering",en]],["xlm-roberta",["XLMRobertaForQuestionAnswering",Vr]],["mobilebert",["MobileBertForQuestionAnswering",Vn]],["squeezebert",["SqueezeBertForQuestionAnswering",Fn]]]),Ma=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",fi]]]),td=new Map([["llava",["LlavaForConditionalGeneration",us]],["moondream1",["Moondream1ForConditionalGeneration",or]],["florence2",["Florence2ForConditionalGeneration",mi]]]),Pd=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",fi]]]),Jl=new Map([["vit",["ViTForImageClassification",bo]],["fastvit",["FastViTForImageClassification",vo]],["mobilevit",["MobileViTForImageClassification",ju]],["mobilevitv2",["MobileViTV2ForImageClassification",Co]],["beit",["BeitForImageClassification",Ao]],["deit",["DeiTForImageClassification",Uo]],["convnext",["ConvNextForImageClassification",rl]],["convnextv2",["ConvNextV2ForImageClassification",nl]],["dinov2",["Dinov2ForImageClassification",il]],["resnet",["ResNetForImageClassification",Go]],["swin",["SwinForImageClassification",Ho]],["segformer",["SegformerForImageClassification",zl]],["efficientnet",["EfficientNetForImageClassification",Rl]],["mobilenet_v1",["MobileNetV1ForImageClassification",Ul]],["mobilenet_v2",["MobileNetV2ForImageClassification",Gl]],["mobilenet_v3",["MobileNetV3ForImageClassification",As]],["mobilenet_v4",["MobileNetV4ForImageClassification",Kl]]]),eu=new Map([["detr",["DetrForObjectDetection",Fo]],["rt_detr",["RTDetrForObjectDetection",Bo]],["table-transformer",["TableTransformerForObjectDetection",No]],["yolos",["YolosForObjectDetection",ol]]]),tu=new Map([["owlvit",["OwlViTForObjectDetection",$o]],["owlv2",["Owlv2ForObjectDetection",ko]]]),ru=new Map([["detr",["DetrForSegmentation",Oo]],["clipseg",["CLIPSegForImageSegmentation",qa]]]),rd=new Map([["segformer",["SegformerForSemanticSegmentation",pa]]]),nu=new Map([["sam",["SamModel",dl]]]),su=new Map([["wav2vec2",["Wav2Vec2ForCTC",Gn]],["wav2vec2-bert",["Wav2Vec2BertForCTC",bl]],["unispeech",["UniSpeechForCTC",_l]],["unispeech-sat",["UniSpeechSatForCTC",Zs]],["wavlm",["WavLMForCTC",xl]],["hubert",["HubertForCTC",ks]]]),iu=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",qn]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",Wu]],["unispeech",["UniSpeechForSequenceClassification",Ys]],["unispeech-sat",["UniSpeechSatForSequenceClassification",wl]],["wavlm",["WavLMForSequenceClassification",Tl]],["hubert",["HubertForSequenceClassification",Ml]],["audio-spectrogram-transformer",["ASTForAudioClassification",Ws]]]),au=new Map([["wavlm",["WavLMForXVector",qu]]]),nd=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",ia]],["wavlm",["WavLMForAudioFrameClassification",oa]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",ra]],["pyannote",["PyAnnoteForAudioFrameClassification",na]]]),ou=new Map([["vitmatte",["VitMatteForImageMatting",xo]]]),lu=new Map([["swin2sr",["Swin2SRForImageSuperResolution",Hi]]]),uu=new Map([["dpt",["DPTForDepthEstimation",Qo]],["depth_anything",["DepthAnythingForDepthEstimation",Zo]],["glpn",["GLPNForDepthEstimation",Xi]]]),du=new Map([["clip",["CLIPVisionModelWithProjection",ds]],["siglip",["SiglipVisionModel",Va]]]),sd=[[Yu,G.EncoderOnly],[Xl,G.EncoderDecoder],[Zu,G.DecoderOnly],[Yl,G.EncoderOnly],[wa,G.EncoderOnly],[ya,G.Seq2Seq],[ga,G.Seq2Seq],[ba,G.DecoderOnly],[Zl,G.EncoderOnly],[ed,G.EncoderOnly],[Ma,G.Vision2Seq],[td,G.ImageTextToText],[Jl,G.EncoderOnly],[ru,G.EncoderOnly],[rd,G.EncoderOnly],[ou,G.EncoderOnly],[lu,G.EncoderOnly],[uu,G.EncoderOnly],[eu,G.EncoderOnly],[tu,G.EncoderOnly],[nu,G.MaskGeneration],[su,G.EncoderOnly],[iu,G.EncoderOnly],[Ql,G.Seq2Seq],[Ju,G.EncoderOnly],[au,G.EncoderOnly],[nd,G.EncoderOnly],[du,G.EncoderOnly]];for(const[m,g]of sd)for(const[T,K]of m.values())re.set(T,g),L.set(K,T),pe.set(T,K);const cn=[["MusicgenForConditionalGeneration",ma,G.Musicgen],["CLIPTextModelWithProjection",Ra,G.EncoderOnly],["SiglipTextModel",ja,G.EncoderOnly],["ClapTextModelWithProjection",Hu,G.EncoderOnly],["ClapAudioModelWithProjection",Fl,G.EncoderOnly]];for(const[m,g,T]of cn)re.set(m,T),L.set(g,m),pe.set(m,g);class va extends Ir{}Te(va,"MODEL_CLASS_MAPPINGS",sd.map(g=>g[0])),Te(va,"BASE_IF_FAIL",!0);class cu extends Ir{}Te(cu,"MODEL_CLASS_MAPPINGS",[Yl]);class xa extends Ir{}Te(xa,"MODEL_CLASS_MAPPINGS",[wa]);class pu extends Ir{}Te(pu,"MODEL_CLASS_MAPPINGS",[ya]);class Is extends Ir{}Te(Is,"MODEL_CLASS_MAPPINGS",[ga]);class hu extends Ir{}Te(hu,"MODEL_CLASS_MAPPINGS",[Ql]);class fu extends Ir{}Te(fu,"MODEL_CLASS_MAPPINGS",[Ju]);class Ta extends Ir{}Te(Ta,"MODEL_CLASS_MAPPINGS",[ba]);class mu extends Ir{}Te(mu,"MODEL_CLASS_MAPPINGS",[Zl]);class _u extends Ir{}Te(_u,"MODEL_CLASS_MAPPINGS",[ed]);class Ca extends Ir{}Te(Ca,"MODEL_CLASS_MAPPINGS",[Ma]);class gu extends Ir{}Te(gu,"MODEL_CLASS_MAPPINGS",[Jl]);class wu extends Ir{}Te(wu,"MODEL_CLASS_MAPPINGS",[ru]);class yu extends Ir{}Te(yu,"MODEL_CLASS_MAPPINGS",[rd]);class Ea extends Ir{}Te(Ea,"MODEL_CLASS_MAPPINGS",[eu]);class bu extends Ir{}Te(bu,"MODEL_CLASS_MAPPINGS",[tu]);class Mu extends Ir{}Te(Mu,"MODEL_CLASS_MAPPINGS",[nu]);class $a extends Ir{}Te($a,"MODEL_CLASS_MAPPINGS",[su]);class vu extends Ir{}Te(vu,"MODEL_CLASS_MAPPINGS",[iu]);class id extends Ir{}Te(id,"MODEL_CLASS_MAPPINGS",[au]);class xu extends Ir{}Te(xu,"MODEL_CLASS_MAPPINGS",[nd]);class Tu extends Ir{}Te(Tu,"MODEL_CLASS_MAPPINGS",[Pd]);class Cu extends Ir{}Te(Cu,"MODEL_CLASS_MAPPINGS",[ou]);class Eu extends Ir{}Te(Eu,"MODEL_CLASS_MAPPINGS",[lu]);class ad extends Ir{}Te(ad,"MODEL_CLASS_MAPPINGS",[uu]);class $u extends Ir{}Te($u,"MODEL_CLASS_MAPPINGS",[du]);class od extends Ke{constructor({logits:g,past_key_values:T,encoder_outputs:K,decoder_attentions:Fe=null,cross_attentions:Pe=null}){super(),this.logits=g,this.past_key_values=T,this.encoder_outputs=K,this.decoder_attentions=Fe,this.cross_attentions=Pe}}class ur extends Ke{constructor({logits:g}){super(),this.logits=g}}class ld extends Ke{constructor({logits:g,embeddings:T}){super(),this.logits=g,this.embeddings=T}}class Qr extends Ke{constructor({logits:g}){super(),this.logits=g}}class Zr extends Ke{constructor({logits:g}){super(),this.logits=g}}class rn extends Ke{constructor({start_logits:g,end_logits:T}){super(),this.start_logits=g,this.end_logits=T}}class Jn extends Ke{constructor({logits:g}){super(),this.logits=g}}class Ad extends Ke{constructor({logits:g,past_key_values:T}){super(),this.logits=g,this.past_key_values=T}}class Su extends Ke{constructor({alphas:g}){super(),this.alphas=g}}class ku extends Ke{constructor({waveform:g,spectrogram:T}){super(),this.waveform=g,this.spectrogram=T}}},"./src/models/whisper/common_whisper.js":(xt,me,l)=>{l.r(me),l.d(me,{WHISPER_LANGUAGE_MAPPING:()=>H,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>we,whisper_language_to_code:()=>be});const x=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],H=new Map(x),we=new Map([...x.map(([xe,B])=>[B,xe]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function be(xe){xe=xe.toLowerCase();let B=we.get(xe);if(B===void 0)if(H.has(xe))B=xe;else{const N=xe.length===2?H.keys():H.values();throw new Error(`Language "${xe}" is not supported. Must be one of: ${JSON.stringify(N)}`)}return B}},"./src/models/whisper/generation_whisper.js":(xt,me,l)=>{l.r(me),l.d(me,{WhisperGenerationConfig:()=>H});var x=l("./src/generation/configuration_utils.js");class H extends x.GenerationConfig{constructor(){super(...arguments);Te(this,"return_timestamps",null);Te(this,"return_token_timestamps",null);Te(this,"num_frames",null);Te(this,"alignment_heads",null);Te(this,"task",null);Te(this,"language",null);Te(this,"no_timestamps_token_id",null);Te(this,"prompt_ids",null);Te(this,"is_multilingual",null);Te(this,"lang_to_id",null);Te(this,"task_to_id",null);Te(this,"max_initial_timestamp_index",1)}}},"./src/ops/registry.js":(xt,me,l)=>{l.r(me),l.d(me,{TensorOpRegistry:()=>be});var x=l("./src/backends/onnx.js"),H=l("./src/utils/tensor.js");const we=async(xe,B,$)=>{const N=await(0,x.createInferenceSession)(new Uint8Array(xe),B);return async P=>{const ee=Object.fromEntries(Object.entries(P).map(([ie,ae])=>[ie,ae.ort_tensor])),Z=await N.run(ee);return Array.isArray($)?$.map(ie=>new H.Tensor(Z[ie])):new H.Tensor(Z[$])}};class be{static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=we([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=we([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=we([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=we([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=we([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=we([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}}Te(be,"session_options",{})},"./src/pipelines.js":(xt,me,l)=>{l.r(me),l.d(me,{AudioClassificationPipeline:()=>ke,AutomaticSpeechRecognitionPipeline:()=>Je,DepthEstimationPipeline:()=>rt,DocumentQuestionAnsweringPipeline:()=>ne,FeatureExtractionPipeline:()=>Me,FillMaskPipeline:()=>re,ImageClassificationPipeline:()=>bt,ImageFeatureExtractionPipeline:()=>Ce,ImageSegmentationPipeline:()=>ge,ImageToImagePipeline:()=>ct,ImageToTextPipeline:()=>Ue,ObjectDetectionPipeline:()=>he,Pipeline:()=>ae,QuestionAnsweringPipeline:()=>G,SummarizationPipeline:()=>L,Text2TextGenerationPipeline:()=>pe,TextClassificationPipeline:()=>z,TextGenerationPipeline:()=>A,TextToAudioPipeline:()=>Ke,TokenClassificationPipeline:()=>te,TranslationPipeline:()=>O,ZeroShotAudioClassificationPipeline:()=>De,ZeroShotClassificationPipeline:()=>_e,ZeroShotImageClassificationPipeline:()=>V,ZeroShotObjectDetectionPipeline:()=>$e,pipeline:()=>st});var x=l("./src/tokenizers.js"),H=l("./src/models.js"),we=l("./src/processors.js"),be=l("./src/utils/generic.js"),xe=l("./src/utils/core.js"),B=l("./src/utils/maths.js"),$=l("./src/utils/audio.js"),N=l("./src/utils/tensor.js"),P=l("./src/utils/image.js");async function ee(ze){return Array.isArray(ze)||(ze=[ze]),await Promise.all(ze.map(se=>P.RawImage.read(se)))}async function Z(ze,se){return Array.isArray(ze)||(ze=[ze]),await Promise.all(ze.map(Ee=>typeof Ee=="string"||Ee instanceof URL?(0,$.read_audio)(Ee,se):Ee instanceof Float64Array?new Float32Array(Ee):Ee))}function ie(ze,se){se&&(ze=ze.map(Xe=>Xe|0));const[Ee,je,qe,Ve]=ze;return{xmin:Ee,ymin:je,xmax:qe,ymax:Ve}}class ae extends be.Callable{constructor({task:se,model:Ee,tokenizer:je=null,processor:qe=null}){super(),this.task=se,this.model=Ee,this.tokenizer=je,this.processor=qe}async dispose(){await this.model.dispose()}}class z extends ae{constructor(se){super(se)}async _call(se,{top_k:Ee=1}={}){const je=this.tokenizer(se,{padding:!0,truncation:!0}),qe=await this.model(je),Ve=this.model.config.problem_type==="multi_label_classification"?ft=>ft.sigmoid():ft=>new N.Tensor("float32",(0,B.softmax)(ft.data),ft.dims),Xe=this.model.config.id2label,lt=[];for(const ft of qe.logits){const gt=Ve(ft),vt=await(0,N.topk)(gt,Ee),M=vt[0].tolist(),S=vt[1].tolist().map((Q,fe)=>({label:Xe?Xe[Q]:`LABEL_${Q}`,score:M[fe]}));Ee===1?lt.push(...S):lt.push(S)}return Array.isArray(se)||Ee===1?lt:lt[0]}}class te extends ae{constructor(se){super(se)}async _call(se,{ignore_labels:Ee=["O"]}={}){const je=Array.isArray(se),qe=this.tokenizer(je?se:[se],{padding:!0,truncation:!0}),Xe=(await this.model(qe)).logits,lt=this.model.config.id2label,ft=[];for(let gt=0;gt<Xe.dims[0];++gt){const vt=qe.input_ids[gt],M=Xe[gt],W=[];for(let S=0;S<M.dims[0];++S){const Q=M[S],fe=(0,B.max)(Q.data)[1],Ye=lt?lt[fe]:`LABEL_${fe}`;if(Ee.includes(Ye))continue;const et=this.tokenizer.decode([vt[S].item()],{skip_special_tokens:!0});if(et==="")continue;const At=(0,B.softmax)(Q.data);W.push({entity:Ye,score:At[fe],index:S,word:et})}ft.push(W)}return je?ft:ft[0]}}class G extends ae{constructor(se){super(se)}async _call(se,Ee,{top_k:je=1}={}){const qe=this.tokenizer(se,{text_pair:Ee,padding:!0,truncation:!0}),{start_logits:Ve,end_logits:Xe}=await this.model(qe),lt=qe.input_ids.tolist(),ft=qe.attention_mask.tolist(),gt=this.tokenizer.all_special_ids,vt=[];for(let M=0;M<Ve.dims[0];++M){const W=lt[M],S=W.findIndex(mt=>mt==this.tokenizer.sep_token_id);ft[M].map((mt,Se)=>mt==1&&(Se===0||Se>S&&gt.findIndex(E=>E==W[Se])===-1));const Q=Ve[M].tolist(),fe=Xe[M].tolist();for(let mt=1;mt<Q.length;++mt)(ft[M]==0||mt<=S||gt.findIndex(Se=>Se==W[mt])!==-1)&&(Q[mt]=-1/0,fe[mt]=-1/0);const Ye=(0,B.softmax)(Q).map((mt,Se)=>[mt,Se]),et=(0,B.softmax)(fe).map((mt,Se)=>[mt,Se]);Ye[0][0]=0,et[0][0]=0;const At=(0,xe.product)(Ye,et).filter(mt=>mt[0][1]<=mt[1][1]).map(mt=>[mt[0][1],mt[1][1],mt[0][0]*mt[1][0]]).sort((mt,Se)=>Se[2]-mt[2]);for(let mt=0;mt<Math.min(At.length,je);++mt){const[Se,E,X]=At[mt],ye=W.slice(Se,E+1),Be=this.tokenizer.decode(ye,{skip_special_tokens:!0});vt.push({answer:Be,score:X})}}return je===1?vt[0]:vt}}class re extends ae{constructor(se){super(se)}async _call(se,{top_k:Ee=5}={}){const je=this.tokenizer(se,{padding:!0,truncation:!0}),{logits:qe}=await this.model(je),Ve=[],Xe=je.input_ids.tolist();for(let lt=0;lt<Xe.length;++lt){const ft=Xe[lt],gt=ft.findIndex(Q=>Q==this.tokenizer.mask_token_id);if(gt===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const vt=qe[lt][gt],M=await(0,N.topk)(new N.Tensor("float32",(0,B.softmax)(vt.data),vt.dims),Ee),W=M[0].tolist(),S=M[1].tolist();Ve.push(S.map((Q,fe)=>{const Ye=ft.slice();return Ye[gt]=Q,{score:W[fe],token:Number(Q),token_str:this.tokenizer.model.vocab[Q],sequence:this.tokenizer.decode(Ye,{skip_special_tokens:!0})}}))}return Array.isArray(se)?Ve:Ve[0]}}class pe extends ae{constructor(Ee){super(Ee);Te(this,"_key","generated_text")}async _call(Ee,je={}){Array.isArray(Ee)||(Ee=[Ee]),this.model.config.prefix&&(Ee=Ee.map(gt=>this.model.config.prefix+gt));const qe=this.model.config.task_specific_params;qe&&qe[this.task]&&qe[this.task].prefix&&(Ee=Ee.map(gt=>qe[this.task].prefix+gt));const Ve=this.tokenizer,Xe={padding:!0,truncation:!0};let lt;this instanceof O&&"_build_translation_inputs"in Ve?lt=Ve._build_translation_inputs(Ee,Xe,je):lt=Ve(Ee,Xe);const ft=await this.model.generate({...lt,...je});return Ve.batch_decode(ft,{skip_special_tokens:!0}).map(gt=>({[this._key]:gt}))}}class L extends pe{constructor(Ee){super(Ee);Te(this,"_key","summary_text")}}class O extends pe{constructor(Ee){super(Ee);Te(this,"_key","translation_text")}}function j(ze){return Array.isArray(ze)&&ze.every(se=>"role"in se&&"content"in se)}class A extends ae{constructor(se){super(se)}async _call(se,Ee={}){let je=!1,qe=!1,Ve;if(typeof se=="string")Ve=se=[se];else if(Array.isArray(se)&&se.every(S=>typeof S=="string"))je=!0,Ve=se;else{if(j(se))se=[se];else if(Array.isArray(se)&&se.every(j))je=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");qe=!0,Ve=se.map(S=>this.tokenizer.apply_chat_template(S,{tokenize:!1,add_generation_prompt:!0}))}const Xe=Ee.add_special_tokens??!1,lt=qe?!1:Ee.return_full_text??!0;this.tokenizer.padding_side="left";const ft=this.tokenizer(Ve,{add_special_tokens:Xe,padding:!0,truncation:!0}),gt=await this.model.generate({...ft,...Ee}),vt=this.tokenizer.batch_decode(gt,{skip_special_tokens:!0});let M;!lt&&ft.input_ids.dims.at(-1)>0&&(M=this.tokenizer.batch_decode(ft.input_ids,{skip_special_tokens:!0}).map(S=>S.length));const W=Array.from({length:se.length},S=>[]);for(let S=0;S<vt.length;++S){const Q=Math.floor(S/gt.dims[0]*se.length);M&&(vt[S]=vt[S].slice(M[Q])),W[Q].push({generated_text:qe?[...se[Q],{role:"assistant",content:vt[S]}]:vt[S]})}return!je&&W.length===1?W[0]:W}}class _e extends ae{constructor(se){super(se),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([Ee,je])=>[Ee.toLowerCase(),je])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(se,Ee,{hypothesis_template:je="This example is {}.",multi_label:qe=!1}={}){const Ve=Array.isArray(se);Ve||(se=[se]),Array.isArray(Ee)||(Ee=[Ee]);const Xe=Ee.map(gt=>je.replace("{}",gt)),lt=qe||Ee.length===1,ft=[];for(const gt of se){const vt=[];for(const S of Xe){const Q=this.tokenizer(gt,{text_pair:S,padding:!0,truncation:!0}),fe=await this.model(Q);lt?vt.push([fe.logits.data[this.contradiction_id],fe.logits.data[this.entailment_id]]):vt.push(fe.logits.data[this.entailment_id])}const W=(lt?vt.map(S=>(0,B.softmax)(S)[1]):(0,B.softmax)(vt)).map((S,Q)=>[S,Q]).sort((S,Q)=>Q[0]-S[0]);ft.push({sequence:gt,labels:W.map(S=>Ee[S[1]]),scores:W.map(S=>S[0])})}return Ve?ft:ft[0]}}class Me extends ae{constructor(se){super(se)}async _call(se,{pooling:Ee="none",normalize:je=!1,quantize:qe=!1,precision:Ve="binary"}={}){const Xe=this.tokenizer(se,{padding:!0,truncation:!0}),lt=await this.model(Xe);let ft=lt.last_hidden_state??lt.logits??lt.token_embeddings;if(Ee!=="none")if(Ee==="mean")ft=(0,N.mean_pooling)(ft,Xe.attention_mask);else if(Ee==="cls")ft=ft.slice(null,0);else throw Error(`Pooling method '${Ee}' not supported.`);return je&&(ft=ft.normalize(2,-1)),qe&&(ft=(0,N.quantize_embeddings)(ft,Ve)),ft}}class Ce extends ae{constructor(se){super(se)}async _call(se,{pool:Ee=null}={}){const je=await ee(se),{pixel_values:qe}=await this.processor(je),Ve=await this.model({pixel_values:qe});let Xe;if(Ee){if(!("pooler_output"in Ve))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");Xe=Ve.pooler_output}else Xe=Ve.last_hidden_state??Ve.logits??Ve.image_embeds;return Xe}}class ke extends ae{constructor(se){super(se)}async _call(se,{top_k:Ee=5}={}){const je=this.processor.feature_extractor.config.sampling_rate,qe=await Z(se,je),Ve=this.model.config.id2label,Xe=[];for(const lt of qe){const ft=await this.processor(lt),vt=(await this.model(ft)).logits[0],M=await(0,N.topk)(new N.Tensor("float32",(0,B.softmax)(vt.data),vt.dims),Ee),W=M[0].tolist(),Q=M[1].tolist().map((fe,Ye)=>({label:Ve?Ve[fe]:`LABEL_${fe}`,score:W[Ye]}));Xe.push(Q)}return Array.isArray(se)?Xe:Xe[0]}}class De extends ae{constructor(se){super(se)}async _call(se,Ee,{hypothesis_template:je="This is a sound of {}."}={}){const qe=!Array.isArray(se);qe&&(se=[se]);const Ve=Ee.map(vt=>je.replace("{}",vt)),Xe=this.tokenizer(Ve,{padding:!0,truncation:!0}),lt=this.processor.feature_extractor.config.sampling_rate,ft=await Z(se,lt),gt=[];for(const vt of ft){const M=await this.processor(vt),W=await this.model({...Xe,...M}),S=(0,B.softmax)(W.logits_per_audio.data);gt.push([...S].map((Q,fe)=>({score:Q,label:Ee[fe]})))}return qe?gt[0]:gt}}class Je extends ae{constructor(se){super(se)}async _call(se,Ee={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(se,Ee);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(se,Ee);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(se,Ee){Ee.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),Ee.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const je=!Array.isArray(se);je&&(se=[se]);const qe=this.processor.feature_extractor.config.sampling_rate,Ve=await Z(se,qe),Xe=[];for(const lt of Ve){const ft=await this.processor(lt),vt=(await this.model(ft)).logits[0],M=[];for(const S of vt)M.push((0,B.max)(S.data)[1]);const W=this.tokenizer.decode(M);Xe.push({text:W})}return je?Xe[0]:Xe}async _call_whisper(se,Ee){const je=Ee.return_timestamps??!1,qe=Ee.chunk_length_s??0,Ve=Ee.force_full_sequences??!1;let Xe=Ee.stride_length_s??null;const lt={...Ee};je==="word"&&(lt.return_token_timestamps=!0,lt.return_timestamps=!1);const ft=!Array.isArray(se);ft&&(se=[se]);const gt=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,vt=this.processor.feature_extractor.config.hop_length,M=this.processor.feature_extractor.config.sampling_rate,W=await Z(se,M),S=[];for(const Q of W){let fe=[];if(qe>0){if(Xe===null)Xe=qe/6;else if(qe<=Xe)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const At=M*qe,mt=M*Xe,Se=At-2*mt;let E=0;for(;;){const X=E+At,ye=Q.subarray(E,X),Be=await this.processor(ye),Ae=E===0,Ne=X>=Q.length;if(fe.push({stride:[ye.length,Ae?0:mt,Ne?0:mt],input_features:Be.input_features,is_last:Ne}),Ne)break;E+=Se}}else fe=[{stride:[Q.length,0,0],input_features:(await this.processor(Q)).input_features,is_last:!0}];for(const At of fe){lt.num_frames=Math.floor(At.stride[0]/vt);const mt=await this.model.generate({inputs:At.input_features,...lt});je==="word"?(At.tokens=mt.sequences.tolist()[0],At.token_timestamps=mt.token_timestamps.tolist()[0].map(Se=>(0,B.round)(Se,2))):At.tokens=mt[0].tolist(),At.stride=At.stride.map(Se=>Se/M)}const[Ye,et]=this.tokenizer._decode_asr(fe,{time_precision:gt,return_timestamps:je,force_full_sequences:Ve});S.push({text:Ye,...et})}return ft?S[0]:S}}class Ue extends ae{constructor(se){super(se)}async _call(se,Ee={}){const je=Array.isArray(se),qe=await ee(se),{pixel_values:Ve}=await this.processor(qe),Xe=[];for(const lt of Ve){lt.dims=[1,...lt.dims];const ft=await this.model.generate({inputs:lt,...Ee}),gt=this.tokenizer.batch_decode(ft,{skip_special_tokens:!0}).map(vt=>({generated_text:vt.trim()}));Xe.push(gt)}return je?Xe:Xe[0]}}class bt extends ae{constructor(se){super(se)}async _call(se,{top_k:Ee=5}={}){const je=await ee(se),{pixel_values:qe}=await this.processor(je),Ve=await this.model({pixel_values:qe}),Xe=this.model.config.id2label,lt=[];for(const ft of Ve.logits){const gt=await(0,N.topk)(new N.Tensor("float32",(0,B.softmax)(ft.data),ft.dims),Ee),vt=gt[0].tolist(),W=gt[1].tolist().map((S,Q)=>({label:Xe?Xe[S]:`LABEL_${S}`,score:vt[Q]}));lt.push(W)}return Array.isArray(se)?lt:lt[0]}}class ge extends ae{constructor(se){super(se),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(se,{threshold:Ee=.5,mask_threshold:je=.5,overlap_mask_area_threshold:qe=.8,label_ids_to_fuse:Ve=null,target_sizes:Xe=null,subtask:lt=null}={}){if(Array.isArray(se)&&se.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const gt=await ee(se),vt=gt.map(et=>[et.height,et.width]),{pixel_values:M,pixel_mask:W}=await this.processor(gt),S=await this.model({pixel_values:M,pixel_mask:W});let Q=null;if(lt!==null)Q=this.subtasks_mapping[lt];else for(let[et,At]of Object.entries(this.subtasks_mapping))if(At in this.processor.feature_extractor){Q=this.processor.feature_extractor[At].bind(this.processor.feature_extractor),lt=et;break}const fe=this.model.config.id2label,Ye=[];if(lt==="panoptic"||lt==="instance"){const et=Q(S,Ee,je,qe,Ve,Xe??vt)[0],At=et.segmentation;for(const mt of et.segments_info){const Se=new Uint8ClampedArray(At.data.length);for(let X=0;X<At.data.length;++X)At.data[X]===mt.id&&(Se[X]=255);const E=new P.RawImage(Se,At.dims[1],At.dims[0],1);Ye.push({score:mt.score,label:fe[mt.label_id],mask:E})}}else if(lt==="semantic"){const{segmentation:et,labels:At}=Q(S,Xe??vt)[0];for(const mt of At){const Se=new Uint8ClampedArray(et.data.length);for(let X=0;X<et.data.length;++X)et.data[X]===mt&&(Se[X]=255);const E=new P.RawImage(Se,et.dims[1],et.dims[0],1);Ye.push({score:null,label:fe[mt],mask:E})}}else throw Error(`Subtask ${lt} not supported.`);return Ye}}class V extends ae{constructor(se){super(se)}async _call(se,Ee,{hypothesis_template:je="This is a photo of {}"}={}){const qe=Array.isArray(se),Ve=await ee(se),Xe=Ee.map(W=>je.replace("{}",W)),lt=this.tokenizer(Xe,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:ft}=await this.processor(Ve),gt=await this.model({...lt,pixel_values:ft}),vt=this.model.config.model_type==="siglip"?W=>W.sigmoid().data:W=>(0,B.softmax)(W.data),M=[];for(const W of gt.logits_per_image){const Q=[...vt(W)].map((fe,Ye)=>({score:fe,label:Ee[Ye]}));Q.sort((fe,Ye)=>Ye.score-fe.score),M.push(Q)}return qe?M:M[0]}}class he extends ae{constructor(se){super(se)}async _call(se,{threshold:Ee=.9,percentage:je=!1}={}){const qe=Array.isArray(se);if(qe&&se.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const Ve=await ee(se),Xe=je?null:Ve.map(S=>[S.height,S.width]),{pixel_values:lt,pixel_mask:ft}=await this.processor(Ve),gt=await this.model({pixel_values:lt,pixel_mask:ft}),vt=this.processor.feature_extractor.post_process_object_detection(gt,Ee,Xe),M=this.model.config.id2label,W=vt.map(S=>S.boxes.map((Q,fe)=>({score:S.scores[fe],label:M[S.classes[fe]],box:ie(Q,!je)})));return qe?W:W[0]}}class $e extends ae{constructor(se){super(se)}async _call(se,Ee,{threshold:je=.1,top_k:qe=null,percentage:Ve=!1}={}){const Xe=Array.isArray(se),lt=await ee(se),ft=this.tokenizer(Ee,{padding:!0,truncation:!0}),gt=await this.processor(lt),vt=[];for(let M=0;M<lt.length;++M){const W=lt[M],S=Ve?null:[[W.height,W.width]],Q=gt.pixel_values[M].unsqueeze_(0),fe=await this.model({...ft,pixel_values:Q}),Ye=this.processor.feature_extractor.post_process_object_detection(fe,je,S,!0)[0];let et=Ye.boxes.map((At,mt)=>({score:Ye.scores[mt],label:Ee[Ye.classes[mt]],box:ie(At,!Ve)})).sort((At,mt)=>mt.score-At.score);qe!==null&&(et=et.slice(0,qe)),vt.push(et)}return Xe?vt:vt[0]}}class ne extends ae{constructor(se){super(se)}async _call(se,Ee,je={}){throw new Error("This pipeline is not yet supported in Transformers.js v3.")}}class Ke extends ae{constructor(Ee){super(Ee);Te(this,"DEFAULT_VOCODER_ID","Xenova/speecht5_hifigan");this.vocoder=Ee.vocoder??null}async _call(Ee,{speaker_embeddings:je=null}={}){return this.processor?this._call_text_to_spectrogram(Ee,{speaker_embeddings:je}):this._call_text_to_waveform(Ee)}async _call_text_to_waveform(Ee){const je=this.tokenizer(Ee,{padding:!0,truncation:!0}),{waveform:qe}=await this.model(je),Ve=this.model.config.sampling_rate;return{audio:qe.data,sampling_rate:Ve}}async _call_text_to_spectrogram(Ee,{speaker_embeddings:je}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await H.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof je=="string"||je instanceof URL)&&(je=new Float32Array(await(await fetch(je)).arrayBuffer())),je instanceof Float32Array)je=new N.Tensor("float32",je,[1,je.length]);else if(!(je instanceof N.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:qe}=this.tokenizer(Ee,{padding:!0,truncation:!0}),{waveform:Ve}=await this.model.generate_speech(qe,je,{vocoder:this.vocoder}),Xe=this.processor.feature_extractor.config.sampling_rate;return{audio:Ve.data,sampling_rate:Xe}}}class ct extends ae{constructor(se){super(se)}async _call(se){const Ee=await ee(se),je=await this.processor(Ee),qe=await this.model(je),Ve=[];for(const Xe of qe.reconstruction){const lt=Xe.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");Ve.push(P.RawImage.fromTensor(lt))}return Ve.length>1?Ve:Ve[0]}}class rt extends ae{constructor(se){super(se)}async _call(se){const Ee=await ee(se),je=await this.processor(Ee),{predicted_depth:qe}=await this.model(je),Ve=[];for(let Xe=0;Xe<Ee.length;++Xe){const lt=(0,N.interpolate)(qe[Xe],Ee[Xe].size.reverse(),"bilinear",!1),ft=lt.mul_(255/(0,B.max)(lt.data)[0]).to("uint8");Ve.push({predicted_depth:qe[Xe],depth:P.RawImage.fromTensor(ft)})}return Ve.length>1?Ve:Ve[0]}}const ot=Object.freeze({"text-classification":{tokenizer:x.AutoTokenizer,pipeline:z,model:H.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:x.AutoTokenizer,pipeline:te,model:H.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:x.AutoTokenizer,pipeline:G,model:H.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:x.AutoTokenizer,pipeline:re,model:H.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:x.AutoTokenizer,pipeline:L,model:H.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:x.AutoTokenizer,pipeline:O,model:H.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:x.AutoTokenizer,pipeline:pe,model:H.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:x.AutoTokenizer,pipeline:A,model:H.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:x.AutoTokenizer,pipeline:_e,model:H.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:ke,model:H.AutoModelForAudioClassification,processor:we.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:x.AutoTokenizer,pipeline:De,model:H.AutoModel,processor:we.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:x.AutoTokenizer,pipeline:Je,model:[H.AutoModelForSpeechSeq2Seq,H.AutoModelForCTC],processor:we.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:x.AutoTokenizer,pipeline:Ke,model:[H.AutoModelForTextToWaveform,H.AutoModelForTextToSpectrogram],processor:[we.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:x.AutoTokenizer,pipeline:Ue,model:H.AutoModelForVision2Seq,processor:we.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:bt,model:H.AutoModelForImageClassification,processor:we.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:ge,model:[H.AutoModelForImageSegmentation,H.AutoModelForSemanticSegmentation],processor:we.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:x.AutoTokenizer,pipeline:V,model:H.AutoModel,processor:we.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:he,model:H.AutoModelForObjectDetection,processor:we.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:x.AutoTokenizer,pipeline:$e,model:H.AutoModelForZeroShotObjectDetection,processor:we.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:x.AutoTokenizer,pipeline:ne,model:H.AutoModelForDocumentQuestionAnswering,processor:we.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:ct,model:H.AutoModelForImageToImage,processor:we.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:rt,model:H.AutoModelForDepthEstimation,processor:we.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:x.AutoTokenizer,pipeline:Me,model:H.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:we.AutoProcessor,pipeline:Ce,model:[H.AutoModelForImageFeatureExtraction,H.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),Re=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function st(ze,se=null,{progress_callback:Ee=null,config:je=null,cache_dir:qe=null,local_files_only:Ve=!1,revision:Xe="main",device:lt=null,dtype:ft=null,model_file_name:gt=null,session_options:vt={}}={}){ze=Re[ze]??ze;const M=ot[ze.split("_",1)[0]];if(!M)throw Error(`Unsupported pipeline: ${ze}. Must be one of [${Object.keys(ot)}]`);se||(se=M.default.model,console.log(`No model specified. Using default model: "${se}".`));const W={progress_callback:Ee,config:je,cache_dir:qe,local_files_only:Ve,revision:Xe,device:lt,dtype:ft,model_file_name:gt,session_options:vt},S=new Map([["tokenizer",M.tokenizer],["model",M.model],["processor",M.processor]]),Q=await Tt(S,se,W);Q.task=ze,(0,xe.dispatchCallback)(Ee,{status:"ready",task:ze,model:se});const fe=M.pipeline;return new fe(Q)}async function Tt(ze,se,Ee){const je=Object.create(null),qe=[];for(let[Ve,Xe]of ze.entries()){if(!Xe)continue;let lt;Array.isArray(Xe)?lt=new Promise(async(ft,gt)=>{var M,W;let vt;for(let S of Xe){if(S===null){ft(null);return}try{ft(await S.from_pretrained(se,Ee));return}catch(Q){if((M=Q.message)!=null&&M.includes("Unsupported model type"))vt=Q;else if((W=Q.message)!=null&&W.includes("Could not locate file"))vt=Q;else{gt(Q);return}}}gt(vt)}):lt=Xe.from_pretrained(se,Ee),je[Ve]=lt,qe.push(lt)}await Promise.all(qe);for(let[Ve,Xe]of Object.entries(je))je[Ve]=await Xe;return je}},"./src/processors.js":(xt,me,l)=>{l.r(me),l.d(me,{ASTFeatureExtractor:()=>Xe,AutoProcessor:()=>mt,BeitFeatureExtractor:()=>rt,BitImageProcessor:()=>re,CLIPFeatureExtractor:()=>L,CLIPImageProcessor:()=>O,ChineseCLIPFeatureExtractor:()=>j,ClapFeatureExtractor:()=>lt,ConvNextFeatureExtractor:()=>_e,ConvNextImageProcessor:()=>Me,DPTFeatureExtractor:()=>te,DPTImageProcessor:()=>G,DeiTFeatureExtractor:()=>ct,DetrFeatureExtractor:()=>st,DonutFeatureExtractor:()=>ot,EfficientNetImageProcessor:()=>De,FeatureExtractor:()=>ie,Florence2Processor:()=>At,GLPNFeatureExtractor:()=>pe,ImageFeatureExtractor:()=>ae,MobileNetV1FeatureExtractor:()=>Je,MobileNetV2FeatureExtractor:()=>Ue,MobileNetV3FeatureExtractor:()=>bt,MobileNetV4FeatureExtractor:()=>ge,MobileViTFeatureExtractor:()=>V,MobileViTImageProcessor:()=>he,NougatImageProcessor:()=>Re,OwlViTFeatureExtractor:()=>$e,OwlViTProcessor:()=>et,Owlv2ImageProcessor:()=>ne,Processor:()=>M,PyAnnoteFeatureExtractor:()=>ft,PyAnnoteProcessor:()=>fe,RTDetrImageProcessor:()=>Ke,SamImageProcessor:()=>ze,SamProcessor:()=>W,SeamlessM4TFeatureExtractor:()=>Ve,SegformerFeatureExtractor:()=>z,SiglipImageProcessor:()=>A,SpeechT5FeatureExtractor:()=>vt,SpeechT5Processor:()=>Ye,Swin2SRImageProcessor:()=>se,ViTFeatureExtractor:()=>Ce,ViTImageProcessor:()=>ke,VitMatteImageProcessor:()=>Ee,Wav2Vec2FeatureExtractor:()=>qe,Wav2Vec2ProcessorWithLM:()=>Q,WeSpeakerFeatureExtractor:()=>gt,WhisperFeatureExtractor:()=>je,WhisperProcessor:()=>S,YolosFeatureExtractor:()=>Tt});var x=l("./src/utils/generic.js"),H=l("./src/utils/core.js"),we=l("./src/utils/hub.js"),be=l("./src/utils/maths.js"),xe=l("./src/utils/tensor.js");l("./src/utils/image.js");var B=l("./src/utils/audio.js");function $([Se,E,X,ye]){return[Se-X/2,E-ye/2,Se+X/2,E+ye/2]}function N(Se,E=.5,X=null,ye=!1){const Be=Se.logits,Ae=Se.pred_boxes,[Ne,ut,nt]=Be.dims;if(X!==null&&X.length!==Ne)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Mt=[];for(let ht=0;ht<Ne;++ht){let Ct=X!==null?X[ht]:null,Rt={boxes:[],classes:[],scores:[]},Qe=Be[ht],Vt=Ae[ht];for(let Nt=0;Nt<ut;++Nt){let Ht=Qe[Nt],Xt=[],er;if(ye){er=Ht.sigmoid().data;for(let Wt=0;Wt<er.length;++Wt)er[Wt]>E&&Xt.push(Wt)}else{let Wt=(0,be.max)(Ht.data)[1];if(Wt===nt-1||(er=(0,be.softmax)(Ht.data),er[Wt]<E))continue;Xt.push(Wt)}for(const Wt of Xt){let Tr=Vt[Nt].data;Tr=$(Tr),Ct!==null&&(Tr=Tr.map((Ur,Cr)=>Ur*Ct[(Cr+1)%2])),Rt.boxes.push(Tr),Rt.classes.push(Wt),Rt.scores.push(er[Wt])}}Mt.push(Rt)}return Mt}function P(Se,E){var X;if(!(Se instanceof Float32Array||Se instanceof Float64Array))throw new Error(`${E} expects input to be a Float32Array or a Float64Array, but got ${((X=Se==null?void 0:Se.constructor)==null?void 0:X.name)??typeof Se} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}function ee(Se,E,X=0,ye=null){const Be=Se/E;let Ae=(0,be.bankers_round)(Be)*E;return ye!==null&&Ae>ye&&(Ae=Math.floor(Be)*E),Ae<X&&(Ae=Math.ceil(Be)*E),Ae}function Z([Se,E],X){return[Math.max(Math.floor(Se/X),1)*X,Math.max(Math.floor(E/X),1)*X]}class ie extends x.Callable{constructor(E){super(),this.config=E}}class ae extends ie{constructor(E){super(E),this.image_mean=this.config.image_mean??this.config.mean,this.image_std=this.config.image_std??this.config.std,this.resample=this.config.resample??2,this.do_rescale=this.config.do_rescale??!0,this.rescale_factor=this.config.rescale_factor??.00392156862745098,this.do_normalize=this.config.do_normalize,this.do_resize=this.config.do_resize,this.do_thumbnail=this.config.do_thumbnail,this.size=this.config.size,this.size_divisibility=this.config.size_divisibility??this.config.size_divisor,this.do_center_crop=this.config.do_center_crop,this.crop_size=this.config.crop_size,this.do_convert_rgb=this.config.do_convert_rgb??!0,this.do_crop_margin=this.config.do_crop_margin,this.pad_size=this.config.pad_size,this.do_pad=this.config.do_pad,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=this.config.do_flip_channel_order??!1}async thumbnail(E,X,ye=2){const Be=E.height,Ae=E.width,Ne=X.height,ut=X.width;let nt=Math.min(Be,Ne),Mt=Math.min(Ae,ut);return nt===Be&&Mt===Ae?E:(Be>Ae?Mt=Math.floor(Ae*nt/Be):Ae>Be&&(nt=Math.floor(Be*Mt/Ae)),await E.resize(Mt,nt,{resample:ye}))}async crop_margin(E,X=200){const ye=E.clone().grayscale(),Be=(0,be.min)(ye.data)[0],Ne=(0,be.max)(ye.data)[0]-Be;if(Ne===0)return E;const ut=X/255;let nt=ye.width,Mt=ye.height,ht=0,Ct=0;const Rt=ye.data;for(let Qe=0;Qe<ye.height;++Qe){const Vt=Qe*ye.width;for(let Nt=0;Nt<ye.width;++Nt)(Rt[Vt+Nt]-Be)/Ne<ut&&(nt=Math.min(nt,Nt),Mt=Math.min(Mt,Qe),ht=Math.max(ht,Nt),Ct=Math.max(Ct,Qe))}return E=await E.crop([nt,Mt,ht,Ct]),E}pad_image(E,X,ye,{mode:Be="constant",center:Ae=!1,constant_values:Ne=0}={}){const[ut,nt,Mt]=X;let ht,Ct;if(typeof ye=="number"?(ht=ye,Ct=ye):(ht=ye.width,Ct=ye.height),ht!==nt||Ct!==ut){const Rt=new Float32Array(ht*Ct*Mt);if(Array.isArray(Ne))for(let Nt=0;Nt<Rt.length;++Nt)Rt[Nt]=Ne[Nt%Mt];else Ne!==0&&Rt.fill(Ne);const[Qe,Vt]=Ae?[Math.floor((ht-nt)/2),Math.floor((Ct-ut)/2)]:[0,0];for(let Nt=0;Nt<ut;++Nt){const Ht=(Nt+Vt)*ht,Xt=Nt*nt;for(let er=0;er<nt;++er){const Wt=(Ht+er+Qe)*Mt,Tr=(Xt+er)*Mt;for(let Ur=0;Ur<Mt;++Ur)Rt[Wt+Ur]=E[Tr+Ur]}}if(Be==="symmetric"){if(Ae)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const Nt=ut-1,Ht=nt-1;for(let Xt=0;Xt<Ct;++Xt){const er=Xt*ht,Wt=(0,H.calculateReflectOffset)(Xt,Nt)*nt;for(let Tr=0;Tr<ht;++Tr){if(Xt<ut&&Tr<nt)continue;const Ur=(er+Tr)*Mt,Cr=(Wt+(0,H.calculateReflectOffset)(Tr,Ht))*Mt;for(let Ze=0;Ze<Mt;++Ze)Rt[Ur+Ze]=E[Cr+Ze]}}}E=Rt,X=[Ct,ht,Mt]}return[E,X]}rescale(E){for(let X=0;X<E.length;++X)E[X]=this.rescale_factor*E[X]}get_resize_output_image_size(E,X){const[ye,Be]=E.size;let Ae,Ne;if(this.do_thumbnail){const{height:ut,width:nt}=X;Ae=Math.min(ut,nt)}else Number.isInteger(X)?(Ae=X,Ne=this.config.max_size??Ae):X!==void 0&&(Ae=X.shortest_edge,Ne=X.longest_edge);if(Ae!==void 0||Ne!==void 0){const ut=Ae===void 0?1:Math.max(Ae/ye,Ae/Be),nt=ye*ut,Mt=Be*ut,ht=Ne===void 0?1:Math.min(Ne/nt,Ne/Mt);let Ct=Math.floor(Number((nt*ht).toFixed(2))),Rt=Math.floor(Number((Mt*ht).toFixed(2)));return this.size_divisibility!==void 0&&([Ct,Rt]=Z([Ct,Rt],this.size_divisibility)),[Ct,Rt]}else if(X!==void 0&&X.width!==void 0&&X.height!==void 0){let ut=X.width,nt=X.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let Mt=nt/Be,ht=ut/ye;Math.abs(1-ht)<Math.abs(1-Mt)?Mt=ht:ht=Mt,nt=ee(Mt*Be,this.config.ensure_multiple_of),ut=ee(ht*ye,this.config.ensure_multiple_of)}return[ut,nt]}else{if(this.size_divisibility!==void 0)return Z([ye,Be],this.size_divisibility);throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(X)}`)}}async resize(E){const[X,ye]=this.get_resize_output_image_size(E,this.size);return await E.resize(X,ye,{resample:this.resample})}async preprocess(E,{do_normalize:X=null,do_pad:ye=null,do_convert_rgb:Be=null,do_convert_grayscale:Ae=null,do_flip_channel_order:Ne=null}={}){this.do_crop_margin&&(E=await this.crop_margin(E));const[ut,nt]=E.size;if(Be??this.do_convert_rgb?E=E.rgb():Ae&&(E=E.grayscale()),this.do_resize&&(E=await this.resize(E)),this.do_thumbnail&&(E=await this.thumbnail(E,this.size,this.resample)),this.do_center_crop){let Qe,Vt;Number.isInteger(this.crop_size)?(Qe=this.crop_size,Vt=this.crop_size):(Qe=this.crop_size.width,Vt=this.crop_size.height),E=await E.center_crop(Qe,Vt)}const Mt=[E.height,E.width];let ht=Float32Array.from(E.data),Ct=[E.height,E.width,E.channels];if(this.do_rescale&&this.rescale(ht),X??this.do_normalize){let Qe=this.image_mean;Array.isArray(this.image_mean)||(Qe=new Array(E.channels).fill(Qe));let Vt=this.image_std;if(Array.isArray(this.image_std)||(Vt=new Array(E.channels).fill(Qe)),Qe.length!==E.channels||Vt.length!==E.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${Qe.length}) and \`image_std\` (${Vt.length}) must match the number of channels in the image (${E.channels}).`);for(let Nt=0;Nt<ht.length;Nt+=E.channels)for(let Ht=0;Ht<E.channels;++Ht)ht[Nt+Ht]=(ht[Nt+Ht]-Qe[Ht])/Vt[Ht]}if(ye??this.do_pad){if(this.pad_size)[ht,Ct]=this.pad_image(ht,[E.height,E.width,E.channels],this.pad_size);else if(this.size_divisibility){const[Qe,Vt]=Z([Ct[1],Ct[0]],this.size_divisibility);[ht,Ct]=this.pad_image(ht,Ct,{width:Qe,height:Vt})}}if(Ne??this.do_flip_channel_order){if(Ct[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let Qe=0;Qe<ht.length;Qe+=3){const Vt=ht[Qe];ht[Qe]=ht[Qe+2],ht[Qe+2]=Vt}}const Rt=new xe.Tensor("float32",ht,Ct).permute(2,0,1);return{original_size:[nt,ut],reshaped_input_size:Mt,pixel_values:Rt}}async _call(E,...X){Array.isArray(E)||(E=[E]);const ye=await Promise.all(E.map(Ae=>this.preprocess(Ae)));return{pixel_values:(0,xe.stack)(ye.map(Ae=>Ae.pixel_values),0),original_sizes:ye.map(Ae=>Ae.original_size),reshaped_input_sizes:ye.map(Ae=>Ae.reshaped_input_size)}}}class z extends ae{post_process_semantic_segmentation(E,X=null){const ye=E.logits,Be=ye.dims[0];if(X!==null&&X.length!==Be)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const Ae=[];for(let Ne=0;Ne<Be;++Ne){const ut=X!==null?X[Ne]:null;let nt=ye[Ne];ut!==null&&(nt=(0,xe.interpolate)(nt,ut,"bilinear",!1));const[Mt,ht]=ut??nt.dims.slice(-2),Ct=new xe.Tensor("int32",new Int32Array(Mt*ht),[Mt,ht]),Rt=nt[0].data,Qe=Ct.data;for(let Xt=1;Xt<nt.dims[0];++Xt){const er=nt[Xt].data;for(let Wt=0;Wt<er.length;++Wt)er[Wt]>Rt[Wt]&&(Rt[Wt]=er[Wt],Qe[Wt]=Xt)}const Vt=new Array(nt.dims[0]),Nt=Ct.data;for(let Xt=0;Xt<Nt.length;++Xt){const er=Nt[Xt];Vt[er]=er}const Ht=Vt.filter(Xt=>Xt!==void 0);Ae.push({segmentation:Ct,labels:Ht})}return Ae}}class te extends ae{}class G extends te{}class re extends ae{}class pe extends ae{}class L extends ae{}class O extends L{}class j extends ae{}class A extends ae{}class _e extends ae{constructor(E){super(E),this.crop_pct=this.config.crop_pct??.875}async resize(E){var ye;const X=(ye=this.size)==null?void 0:ye.shortest_edge;if(X===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(X<384){const Be=Math.floor(X/this.crop_pct),[Ae,Ne]=this.get_resize_output_image_size(E,{shortest_edge:Be});E=await E.resize(Ae,Ne,{resample:this.resample}),E=await E.center_crop(X,X)}else E=await E.resize(X,X,{resample:this.resample});return E}}class Me extends _e{}class Ce extends ae{}class ke extends ae{}class De extends ae{constructor(E){super(E),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(X=>X*X))}}class Je extends ae{}class Ue extends ae{}class bt extends ae{}class ge extends ae{}class V extends ae{}class he extends V{}class $e extends ae{post_process_object_detection(...E){return N(...E)}}class ne extends $e{}class Ke extends ae{post_process_object_detection(...E){return N(...E)}}class ct extends ae{}class rt extends ae{}class ot extends ae{pad_image(E,X,ye,Be={}){const[Ae,Ne,ut]=X;let nt=this.image_mean;Array.isArray(this.image_mean)||(nt=new Array(ut).fill(nt));let Mt=this.image_std;Array.isArray(Mt)||(Mt=new Array(ut).fill(nt));const ht=nt.map((Ct,Rt)=>-Ct/Mt[Rt]);return super.pad_image(E,X,ye,{center:!0,constant_values:ht,...Be})}}class Re extends ot{}class st extends ae{async _call(E){const X=await super._call(E),ye=[X.pixel_values.dims[0],64,64],Be=new xe.Tensor("int64",new BigInt64Array(ye.reduce((Ae,Ne)=>Ae*Ne)).fill(1n),ye);return{...X,pixel_mask:Be}}post_process_object_detection(...E){return N(...E)}remove_low_and_no_objects(E,X,ye,Be){let Ae=[],Ne=[],ut=[];for(let nt=0;nt<E.dims[0];++nt){let Mt=E[nt],ht=X[nt],Ct=(0,be.max)(Mt.data)[1];if(Ct===Be)continue;let Qe=(0,be.softmax)(Mt.data)[Ct];Qe>ye&&(Ae.push(ht),Ne.push(Qe),ut.push(Ct))}return[Ae,Ne,ut]}check_segment_validity(E,X,ye,Be=.5,Ae=.8){let Ne=[],ut=0,nt=0;const Mt=X[ye].data;for(let Ct=0;Ct<E.length;++Ct)E[Ct]===ye&&(Ne.push(Ct),++ut),Mt[Ct]>=Be&&++nt;let ht=ut>0&&nt>0;return ht&&(ht=ut/nt>Ae),[ht,Ne]}compute_segments(E,X,ye,Be,Ae,Ne=null,ut=null){let[nt,Mt]=ut??E[0].dims,ht=new xe.Tensor("int32",new Int32Array(nt*Mt),[nt,Mt]),Ct=[];if(ut!==null)for(let Ht=0;Ht<E.length;++Ht)E[Ht]=(0,xe.interpolate)(E[Ht],ut,"bilinear",!1);let Rt=new Int32Array(E[0].data.length),Qe=new Float32Array(E[0].data.length);for(let Ht=0;Ht<E.length;++Ht){let Xt=X[Ht];const er=E[Ht].data;for(let Wt=0;Wt<er.length;++Wt)er[Wt]*=Xt,er[Wt]>Qe[Wt]&&(Rt[Wt]=Ht,Qe[Wt]=er[Wt])}let Vt=0;const Nt=ht.data;for(let Ht=0;Ht<ye.length;++Ht){let Xt=ye[Ht],[er,Wt]=this.check_segment_validity(Rt,E,Ht,Be,Ae);if(er){++Vt;for(let Tr of Wt)Nt[Tr]=Vt;Ct.push({id:Vt,label_id:Xt,score:X[Ht]})}}return[ht,Ct]}post_process_panoptic_segmentation(E,X=.5,ye=.5,Be=.8,Ae=null,Ne=null){Ae===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),Ae=new Set);const ut=E.logits,Mt=E.pred_masks.sigmoid();let[ht,Ct,Rt]=ut.dims;if(Rt-=1,Ne!==null&&Ne.length!==ht)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Qe=[];for(let Vt=0;Vt<ht;++Vt){let Nt=Ne!==null?Ne[Vt]:null,Ht=ut[Vt],Xt=Mt[Vt],[er,Wt,Tr]=this.remove_low_and_no_objects(Ht,Xt,X,Rt);if(Tr.length===0){let[Ze,$t]=Nt??Xt.dims.slice(-2),Bt=new xe.Tensor("int32",new Int32Array(Ze*$t).fill(-1),[Ze,$t]);Qe.push({segmentation:Bt,segments_info:[]});continue}let[Ur,Cr]=this.compute_segments(er,Wt,Tr,ye,Be,Ae,Nt);Qe.push({segmentation:Ur,segments_info:Cr})}return Qe}post_process_instance_segmentation(){throw Error("Not implemented yet")}}class Tt extends ae{post_process_object_detection(...E){return N(...E)}}class ze extends ae{reshape_input_points(E,X,ye,Be=!1){E=structuredClone(E);let Ae=(0,H.calculateDimensions)(E);if(Ae.length===3)Be||(Ae=[1,...Ae]),E=[E];else if(Ae.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let Ne=0;Ne<E.length;++Ne){let ut=X[Ne],nt=ye[Ne],Mt=[nt[0]/ut[0],nt[1]/ut[1]];for(let ht=0;ht<E[Ne].length;++ht)for(let Ct=0;Ct<E[Ne][ht].length;++Ct)for(let Rt=0;Rt<E[Ne][ht][Ct].length;++Rt)E[Ne][ht][Ct][Rt]*=Mt[Rt%2]}return new xe.Tensor("float32",Float32Array.from(E.flat(1/0)),Ae)}add_input_labels(E,X){let ye=(0,H.calculateDimensions)(E);if(ye.length===2)ye=[1,...ye],E=[E];else if(ye.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(ye.some((Be,Ae)=>Be!==X.dims[Ae]))throw Error(`The first ${ye.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new xe.Tensor("int64",E.flat(1/0).map(BigInt),ye)}async _call(E,{input_points:X=null,input_labels:ye=null,input_boxes:Be=null}={}){const Ae=await super._call(E);if(X&&(Ae.input_points=this.reshape_input_points(X,Ae.original_sizes,Ae.reshaped_input_sizes)),ye){if(!Ae.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");Ae.input_labels=this.add_input_labels(ye,Ae.input_points)}return Be&&(Ae.input_boxes=this.reshape_input_points(Be,Ae.original_sizes,Ae.reshaped_input_sizes,!0)),Ae}async post_process_masks(E,X,ye,{mask_threshold:Be=0,binarize:Ae=!0,pad_size:Ne=null}={}){const ut=[];Ne=Ne??this.pad_size;const nt=[Ne.height,Ne.width];for(let Mt=0;Mt<X.length;++Mt){const ht=X[Mt],Ct=ye[Mt];let Rt=await(0,xe.interpolate_4d)(E[Mt],{mode:"bilinear",size:nt});if(Rt=Rt.slice(null,null,[0,Ct[0]],[0,Ct[1]]),Rt=await(0,xe.interpolate_4d)(Rt,{mode:"bilinear",size:ht}),Ae){const Qe=Rt.data,Vt=new Uint8Array(Qe.length);for(let Nt=0;Nt<Qe.length;++Nt)Qe[Nt]>Be&&(Vt[Nt]=1);Rt=new xe.Tensor("bool",Vt,Rt.dims)}ut.push(Rt)}return ut}generate_crop_boxes(E,X,{crop_n_layers:ye=0,overlap_ratio:Be=.3413333333333333,points_per_crop:Ae=32,crop_n_points_downscale_factor:Ne=1}={}){}}class se extends ae{pad_image(E,X,ye,Be={}){const[Ae,Ne,ut]=X;return super.pad_image(E,X,{width:Ne+(ye-Ne%ye)%ye,height:Ae+(ye-Ae%ye)%ye},{mode:"symmetric",center:!1,constant_values:-1,...Be})}}class Ee extends ae{async _call(E,X){Array.isArray(E)||(E=[E]),Array.isArray(X)||(X=[X]);const ye=await Promise.all(E.map(Ne=>this.preprocess(Ne))),Be=await Promise.all(X.map(Ne=>this.preprocess(Ne,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,xe.stack)(ye.map((Ne,ut)=>(0,xe.cat)([Ne.pixel_values,Be[ut].pixel_values],0)),0),original_sizes:ye.map(Ne=>Ne.original_size),reshaped_input_sizes:ye.map(Ne=>Ne.reshaped_input_size)}}}class je extends ie{constructor(E){var X;super(E),(X=this.config).mel_filters??(X.mel_filters=(0,B.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney")),this.window=(0,B.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(E){const X=await(0,B.spectrogram)(E,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),ye=X.data,Be=(0,be.max)(ye)[0];for(let Ae=0;Ae<ye.length;++Ae)ye[Ae]=(Math.max(ye[Ae],Be-8)+4)/4;return X}async _call(E){P(E,"WhisperFeatureExtractor");let X;return E.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),X=E.slice(0,this.config.n_samples)):(X=new Float32Array(this.config.n_samples),X.set(E)),{input_features:(await this._extract_fbank_features(X)).unsqueeze_(0)}}}class qe extends ie{_zero_mean_unit_var_norm(E){const ye=E.reduce((Ae,Ne)=>Ae+Ne,0)/E.length,Be=E.reduce((Ae,Ne)=>Ae+(Ne-ye)**2,0)/E.length;return E.map(Ae=>(Ae-ye)/Math.sqrt(Be+1e-7))}async _call(E){P(E,"Wav2Vec2FeatureExtractor"),E instanceof Float64Array&&(E=new Float32Array(E));let X=E;this.config.do_normalize&&(X=this._zero_mean_unit_var_norm(X));const ye=[1,X.length];return{input_values:new xe.Tensor("float32",X,ye),attention_mask:new xe.Tensor("int64",new BigInt64Array(X.length).fill(1n),ye)}}}class Ve extends ie{constructor(E){super(E);const X=this.config.sampling_rate,ye=(0,B.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(X/2),X,null,"kaldi",!0);for(let Be=0;Be<ye.length;++Be)ye[Be].push(0);this.mel_filters=ye,this.window=(0,B.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(E,X){return E=E.map(ye=>ye*32768),(0,B.spectrogram)(E,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:X,transpose:!0})}async _call(E,{padding:X=!0,pad_to_multiple_of:ye=2,do_normalize_per_mel_bins:Be=!0,return_attention_mask:Ae=!0}={}){P(E,"SeamlessM4TFeatureExtractor");let Ne=await this._extract_fbank_features(E,this.config.max_length);if(Be){const[Vt,Nt]=Ne.dims,Ht=Ne.data;for(let Xt=0;Xt<Nt;++Xt){let er=0;for(let Cr=0;Cr<Vt;++Cr)er+=Ht[Cr*Nt+Xt];const Wt=er/Vt;let Tr=0;for(let Cr=0;Cr<Vt;++Cr)Tr+=(Ht[Cr*Nt+Xt]-Wt)**2;Tr/=Vt-1;const Ur=Math.sqrt(Tr+1e-7);for(let Cr=0;Cr<Vt;++Cr){const Ze=Cr*Nt+Xt;Ht[Ze]=(Ht[Ze]-Wt)/Ur}}}let ut;if(X){const[Vt,Nt]=Ne.dims,Ht=Ne.data,Xt=Vt%ye;if(Xt>0){const er=new Float32Array(Nt*(Vt+Xt));er.set(Ht),er.fill(this.config.padding_value,Ht.length);const Wt=Vt+Xt;Ne=new xe.Tensor(Ne.type,er,[Wt,Nt]),Ae&&(ut=new xe.Tensor("int64",new BigInt64Array(Wt),[1,Wt]),ut.data.fill(1n,0,Vt))}}const[nt,Mt]=Ne.dims,ht=this.config.stride;if(nt%ht!==0)throw new Error(`The number of frames (${nt}) must be a multiple of the stride (${ht}).`);const Rt=Ne.view(1,Math.floor(nt/ht),Mt*ht),Qe={input_features:Rt};if(Ae){const Vt=Rt.dims[1],Nt=new BigInt64Array(Vt);if(ut){const Ht=ut.data;for(let Xt=1,er=0;Xt<nt;Xt+=ht,++er)Nt[er]=Ht[Xt]}else Nt.fill(1n);Qe.attention_mask=new xe.Tensor("int64",Nt,[1,Vt])}return Qe}}class Xe extends ie{constructor(E){super(E);const X=this.config.sampling_rate,ye=(0,B.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(X/2),X,null,"kaldi",!0);for(let Be=0;Be<ye.length;++Be)ye[Be].push(0);this.mel_filters=ye,this.window=(0,B.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(E,X){return(0,B.spectrogram)(E,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:X,transpose:!0})}async _call(E){P(E,"ASTFeatureExtractor");const X=await this._extract_fbank_features(E,this.config.max_length);if(this.config.do_normalize){const ye=this.std*2,Be=X.data;for(let Ae=0;Ae<Be.length;++Ae)Be[Ae]=(Be[Ae]-this.mean)/ye}return{input_values:X.unsqueeze_(0)}}}class lt extends ie{constructor(E){super(E),this.mel_filters=(0,B.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,B.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,B.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(E,X,ye,Be){let Ae;const Ne=E.length-X;if(Ne>0)if(ye==="rand_trunc"){const ut=Math.floor(Math.random()*(Ne+1));E=E.subarray(ut,ut+X),Ae=await this._extract_fbank_features(E,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${ye}" not implemented`);else{if(Ne<0){let ut=new Float64Array(X);if(ut.set(E),Be==="repeat")for(let nt=E.length;nt<X;nt+=E.length)ut.set(E.subarray(0,Math.min(E.length,X-nt)),nt);else if(Be==="repeatpad")for(let nt=E.length;nt<-Ne;nt+=E.length)ut.set(E,nt);E=ut}if(ye==="fusion")throw new Error(`Truncation strategy "${ye}" not implemented`);Ae=await this._extract_fbank_features(E,this.mel_filters_slaney,this.config.nb_max_samples)}return Ae.unsqueeze_(0)}async _extract_fbank_features(E,X,ye=null){return(0,B.spectrogram)(E,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:X,log_mel:"dB",max_num_frames:ye,do_pad:!1,transpose:!0})}async _call(E,{max_length:X=null}={}){return P(E,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(E,X??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}class ft extends ie{async _call(E){P(E,"PyAnnoteFeatureExtractor"),E instanceof Float64Array&&(E=new Float32Array(E));const X=[1,1,E.length];return{input_values:new xe.Tensor("float32",E,X)}}samples_to_frames(E){return(E-this.config.offset)/this.config.step}post_process_speaker_diarization(E,X){const ye=X/this.samples_to_frames(X)/this.config.sampling_rate,Be=[];for(const Ae of E.tolist()){const Ne=[];let ut=-1;for(let nt=0;nt<Ae.length;++nt){const Mt=(0,be.softmax)(Ae[nt]),[ht,Ct]=(0,be.max)(Mt),[Rt,Qe]=[nt,nt+1];Ct!==ut?(ut=Ct,Ne.push({id:Ct,start:Rt,end:Qe,score:ht})):(Ne.at(-1).end=Qe,Ne.at(-1).score+=ht)}Be.push(Ne.map(({id:nt,start:Mt,end:ht,score:Ct})=>({id:nt,start:Mt*ye,end:ht*ye,confidence:Ct/(ht-Mt)})))}return Be}}class gt extends ie{constructor(E){super(E);const X=this.config.sampling_rate,ye=(0,B.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(X/2),X,null,"kaldi",!0);for(let Be=0;Be<ye.length;++Be)ye[Be].push(0);this.mel_filters=ye,this.window=(0,B.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(E){return E=E.map(X=>X*32768),(0,B.spectrogram)(E,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(E){P(E,"WeSpeakerFeatureExtractor");const X=(await this._extract_fbank_features(E)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const ye=X.mean(1).data,Be=X.data,[Ae,Ne,ut]=X.dims;for(let nt=0;nt<Ae;++nt){const Mt=nt*Ne*ut,ht=nt*ut;for(let Ct=0;Ct<Ne;++Ct){const Rt=Mt+Ct*ut;for(let Qe=0;Qe<ut;++Qe)Be[Rt+Qe]-=ye[ht+Qe]}}}return{input_features:X}}}class vt extends ie{}class M extends x.Callable{constructor(E){super(),this.feature_extractor=E}async _call(E,...X){return await this.feature_extractor(E,...X)}}class W extends M{async _call(...E){return await this.feature_extractor(...E)}post_process_masks(...E){return this.feature_extractor.post_process_masks(...E)}reshape_input_points(...E){return this.feature_extractor.reshape_input_points(...E)}}class S extends M{async _call(E){return await this.feature_extractor(E)}}class Q extends M{async _call(E){return await this.feature_extractor(E)}}class fe extends M{async _call(E){return await this.feature_extractor(E)}post_process_speaker_diarization(...E){return this.feature_extractor.post_process_speaker_diarization(...E)}}class Ye extends M{async _call(E){return await this.feature_extractor(E)}}class et extends M{}class At extends M{constructor(E){super(E);const{tasks_answer_post_processing_type:X,task_prompts_without_inputs:ye,task_prompts_with_input:Be}=E.config;this.tasks_answer_post_processing_type=new Map(Object.entries(X??{})),this.task_prompts_without_inputs=new Map(Object.entries(ye??{})),this.task_prompts_with_input=new Map(Object.entries(Be??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(E){typeof E=="string"&&(E=[E]);const X=[];for(const ye of E)if(this.task_prompts_without_inputs.has(ye))X.push(this.task_prompts_without_inputs.get(ye));else{for(const[Be,Ae]of this.task_prompts_with_input)if(ye.includes(Be)){X.push(Ae.replaceAll("{input}",ye).replaceAll(Be,""));break}X.length!==E.length&&X.push(ye)}return X}post_process_generation(E,X,ye){const Be=this.tasks_answer_post_processing_type.get(X)??"pure_text";E=E.replaceAll("<s>","").replaceAll("</s>","");let Ae;switch(Be){case"pure_text":Ae=E;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const Ne=Be==="ocr"?"quad_boxes":"bboxes",ut=E.matchAll(this.regexes[Ne]),nt=[],Mt=[];for(const[ht,Ct,...Rt]of ut)nt.push(Ct?Ct.trim():nt.at(-1)??""),Mt.push(Rt.map((Qe,Vt)=>(Number(Qe)+.5)/this.size_per_bin*ye[Vt%2]));Ae={labels:nt,[Ne]:Mt};break;default:throw new Error(`Task "${X}" (of type "${Be}") not yet implemented.`)}return{[X]:Ae}}}class mt{static async from_pretrained(E,{progress_callback:X=null,config:ye=null,cache_dir:Be=null,local_files_only:Ae=!1,revision:Ne="main"}={}){let ut=ye??await(0,we.getModelJSON)(E,"preprocessor_config.json",!0,{progress_callback:X,config:ye,cache_dir:Be,local_files_only:Ae,revision:Ne}),nt=ut.feature_extractor_type??ut.image_processor_type,Mt=this.FEATURE_EXTRACTOR_CLASS_MAPPING[nt];if(!Mt)if(ut.size!==void 0)console.warn(`Feature extractor type "${nt}" not found, assuming ImageFeatureExtractor due to size parameter in config.`),Mt=ae;else throw new Error(`Unknown Feature Extractor type: ${nt}`);let ht=this.PROCESSOR_CLASS_MAPPING[ut.processor_class]??M,Ct=new Mt(ut);return new ht(Ct)}}Te(mt,"FEATURE_EXTRACTOR_CLASS_MAPPING",{ImageFeatureExtractor:ae,WhisperFeatureExtractor:je,ViTFeatureExtractor:Ce,MobileViTFeatureExtractor:V,MobileViTImageProcessor:he,MobileNetV1FeatureExtractor:Je,MobileNetV2FeatureExtractor:Ue,MobileNetV3FeatureExtractor:bt,MobileNetV4FeatureExtractor:ge,OwlViTFeatureExtractor:$e,Owlv2ImageProcessor:ne,CLIPFeatureExtractor:L,CLIPImageProcessor:O,Florence2Processor:At,ChineseCLIPFeatureExtractor:j,SiglipImageProcessor:A,ConvNextFeatureExtractor:_e,ConvNextImageProcessor:Me,SegformerFeatureExtractor:z,BitImageProcessor:re,DPTImageProcessor:G,DPTFeatureExtractor:te,GLPNFeatureExtractor:pe,BeitFeatureExtractor:rt,DeiTFeatureExtractor:ct,DetrFeatureExtractor:st,RTDetrImageProcessor:Ke,YolosFeatureExtractor:Tt,DonutFeatureExtractor:ot,NougatImageProcessor:Re,EfficientNetImageProcessor:De,ViTImageProcessor:ke,VitMatteImageProcessor:Ee,SamImageProcessor:ze,Swin2SRImageProcessor:se,Wav2Vec2FeatureExtractor:qe,SeamlessM4TFeatureExtractor:Ve,SpeechT5FeatureExtractor:vt,ASTFeatureExtractor:Xe,ClapFeatureExtractor:lt,PyAnnoteFeatureExtractor:ft,WeSpeakerFeatureExtractor:gt}),Te(mt,"PROCESSOR_CLASS_MAPPING",{WhisperProcessor:S,Wav2Vec2ProcessorWithLM:Q,PyAnnoteProcessor:fe,SamProcessor:W,SpeechT5Processor:Ye,OwlViTProcessor:et,Florence2Processor:At})},"./src/tokenizers.js":(xt,me,l)=>{l.r(me),l.d(me,{AlbertTokenizer:()=>Nt,AutoTokenizer:()=>fn,BartTokenizer:()=>Rr,BertTokenizer:()=>Vt,BlenderbotSmallTokenizer:()=>xs,BlenderbotTokenizer:()=>os,BloomTokenizer:()=>Pr,CLIPTokenizer:()=>Qt,CamembertTokenizer:()=>$t,CodeGenTokenizer:()=>as,CodeLlamaTokenizer:()=>Vs,CohereTokenizer:()=>Br,ConvBertTokenizer:()=>Ur,DebertaTokenizer:()=>er,DebertaV2Tokenizer:()=>Wt,DistilBertTokenizer:()=>Ze,ElectraTokenizer:()=>Hr,EsmTokenizer:()=>Un,FalconTokenizer:()=>ys,GPT2Tokenizer:()=>An,GPTNeoXTokenizer:()=>bs,GemmaTokenizer:()=>ss,Grok1Tokenizer:()=>Sn,HerbertTokenizer:()=>Tr,LlamaTokenizer:()=>In,M2M100Tokenizer:()=>Kn,MBart50Tokenizer:()=>jr,MBartTokenizer:()=>Jr,MPNetTokenizer:()=>ws,MarianTokenizer:()=>Ms,MobileBertTokenizer:()=>Ht,NllbTokenizer:()=>On,NougatTokenizer:()=>ls,PreTrainedTokenizer:()=>Qe,Qwen2Tokenizer:()=>Us,RoFormerTokenizer:()=>Cr,RobertaTokenizer:()=>$n,SiglipTokenizer:()=>Xn,SpeechT5Tokenizer:()=>Ts,SqueezeBertTokenizer:()=>Xt,T5Tokenizer:()=>jn,TokenizerModel:()=>Ce,VitsTokenizer:()=>Cs,Wav2Vec2CTCTokenizer:()=>vs,WhisperTokenizer:()=>is,XLMRobertaTokenizer:()=>gs,XLMTokenizer:()=>Bt,is_chinese_char:()=>pe});var x=l("./src/utils/generic.js"),H=l("./src/utils/core.js"),we=l("./src/utils/hub.js"),be=l("./src/utils/maths.js"),xe=l("./src/utils/tensor.js"),B=l("./src/utils/data-structures.js"),$=l("./node_modules/@huggingface/jinja/dist/index.js"),N=l("./src/models/whisper/common_whisper.js"),P=l("./src/utils/constants.js");async function ee(ve,_){const F=await Promise.all([(0,we.getModelJSON)(ve,"tokenizer.json",!0,_),(0,we.getModelJSON)(ve,"tokenizer_config.json",!0,_)]);return _.legacy!==null&&(F[1].legacy=_.legacy),F}function Z(ve,_){const F=[];let Y=0;for(const le of ve.matchAll(_)){const ue=le[0];Y<le.index&&F.push(ve.slice(Y,le.index)),ue.length>0&&F.push(ue),Y=le.index+ue.length}return Y<ve.length&&F.push(ve.slice(Y)),F}function ie(ve,_=!0){if(ve.Regex!==void 0){let F=ve.Regex.replace(/\\([#&~])/g,"$1");for(const[Y,le]of _e)F=F.replaceAll(Y,le);return new RegExp(F,"gu")}else if(ve.String!==void 0){const F=(0,H.escapeRegExp)(ve.String);return new RegExp(_?F:`(${F})`,"gu")}else return console.warn("Unknown pattern type:",ve),null}function ae(ve){return new Map(Object.entries(ve))}function z(ve){const _=ve.dims;switch(_.length){case 1:return ve.tolist();case 2:if(_[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return ve.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${_.length}.`)}}function te(ve){return ve.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function G(ve){return ve.replace(/[\u0300-\u036f]/g,"")}function re(ve){return G(ve.toLowerCase())}function pe(ve){return ve>=19968&&ve<=40959||ve>=13312&&ve<=19903||ve>=131072&&ve<=173791||ve>=173824&&ve<=177983||ve>=177984&&ve<=178207||ve>=178208&&ve<=183983||ve>=63744&&ve<=64255||ve>=194560&&ve<=195103}function L(ve,_,F){const Y=[];let le=0;for(;le<ve.length;){if(Y.push(ve[le]),(F.get(ve[le])??_)!==_){++le;continue}for(;le<ve.length&&(F.get(ve[le])??_)===_;)++le}return Y}function O(ve){return ve.match(/\S+/g)||[]}const j="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",A=new RegExp(`^[${j}]+$`,"gu"),_e=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"]]);class Me{constructor(_){this.content=_.content,this.id=_.id,this.single_word=_.single_word??!1,this.lstrip=_.lstrip??!1,this.rstrip=_.rstrip??!1,this.special=_.special??!1,this.normalized=_.normalized??null}}class Ce extends x.Callable{constructor(_){super(),this.config=_,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(_,...F){switch(_.type){case"WordPiece":return new ke(_);case"Unigram":return new De(_,...F);case"BPE":return new bt(_);default:if(_.vocab)return new ge(_,...F);throw new Error(`Unknown TokenizerModel type: ${_.type}`)}}_call(_){let F=this.encode(_);return this.fuse_unk&&(F=L(F,this.unk_token_id,this.tokens_to_ids)),F}encode(_){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(_){return _.map(F=>this.tokens_to_ids.get(F)??this.unk_token_id)}convert_ids_to_tokens(_){return _.map(F=>this.vocab[F]??this.unk_token)}}class ke extends Ce{constructor(_){super(_),this.tokens_to_ids=ae(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.max_input_chars_per_word=_.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[F,Y]of this.tokens_to_ids)this.vocab[Y]=F}encode(_){const F=[];for(const Y of _){const le=[...Y];if(le.length>this.max_input_chars_per_word){F.push(this.unk_token);continue}let ue=!1,Ie=0;const _t=[];for(;Ie<le.length;){let yt=le.length,wt=null;for(;Ie<yt;){let kt=le.slice(Ie,yt).join("");if(Ie>0&&(kt=this.config.continuing_subword_prefix+kt),this.tokens_to_ids.has(kt)){wt=kt;break}--yt}if(wt===null){ue=!0;break}_t.push(wt),Ie=yt}ue?F.push(this.unk_token):F.push(..._t)}return F}}class De extends Ce{constructor(_,F){super(_);const Y=_.vocab.length;this.vocab=new Array(Y),this.scores=new Array(Y);for(let le=0;le<Y;++le){const ue=_.vocab[le];this.vocab[le]=ue[0],this.scores[le]=ue[1]}this.unk_token_id=_.unk_id,this.unk_token=this.vocab[_.unk_id],this.tokens_to_ids=new Map(this.vocab.map((le,ue)=>[le,ue])),this.bosToken=" ",this.bosTokenId=this.tokens_to_ids.get(this.bosToken),this.eosToken=F.eos_token,this.eosTokenId=this.tokens_to_ids.get(this.eosToken),this.unkToken=this.vocab[this.unk_token_id],this.minScore=(0,be.min)(this.scores)[0],this.unkScore=this.minScore-10,this.scores[this.unk_token_id]=this.unkScore,this.trie=new B.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(_){const F=_.sentence,Y=F.length;let le=0;for(;le<Y;){let Ie=!1;for(let _t of this.trie.commonPrefixSearch(F.slice(le))){const yt=this.tokens_to_ids.get(_t),wt=this.scores[yt],kt=_t.length;_.insert(le,kt,wt,yt),!Ie&&kt===1&&(Ie=!0)}Ie||_.insert(le,1,this.unkScore,this.unk_token_id),le+=1}}tokenize(_){const F=new B.TokenLattice(_,this.bosTokenId,this.eosTokenId);return this.populateNodes(F),F.tokens()}encode(_){const F=[];for(const Y of _){const le=this.tokenize(Y);F.push(...le)}return F}}const Je=(()=>{const ve=[...Array.from({length:"~".charCodeAt(0)-"!".charCodeAt(0)+1},(le,ue)=>ue+"!".charCodeAt(0)),...Array.from({length:"¬".charCodeAt(0)-"¡".charCodeAt(0)+1},(le,ue)=>ue+"¡".charCodeAt(0)),...Array.from({length:"ÿ".charCodeAt(0)-"®".charCodeAt(0)+1},(le,ue)=>ue+"®".charCodeAt(0))],_=ve.slice();let F=0;for(let le=0;le<256;++le)ve.includes(le)||(ve.push(le),_.push(256+F),F+=1);const Y=_.map(le=>String.fromCharCode(le));return Object.fromEntries(ve.map((le,ue)=>[le,Y[ue]]))})(),Ue=(0,H.reverseDictionary)(Je);class bt extends Ce{constructor(_){super(_),this.BPE_SPLIT_TOKEN=" ",this.tokens_to_ids=ae(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[F,Y]of this.tokens_to_ids)this.vocab[Y]=F;this.bpe_ranks=new Map(_.merges.map((F,Y)=>[F,Y])),this.merges=_.merges.map(F=>F.split(this.BPE_SPLIT_TOKEN)),this.end_of_word_suffix=_.end_of_word_suffix,this.continuing_subword_suffix=_.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.cache=new Map}bpe(_){if(_.length===0)return[];const F=this.cache.get(_);if(F!==void 0)return F;const Y=Array.from(_);this.end_of_word_suffix&&(Y[Y.length-1]+=this.end_of_word_suffix);let le=[];if(Y.length>1){const ue=new B.PriorityQueue((yt,wt)=>yt.score<wt.score);let Ie={token:Y[0],bias:0,prev:null,next:null},_t=Ie;for(let yt=1;yt<Y.length;++yt){const wt={bias:yt/Y.length,token:Y[yt],prev:_t,next:null};_t.next=wt,this._add_node(ue,_t),_t=wt}for(;!ue.isEmpty();){const yt=ue.pop();if(yt.deleted||!yt.next||yt.next.deleted)continue;if(yt.deleted=!0,yt.next.deleted=!0,yt.prev){const kt={...yt.prev};yt.prev.deleted=!0,yt.prev=kt,kt.prev?kt.prev.next=kt:Ie=kt}const wt={token:yt.token+yt.next.token,bias:yt.bias,prev:yt.prev,next:yt.next.next};wt.prev?(wt.prev.next=wt,this._add_node(ue,wt.prev)):Ie=wt,wt.next&&(wt.next.prev=wt,this._add_node(ue,wt))}for(let yt=Ie;yt!==null;yt=yt.next)le.push(yt.token)}else le=Y;if(this.continuing_subword_suffix)for(let ue=0;ue<le.length-1;++ue)le[ue]+=this.continuing_subword_suffix;return this.cache.set(_,le),le}_add_node(_,F){const Y=this.bpe_ranks.get(F.token+this.BPE_SPLIT_TOKEN+F.next.token);Y!==void 0&&(F.score=Y+F.bias,_.push(F))}encode(_){const F=[];for(const Y of _){if(this.ignore_merges&&this.tokens_to_ids.has(Y)){F.push(Y);continue}const le=this.bpe(Y);for(const ue of le)this.tokens_to_ids.has(ue)?F.push(ue):this.byte_fallback?F.push(...Array.from(this.text_encoder.encode(ue)).map(Ie=>`<0x${Ie.toString(16).toUpperCase().padStart(2,"0")}>`)):F.push(this.unk_token)}return F}}class ge extends Ce{constructor(_,F){super(_),this.tokens_to_ids=ae(F.target_lang?_.vocab[F.target_lang]:_.vocab),this.bos_token=F.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=F.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=F.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=F.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[Y,le]of this.tokens_to_ids)this.vocab[le]=Y}encode(_){return _}}class V extends x.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"BertNormalizer":return new Tt(_);case"Precompiled":return new Ae(_);case"Sequence":return new st(_);case"Replace":return new he(_);case"NFC":return new $e(_);case"NFKC":return new ne(_);case"NFKD":return new Ke(_);case"Strip":return new ct(_);case"StripAccents":return new rt(_);case"Lowercase":return new ot(_);case"Prepend":return new Re(_);default:throw new Error(`Unknown Normalizer type: ${_.type}`)}}normalize(_){throw Error("normalize should be implemented in subclass.")}_call(_){return this.normalize(_)}}class he extends V{normalize(_){const F=ie(this.config.pattern);return F===null?_:_.replaceAll(F,this.config.content)}}class $e extends V{normalize(_){return _=_.normalize("NFC"),_}}class ne extends V{normalize(_){return _=_.normalize("NFKC"),_}}class Ke extends V{normalize(_){return _=_.normalize("NFKD"),_}}class ct extends V{normalize(_){return this.config.strip_left&&this.config.strip_right?_=_.trim():(this.config.strip_left&&(_=_.trimStart()),this.config.strip_right&&(_=_.trimEnd())),_}}class rt extends V{normalize(_){return _=G(_),_}}class ot extends V{normalize(_){return _=_.toLowerCase(),_}}class Re extends V{normalize(_){return _=this.config.prepend+_,_}}class st extends V{constructor(_){super(_),this.normalizers=_.normalizers.map(F=>V.fromConfig(F))}normalize(_){return this.normalizers.reduce((F,Y)=>Y.normalize(F),_)}}class Tt extends V{_tokenize_chinese_chars(_){const F=[];for(let Y=0;Y<_.length;++Y){const le=_[Y],ue=le.charCodeAt(0);pe(ue)?(F.push(" "),F.push(le),F.push(" ")):F.push(le)}return F.join("")}stripAccents(_){return _.normalize("NFD").replace(/[\u0300-\u036f]/g,"")}_is_control(_){switch(_){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(_)}}_clean_text(_){const F=[];for(const Y of _){const le=Y.charCodeAt(0);le===0||le===65533||this._is_control(Y)||(/^\s$/.test(Y)?F.push(" "):F.push(Y))}return F.join("")}normalize(_){return this.config.clean_text&&(_=this._clean_text(_)),this.config.handle_chinese_chars&&(_=this._tokenize_chinese_chars(_)),this.config.lowercase?(_=_.toLowerCase(),this.config.strip_accents!==!1&&(_=this.stripAccents(_))):this.config.strip_accents&&(_=this.stripAccents(_)),_}}class ze extends x.Callable{static fromConfig(_){if(_===null)return null;switch(_.type){case"BertPreTokenizer":return new se(_);case"Sequence":return new Ne(_);case"Whitespace":return new ut(_);case"WhitespaceSplit":return new nt(_);case"Metaspace":return new ye(_);case"ByteLevel":return new Ee(_);case"Split":return new je(_);case"Punctuation":return new qe(_);case"Digits":return new Ve(_);case"Replace":return new Mt(_);default:throw new Error(`Unknown PreTokenizer type: ${_.type}`)}}pre_tokenize_text(_,F){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(_,F){return(Array.isArray(_)?_.map(Y=>this.pre_tokenize_text(Y,F)):this.pre_tokenize_text(_,F)).flat()}_call(_,F){return this.pre_tokenize(_,F)}}class se extends ze{constructor(_){super(),this.pattern=new RegExp(`[^\\s${j}]+|[${j}]`,"gu")}pre_tokenize_text(_,F){return _.trim().match(this.pattern)||[]}}class Ee extends ze{constructor(_){super(),this.config=_,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=Je,this.text_encoder=new TextEncoder}pre_tokenize_text(_,F){return this.add_prefix_space&&!_.startsWith(" ")&&(_=" "+_),(this.use_regex?_.match(this.pattern)||[]:[_]).map(le=>Array.from(this.text_encoder.encode(le),ue=>this.byte_encoder[ue]).join(""))}}class je extends ze{constructor(_){super(),this.config=_,this.pattern=ie(this.config.pattern,this.config.invert)}pre_tokenize_text(_,F){return this.pattern===null?[]:this.config.invert?_.match(this.pattern)||[]:Z(_,this.pattern)}}class qe extends ze{constructor(_){super(),this.config=_,this.pattern=new RegExp(`[^${j}]+|[${j}]+`,"gu")}pre_tokenize_text(_,F){return _.match(this.pattern)||[]}}class Ve extends ze{constructor(_){super(),this.config=_;const F=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(F,"gu")}pre_tokenize_text(_,F){return _.match(this.pattern)||[]}}class Xe extends x.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"TemplateProcessing":return new gt(_);case"ByteLevel":return new vt(_);case"RobertaProcessing":return new ft(_);case"BertProcessing":return new lt(_);case"Sequence":return new M(_);default:throw new Error(`Unknown PostProcessor type: ${_.type}`)}}post_process(_,...F){throw Error("post_process should be implemented in subclass.")}_call(_,...F){return this.post_process(_,...F)}}class lt extends Xe{constructor(_){super(_),this.cls=_.cls[0],this.sep=_.sep[0]}post_process(_,F=null,{add_special_tokens:Y=!0}={}){Y&&(_=(0,H.mergeArrays)([this.cls],_,[this.sep]));let le=new Array(_.length).fill(0);if(F!==null){const ue=Y&&this instanceof ft?[this.sep]:[],Ie=Y?[this.sep]:[];_=(0,H.mergeArrays)(_,ue,F,Ie),le=(0,H.mergeArrays)(le,new Array(F.length+ue.length+Ie.length).fill(1))}return{tokens:_,token_type_ids:le}}}class ft extends lt{}class gt extends Xe{constructor(_){super(_),this.single=_.single,this.pair=_.pair}post_process(_,F=null,{add_special_tokens:Y=!0}={}){const le=F===null?this.single:this.pair;let ue=[],Ie=[];for(const _t of le)"SpecialToken"in _t?Y&&(ue.push(_t.SpecialToken.id),Ie.push(_t.SpecialToken.type_id)):"Sequence"in _t&&(_t.Sequence.id==="A"?(ue=(0,H.mergeArrays)(ue,_),Ie=(0,H.mergeArrays)(Ie,new Array(_.length).fill(_t.Sequence.type_id))):_t.Sequence.id==="B"&&(ue=(0,H.mergeArrays)(ue,F),Ie=(0,H.mergeArrays)(Ie,new Array(F.length).fill(_t.Sequence.type_id))));return{tokens:ue,token_type_ids:Ie}}}class vt extends Xe{post_process(_,F=null){return F&&(_=(0,H.mergeArrays)(_,F)),{tokens:_}}}class M extends Xe{constructor(_){super(_),this.processors=_.processors.map(F=>Xe.fromConfig(F))}post_process(_,F=null,Y={}){let le;for(const ue of this.processors)if(ue instanceof vt)_=ue.post_process(_).tokens,F&&(F=ue.post_process(F).tokens);else{const Ie=ue.post_process(_,F,Y);_=Ie.tokens,le=Ie.token_type_ids}return{tokens:_,token_type_ids:le}}}class W extends x.Callable{constructor(_){super(),this.config=_,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=_.trim_offsets}static fromConfig(_){if(_===null)return null;switch(_.type){case"WordPiece":return new et(_);case"Metaspace":return new Be(_);case"ByteLevel":return new At(_);case"Replace":return new S(_);case"ByteFallback":return new Q(_);case"Fuse":return new fe(_);case"Strip":return new Ye(_);case"Sequence":return new Se(_);case"CTC":return new mt(_);case"BPEDecoder":return new E(_);default:throw new Error(`Unknown Decoder type: ${_.type}`)}}_call(_){return this.decode(_)}decode(_){return this.decode_chain(_).join("")}decode_chain(_){throw Error("`decode_chain` should be implemented in subclass.")}}class S extends W{decode_chain(_){const F=ie(this.config.pattern);return F===null?_:_.map(Y=>Y.replaceAll(F,this.config.content))}}class Q extends W{constructor(_){super(_),this.text_decoder=new TextDecoder}decode_chain(_){const F=[];let Y=[];for(const le of _){let ue=null;if(le.length===6&&le.startsWith("<0x")&&le.endsWith(">")){const Ie=parseInt(le.slice(3,5),16);isNaN(Ie)||(ue=Ie)}if(ue!==null)Y.push(ue);else{if(Y.length>0){const Ie=this.text_decoder.decode(Uint8Array.from(Y));F.push(Ie),Y=[]}F.push(le)}}if(Y.length>0){const le=this.text_decoder.decode(Uint8Array.from(Y));F.push(le),Y=[]}return F}}class fe extends W{decode_chain(_){return[_.join("")]}}class Ye extends W{constructor(_){super(_),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(_){return _.map(F=>{let Y=0;for(let ue=0;ue<this.start&&F[ue]===this.content;++ue){Y=ue+1;continue}let le=F.length;for(let ue=0;ue<this.stop;++ue){const Ie=F.length-ue-1;if(F[Ie]===this.content){le=Ie;continue}else break}return F.slice(Y,le)})}}class et extends W{constructor(_){super(_),this.cleanup=_.cleanup}decode_chain(_){return _.map((F,Y)=>(Y!==0&&(F.startsWith(this.config.prefix)?F=F.replace(this.config.prefix,""):F=" "+F),this.cleanup&&(F=te(F)),F))}}class At extends W{constructor(_){super(_),this.byte_decoder=Ue,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(_){const F=_.join(""),Y=new Uint8Array([...F].map(ue=>this.byte_decoder[ue]));return this.text_decoder.decode(Y)}decode_chain(_){const F=[];let Y=[];for(const le of _)this.added_tokens.find(ue=>ue.content===le)!==void 0?(Y.length>0&&(F.push(this.convert_tokens_to_string(Y)),Y=[]),F.push(le)):Y.push(le);return Y.length>0&&F.push(this.convert_tokens_to_string(Y)),F}}class mt extends W{constructor(_){super(_),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(_){if(_.length===0)return"";const F=[_[0]];for(let ue=1;ue<_.length;++ue)_[ue]!==F.at(-1)&&F.push(_[ue]);let le=F.filter(ue=>ue!==this.pad_token).join("");return this.cleanup&&(le=te(le).replaceAll(this.word_delimiter_token," ").trim()),le}decode_chain(_){return[this.convert_tokens_to_string(_)]}}class Se extends W{constructor(_){super(_),this.decoders=_.decoders.map(F=>W.fromConfig(F))}decode_chain(_){return this.decoders.reduce((F,Y)=>Y.decode_chain(F),_)}}class E extends W{constructor(_){super(_),this.suffix=this.config.suffix}decode_chain(_){return _.map((F,Y)=>F.replaceAll(this.suffix,Y===_.length-1?"":" "))}}class X extends W{decode_chain(_){let F="";for(let Y=1;Y<_.length;Y+=2)F+=_[Y];return[F]}}class ye extends ze{constructor(_){super(),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement,this.strRep=_.str_rep||this.replacement,this.prepend_scheme=_.prepend_scheme??"always"}pre_tokenize_text(_,{section_index:F=void 0}={}){let Y=_.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!Y.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&F===0)&&(Y=this.strRep+Y),[Y]}}class Be extends W{constructor(_){super(_),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement}decode_chain(_){const F=[];for(let Y=0;Y<_.length;++Y){let le=_[Y].replaceAll(this.replacement," ");this.addPrefixSpace&&Y==0&&le.startsWith(" ")&&(le=le.substring(1)),F.push(le)}return F}}class Ae extends V{constructor(_){super(_),this.charsmap=_.precompiled_charsmap}normalize(_){return _=_.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),_=_.replace(/[\u0009\u000A\u000C\u000D\u1680\u200B\u200C\u200E\u200F\u2028\u2029\u2581\uFEFF\uFFFD]/gm," "),_.includes("～")?_=_.split("～").map(Y=>Y.normalize("NFKC")).join("～"):_=_.normalize("NFKC"),_}}class Ne extends ze{constructor(_){super(),this.tokenizers=_.pretokenizers.map(F=>ze.fromConfig(F))}pre_tokenize_text(_,F){return this.tokenizers.reduce((Y,le)=>le.pre_tokenize(Y,F),[_])}}class ut extends ze{constructor(_){super()}pre_tokenize_text(_,F){return _.match(/\w+|[^\w\s]+/g)||[]}}class nt extends ze{constructor(_){super()}pre_tokenize_text(_,F){return O(_)}}class Mt extends ze{constructor(_){super(),this.config=_,this.pattern=ie(this.config.pattern),this.content=this.config.content}pre_tokenize_text(_,F){return this.pattern===null?[_]:[_.replaceAll(this.pattern,this.config.content)]}}const ht=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Ct(ve,_,F,Y){for(const le of Object.keys(ve)){const ue=_-ve[le].length,Ie=F(le),_t=new Array(ue).fill(Ie);ve[le]=Y==="right"?(0,H.mergeArrays)(ve[le],_t):(0,H.mergeArrays)(_t,ve[le])}}function Rt(ve,_){for(const F of Object.keys(ve))ve[F].length=_}class Qe extends x.Callable{constructor(F,Y){super();Te(this,"return_token_type_ids",!1);Te(this,"padding_side","right");this._tokenizer_config=Y,this.normalizer=V.fromConfig(F.normalizer),this.pre_tokenizer=ze.fromConfig(F.pre_tokenizer),this.model=Ce.fromConfig(F.model,Y),this.post_processor=Xe.fromConfig(F.post_processor),this.decoder=W.fromConfig(F.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const le of F.added_tokens){const ue=new Me(le);this.added_tokens.push(ue),this.model.tokens_to_ids.set(ue.content,ue.id),this.model.vocab[ue.id]=ue.content,ue.special&&(this.special_tokens.push(ue.content),this.all_special_ids.push(ue.id))}if(this.additional_special_tokens=Y.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.toSorted((le,ue)=>ue.content.length-le.content.length).map(le=>`${le.lstrip?"\\s*":""}(${(0,H.escapeRegExp)(le.content)})${le.rstrip?"\\s*":""}`).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.model_max_length=Y.model_max_length,this.remove_space=Y.remove_space,this.clean_up_tokenization_spaces=Y.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=Y.do_lowercase_and_remove_accent??!1,Y.padding_side&&(this.padding_side=Y.padding_side),this.legacy=!1,this.chat_template=Y.chat_template??null,Array.isArray(this.chat_template)){const le=Object.create(null);for(const{name:ue,template:Ie}of this.chat_template){if(typeof ue!="string"||typeof Ie!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');le[ue]=Ie}this.chat_template=le}this._compiled_template_cache=new Map}getToken(...F){for(const Y of F){const le=this._tokenizer_config[Y];if(le)if(typeof le=="object"){if(le.__type==="AddedToken")return le.content;throw Error(`Unknown token: ${le}`)}else return le}return null}static async from_pretrained(F,{progress_callback:Y=null,config:le=null,cache_dir:ue=null,local_files_only:Ie=!1,revision:_t="main",legacy:yt=null}={}){const wt=await ee(F,{progress_callback:Y,config:le,cache_dir:ue,local_files_only:Ie,revision:_t,legacy:yt});return new this(...wt)}_call(F,{text_pair:Y=null,add_special_tokens:le=!0,padding:ue=!1,truncation:Ie=null,max_length:_t=null,return_tensor:yt=!0,return_token_type_ids:wt=null}={}){const kt=Array.isArray(F);let Jt;if(kt){if(F.length===0)throw Error("text array must be non-empty");if(Y!==null){if(Array.isArray(Y)){if(F.length!==Y.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");Jt=F.map((sr,Gt)=>this._encode_plus(sr,{text_pair:Y[Gt],add_special_tokens:le,return_token_type_ids:wt}))}else Jt=F.map(sr=>this._encode_plus(sr,{add_special_tokens:le,return_token_type_ids:wt}))}else{if(F==null)throw Error("text may not be null or undefined");if(Array.isArray(Y))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");Jt=[this._encode_plus(F,{text_pair:Y,add_special_tokens:le,return_token_type_ids:wt})]}if(_t===null?ue==="max_length"?_t=this.model_max_length:_t=(0,be.max)(Jt.map(sr=>sr.input_ids.length))[0]:Ie||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),_t=Math.min(_t,this.model_max_length??1/0),ue||Ie)for(let sr=0;sr<Jt.length;++sr)Jt[sr].input_ids.length!==_t&&(Jt[sr].input_ids.length>_t?Ie&&Rt(Jt[sr],_t):ue&&Ct(Jt[sr],_t,Gt=>Gt==="input_ids"?this.pad_token_id:0,this.padding_side));const Er={};if(yt){if(!(ue&&Ie)&&Jt.some(Gt=>{var pr;for(const an of Object.keys(Gt))if(Gt[an].length!==((pr=Jt[0][an])==null?void 0:pr.length))return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const sr=[Jt.length,Jt[0].input_ids.length];for(const Gt of Object.keys(Jt[0]))Er[Gt]=new xe.Tensor("int64",BigInt64Array.from(Jt.flatMap(pr=>pr[Gt]).map(BigInt)),sr)}else{for(const sr of Object.keys(Jt[0]))Er[sr]=Jt.map(Gt=>Gt[sr]);if(!kt)for(const sr of Object.keys(Er))Er[sr]=Er[sr][0]}return Er}_encode_text(F){return F===null?null:(this.added_tokens_regex?F.split(this.added_tokens_regex).filter(ue=>ue):[F]).map((ue,Ie)=>{if(this.added_tokens.find(yt=>yt.content===ue)!==void 0)return ue;{if(this.remove_space===!0&&(ue=ue.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(ue=re(ue)),this.normalizer!==null&&(ue=this.normalizer(ue)),ue.length===0)return[];const yt=this.pre_tokenizer!==null?this.pre_tokenizer(ue,{section_index:Ie}):[ue];return this.model(yt)}}).flat()}_encode_plus(F,{text_pair:Y=null,add_special_tokens:le=!0,return_token_type_ids:ue=null}={}){const{tokens:Ie,token_type_ids:_t}=this._tokenize_helper(F,{pair:Y,add_special_tokens:le}),yt=this.model.convert_tokens_to_ids(Ie),wt={input_ids:yt,attention_mask:new Array(yt.length).fill(1)};return(ue??this.return_token_type_ids)&&_t&&(wt.token_type_ids=_t),wt}_tokenize_helper(F,{pair:Y=null,add_special_tokens:le=!1}={}){const ue=this._encode_text(F),Ie=this._encode_text(Y);return this.post_processor?this.post_processor(ue,Ie,{add_special_tokens:le}):{tokens:(0,H.mergeArrays)(ue??[],Ie??[])}}tokenize(F,{pair:Y=null,add_special_tokens:le=!1}={}){return this._tokenize_helper(F,{pair:Y,add_special_tokens:le}).tokens}encode(F,{text_pair:Y=null,add_special_tokens:le=!0,return_token_type_ids:ue=null}={}){return this._encode_plus(F,{text_pair:Y,add_special_tokens:le,return_token_type_ids:ue}).input_ids}batch_decode(F,Y={}){return F instanceof xe.Tensor&&(F=F.tolist()),F.map(le=>this.decode(le,Y))}decode(F,Y={}){if(F instanceof xe.Tensor&&(F=z(F)),!Array.isArray(F)||F.length===0||!(0,H.isIntegralNumber)(F[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(F,Y)}decode_single(F,{skip_special_tokens:Y=!1,clean_up_tokenization_spaces:le=null}){let ue=this.model.convert_ids_to_tokens(F);Y&&(ue=ue.filter(_t=>!this.special_tokens.includes(_t)));let Ie=this.decoder?this.decoder(ue):ue.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(Ie=Ie.replaceAll(this.decoder.end_of_word_suffix," "),Y&&(Ie=Ie.trim())),(le??this.clean_up_tokenization_spaces)&&(Ie=te(Ie)),Ie}apply_chat_template(F,{tools:Y=null,documents:le=null,chat_template:ue=null,add_generation_prompt:Ie=!1,tokenize:_t=!0,padding:yt=!1,truncation:wt=!1,max_length:kt=null,return_tensor:Jt=!0,return_dict:Er=!1,tokenizer_kwargs:sr={},...Gt}={}){if(this.chat_template&&typeof this.chat_template=="object"||this.chat_template===null){const He=this.chat_template;if(ue!==null&&Object.hasOwn(He,ue))ue=He[ue];else if(ue===null&&"default"in He)ue=He.default;else if(ue===null)throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(He).sort()}.`)}else if(this.chat_template)ue=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");if(typeof ue!="string")throw Error(`chat_template must be a string, but got ${typeof ue}`);let pr=this._compiled_template_cache.get(ue);pr===void 0&&(pr=new $.Template(ue),this._compiled_template_cache.set(ue,pr));const an=Object.create(null);for(const He of ht){const gn=this.getToken(He);gn&&(an[He]=gn)}const Yr=pr.render({messages:F,add_generation_prompt:Ie,tools:Y,documents:le,...an,...Gt});if(_t){const He=this._call(Yr,{add_special_tokens:!1,padding:yt,truncation:wt,max_length:kt,return_tensor:Jt,...sr});return Er?He:He.input_ids}return Yr}}class Vt extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class Nt extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class Ht extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class Xt extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class er extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class Wt extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class Tr extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class Ur extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class Cr extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class Ze extends Qe{}class $t extends Qe{}class Bt extends Qe{constructor(F,Y){super(F,Y);Te(this,"return_token_type_ids",!0);console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Hr extends Qe{constructor(){super(...arguments);Te(this,"return_token_type_ids",!0)}}class jn extends Qe{}class An extends Qe{}class Rr extends Qe{}class Jr extends Qe{constructor(_,F){super(_,F),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(Y=>this.languageRegex.test(Y)),this.lang_to_token=Y=>Y}_build_translation_inputs(_,F,Y){return Fn(this,_,F,Y)}}class jr extends Jr{}class $n extends Qe{}class Pr extends Qe{constructor(_,F){var ue,Ie;const Y=".,!?…。，、।۔،",le=(Ie=(ue=_.pre_tokenizer)==null?void 0:ue.pretokenizers[0])==null?void 0:Ie.pattern;le&&le.Regex===` ?[^(\\s|[${Y}])]+`&&(le.Regex=` ?[^\\s${Y}]+`),super(_,F)}}const Vn="▁";class In extends Qe{constructor(F,Y){super(F,Y);Te(this,"padding_side","left");this.legacy=Y.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new ye({replacement:Vn,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(F){if(F===null)return null;if(this.legacy||F.length===0)return super._encode_text(F);let Y=super._encode_text(Vn+F.replaceAll(Vn," "));return Y.length>1&&Y[0]===Vn&&this.special_tokens.includes(Y[1])&&(Y=Y.slice(1)),Y}}class Vs extends Qe{}class gs extends Qe{}class ws extends Qe{}class ys extends Qe{}class bs extends Qe{}class Un extends Qe{}class Us extends Qe{}class ss extends Qe{}class Sn extends Qe{}function Fn(ve,_,F,Y){if(!("language_codes"in ve)||!Array.isArray(ve.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in ve)||!(ve.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in ve)||typeof ve.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const le=Y.src_lang,ue=Y.tgt_lang;if(!ve.language_codes.includes(ue))throw new Error(`Target language code "${ue}" is not valid. Must be one of: {${ve.language_codes.join(", ")}}`);if(le!==void 0){if(!ve.language_codes.includes(le))throw new Error(`Source language code "${le}" is not valid. Must be one of: {${ve.language_codes.join(", ")}}`);for(const Ie of ve.post_processor.config.single)if("SpecialToken"in Ie&&ve.languageRegex.test(Ie.SpecialToken.id)){Ie.SpecialToken.id=ve.lang_to_token(le);break}}return Y.forced_bos_token_id=ve.model.convert_tokens_to_ids([ve.lang_to_token(ue)])[0],ve._call(_,F)}class On extends Qe{constructor(_,F){super(_,F),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(Y=>this.languageRegex.test(Y)),this.lang_to_token=Y=>Y}_build_translation_inputs(_,F,Y){return Fn(this,_,F,Y)}}class Kn extends Qe{constructor(_,F){super(_,F),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(Y=>this.languageRegex.test(Y)).map(Y=>Y.slice(2,-2)),this.lang_to_token=Y=>`__${Y}__`}_build_translation_inputs(_,F,Y){return Fn(this,_,F,Y)}}class is extends Qe{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(_,{return_timestamps:F=!1,return_language:Y=!1,time_precision:le=null,force_full_sequences:ue=!0}={}){if(le===null)throw Error("Must specify time_precision");let Ie=null;const _t=F==="word";function yt(){return{language:Ie,timestamp:[null,null],text:""}}const wt=[];let kt=yt(),Jt=0;const Er=this.timestamp_begin;let sr=[],Gt=[],pr=!1,an=null;const Yr=new Set(this.all_special_ids);for(const gr of _){const Kr=gr.tokens,dn=_t?gr.token_timestamps:null;let Yt=null,mn=Er;if("stride"in gr){const[Mr,St,mr]=gr.stride;if(Jt-=St,an=Mr-mr,St&&(mn=St/le+Er),mr)for(let Ar=Kr.length-1;Ar>=0;--Ar){const Vr=Number(Kr[Ar]);if(Vr>=Er){if(Yt!==null&&(Vr-Er)*le<an)break;Yt=Vr}}}let en=[],br=[];for(let Mr=0;Mr<Kr.length;++Mr){const St=Number(Kr[Mr]);if(Yr.has(St)){const mr=this.decode([St]),Ar=N.WHISPER_LANGUAGE_MAPPING.get(mr.slice(2,-2));if(Ar!==void 0){if(Ie!==null&&Ar!==Ie&&!F){sr.push(en);const Vr=this.findLongestCommonSequence(sr)[0],_n=this.decode(Vr);kt.text=_n,wt.push(kt),sr=[],en=[],kt=yt()}Ie=kt.language=Ar}}else if(St>=Er){const mr=(St-Er)*le+Jt,Ar=(0,be.round)(mr,2);if(Yt!==null&&St>=Yt)pr=!0;else if(pr||sr.length>0&&St<mn)pr=!1;else if(kt.timestamp[0]===null)kt.timestamp[0]=Ar;else if(Ar!==kt.timestamp[0]){kt.timestamp[1]=Ar,sr.push(en),_t&&Gt.push(br);const[Vr,_n]=this.findLongestCommonSequence(sr,Gt),Ot=this.decode(Vr);kt.text=Ot,_t&&(kt.words=this.collateWordTimestamps(Vr,_n,Ie)),wt.push(kt),sr=[],en=[],Gt=[],br=[],kt=yt()}}else if(en.push(St),_t){let mr=(0,be.round)(dn[Mr]+Jt,2),Ar;if(Mr+1<dn.length){Ar=(0,be.round)(dn[Mr+1]+Jt,2);const Vr=this.decode([St]);A.test(Vr)&&(Ar=(0,be.round)(Math.min(mr+le,Ar),2))}else Ar=null;br.push([mr,Ar])}}if("stride"in gr){const[Mr,St,mr]=gr.stride;Jt+=Mr-mr}en.length>0?(sr.push(en),_t&&Gt.push(br)):sr.every(Mr=>Mr.length===0)&&(kt=yt(),sr=[],en=[],Gt=[],br=[])}if(sr.length>0){if(ue&&F)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[gr,Kr]=this.findLongestCommonSequence(sr,Gt),dn=this.decode(gr);kt.text=dn,_t&&(kt.words=this.collateWordTimestamps(gr,Kr,Ie)),wt.push(kt)}let He=Object.create(null);const gn=wt.map(gr=>gr.text).join("");if(F||Y){for(let gr=0;gr<wt.length;++gr){const Kr=wt[gr];F||delete Kr.timestamp,Y||delete Kr.language}if(_t){const gr=[];for(const Kr of wt)for(const dn of Kr.words)gr.push(dn);He={chunks:gr}}else He={chunks:wt}}return[gn,He]}findLongestCommonSequence(_,F=null){let Y=_[0],le=Y.length,ue=[];const Ie=Array.isArray(F)&&F.length>0;let _t=Ie?[]:null,yt=Ie?F[0]:null;for(let wt=1;wt<_.length;++wt){const kt=_[wt];let Jt=0,Er=[le,le,0,0];const sr=kt.length;for(let gr=1;gr<le+sr;++gr){const Kr=Math.max(0,le-gr),dn=Math.min(le,le+sr-gr),Yt=Y.slice(Kr,dn),mn=Math.max(0,gr-le),en=Math.min(sr,gr),br=kt.slice(mn,en);if(Yt.length!==br.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let Mr;Ie?Mr=Yt.filter((Ar,Vr)=>Ar===br[Vr]&&yt[Kr+Vr]<=F[wt][mn+Vr]).length:Mr=Yt.filter((Ar,Vr)=>Ar===br[Vr]).length;const St=gr/1e4,mr=Mr/gr+St;Mr>1&&mr>Jt&&(Jt=mr,Er=[Kr,dn,mn,en])}const[Gt,pr,an,Yr]=Er,He=Math.floor((pr+Gt)/2),gn=Math.floor((Yr+an)/2);ue.push(...Y.slice(0,He)),Y=kt.slice(gn),le=Y.length,Ie&&(_t.push(...yt.slice(0,He)),yt=F[wt].slice(gn))}return ue.push(...Y),Ie?(_t.push(...yt),[ue,_t]):[ue,[]]}collateWordTimestamps(_,F,Y){const[le,ue,Ie]=this.combineTokensIntoWords(_,Y),_t=[];for(let yt=0;yt<le.length;++yt){const wt=Ie[yt];_t.push({text:le[yt],timestamp:[F[wt.at(0)][0],F[wt.at(-1)][1]]})}return _t}combineTokensIntoWords(_,F,Y=`"'“¡¿([{-`,le=`"'.。,，!！?？:：”)]}、`){F=F??"english";let ue,Ie,_t;return["chinese","japanese","thai","lao","myanmar"].includes(F)?[ue,Ie,_t]=this.splitTokensOnUnicode(_):[ue,Ie,_t]=this.splitTokensOnSpaces(_),this.mergePunctuations(ue,Ie,_t,Y,le)}decode(_,F){let Y;return F!=null&&F.decode_with_timestamps?(_ instanceof xe.Tensor&&(_=z(_)),Y=this.decodeWithTimestamps(_,F)):Y=super.decode(_,F),Y}decodeWithTimestamps(_,F){const Y=(F==null?void 0:F.time_precision)??.02,le=Array.from(this.all_special_ids).at(-1)+1;let ue=[[]];for(let Ie of _)if(Ie=Number(Ie),Ie>=le){const _t=((Ie-le)*Y).toFixed(2);ue.push(`<|${_t}|>`),ue.push([])}else ue[ue.length-1].push(Ie);return ue=ue.map(Ie=>typeof Ie=="string"?Ie:super.decode(Ie,F)),ue.join("")}splitTokensOnUnicode(_){const F=this.decode(_,{decode_with_timestamps:!0}),Y="�",le=[],ue=[],Ie=[];let _t=[],yt=[],wt=0;for(let kt=0;kt<_.length;++kt){const Jt=_[kt];_t.push(Jt),yt.push(kt);const Er=this.decode(_t,{decode_with_timestamps:!0});(!Er.includes(Y)||F[wt+Er.indexOf(Y)]===Y)&&(le.push(Er),ue.push(_t),Ie.push(yt),_t=[],yt=[],wt+=Er.length)}return[le,ue,Ie]}splitTokensOnSpaces(_){const[F,Y,le]=this.splitTokensOnUnicode(_),ue=[],Ie=[],_t=[],yt=new RegExp(`^[${j}]$`,"gu");for(let wt=0;wt<F.length;++wt){const kt=F[wt],Jt=Y[wt],Er=le[wt],sr=Jt[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),Gt=kt.startsWith(" "),pr=kt.trim(),an=yt.test(pr);if(sr||Gt||an||ue.length===0)ue.push(kt),Ie.push(Jt),_t.push(Er);else{const Yr=ue.length-1;ue[Yr]+=kt,Ie[Yr].push(...Jt),_t[Yr].push(...Er)}}return[ue,Ie,_t]}mergePunctuations(_,F,Y,le,ue){const Ie=structuredClone(_),_t=structuredClone(F),yt=structuredClone(Y);let wt=Ie.length-2,kt=Ie.length-1;for(;wt>=0;)Ie[wt].startsWith(" ")&&le.includes(Ie[wt].trim())?(Ie[kt]=Ie[wt]+Ie[kt],_t[kt]=(0,H.mergeArrays)(_t[wt],_t[kt]),yt[kt]=(0,H.mergeArrays)(yt[wt],yt[kt]),Ie[wt]="",_t[wt]=[],yt[wt]=[]):kt=wt,--wt;for(wt=0,kt=1;kt<Ie.length;)!Ie[wt].endsWith(" ")&&ue.includes(Ie[kt])?(Ie[wt]+=Ie[kt],_t[wt]=(0,H.mergeArrays)(_t[wt],_t[kt]),yt[wt]=(0,H.mergeArrays)(yt[wt],yt[kt]),Ie[kt]="",_t[kt]=[],yt[kt]=[]):wt=kt,++kt;return[Ie.filter(Jt=>Jt),_t.filter(Jt=>Jt.length>0),yt.filter(Jt=>Jt.length>0)]}get_decoder_prompt_ids({language:_=null,task:F=null,no_timestamps:Y=!0}={}){const le=[];if(_){const ue=(0,N.whisper_language_to_code)(_),Ie=this.model.tokens_to_ids.get(`<|${ue}|>`);if(Ie===void 0)throw new Error(`Unable to find language "${ue}" in model vocabulary. Please report this issue at ${P.GITHUB_ISSUE_URL}.`);le.push(Ie)}else le.push(null);if(F){if(F=F.toLowerCase(),F!=="transcribe"&&F!=="translate")throw new Error(`Task "${F}" is not supported. Must be one of: ["transcribe", "translate"]`);const ue=this.model.tokens_to_ids.get(`<|${F}|>`);if(ue===void 0)throw new Error(`Unable to find task "${F}" in model vocabulary. Please report this issue at ${P.GITHUB_ISSUE_URL}.`);le.push(ue)}else le.push(null);if(Y){const ue=this.model.tokens_to_ids.get("<|notimestamps|>");if(ue===void 0)throw new Error(`Unable to find "<|notimestamps|>" in model vocabulary. Please report this issue at ${P.GITHUB_ISSUE_URL}.`);le.push(ue)}return le.map((ue,Ie)=>[Ie+1,ue]).filter(ue=>ue[1]!==null)}}class as extends Qe{}class Qt extends Qe{}class Xn extends Qe{}class Ms extends Qe{constructor(_,F){super(_,F),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(Y=>this.languageRegex.test(Y)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(_){if(_===null)return null;const[F,...Y]=_.trim().split(this.languageRegex);if(Y.length===0)return super._encode_text(F);if(Y.length===2){const[le,ue]=Y;return this.supported_language_codes.includes(le)||console.warn(`Unsupported language code "${le}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,H.mergeArrays)([le],super._encode_text(ue))}}}class vs extends Qe{}class os extends Qe{}class xs extends Qe{}class Ts extends Qe{}class ls extends Qe{}class Cs extends Qe{constructor(_,F){super(_,F),this.decoder=new X({})}}class Br extends Qe{}class fn{static async from_pretrained(_,{progress_callback:F=null,config:Y=null,cache_dir:le=null,local_files_only:ue=!1,revision:Ie="main",legacy:_t=null}={}){var Er;const[yt,wt]=await ee(_,{progress_callback:F,config:Y,cache_dir:le,local_files_only:ue,revision:Ie,legacy:_t}),kt=((Er=wt.tokenizer_class)==null?void 0:Er.replace(/Fast$/,""))??"PreTrainedTokenizer";let Jt=this.TOKENIZER_CLASS_MAPPING[kt];return Jt||(console.warn(`Unknown tokenizer class "${kt}", attempting to construct from base class.`),Jt=Qe),new Jt(yt,wt)}}Te(fn,"TOKENIZER_CLASS_MAPPING",{T5Tokenizer:jn,DistilBertTokenizer:Ze,CamembertTokenizer:$t,DebertaTokenizer:er,DebertaV2Tokenizer:Wt,BertTokenizer:Vt,HerbertTokenizer:Tr,ConvBertTokenizer:Ur,RoFormerTokenizer:Cr,XLMTokenizer:Bt,ElectraTokenizer:Hr,MobileBertTokenizer:Ht,SqueezeBertTokenizer:Xt,AlbertTokenizer:Nt,GPT2Tokenizer:An,BartTokenizer:Rr,MBartTokenizer:Jr,MBart50Tokenizer:jr,RobertaTokenizer:$n,WhisperTokenizer:is,CodeGenTokenizer:as,CLIPTokenizer:Qt,SiglipTokenizer:Xn,MarianTokenizer:Ms,BloomTokenizer:Pr,NllbTokenizer:On,M2M100Tokenizer:Kn,LlamaTokenizer:In,CodeLlamaTokenizer:Vs,XLMRobertaTokenizer:gs,MPNetTokenizer:ws,FalconTokenizer:ys,GPTNeoXTokenizer:bs,EsmTokenizer:Un,Wav2Vec2CTCTokenizer:vs,BlenderbotTokenizer:os,BlenderbotSmallTokenizer:xs,SpeechT5Tokenizer:Ts,NougatTokenizer:ls,VitsTokenizer:Cs,Qwen2Tokenizer:Us,GemmaTokenizer:ss,Grok1Tokenizer:Sn,CohereTokenizer:Br,PreTrainedTokenizer:Qe})},"./src/utils/audio.js":(xt,me,l)=>{l.r(me),l.d(me,{hamming:()=>N,hanning:()=>$,mel_filter_bank:()=>te,read_audio:()=>xe,spectrogram:()=>O,window_function:()=>j});var x=l("./src/utils/hub.js"),H=l("./src/utils/maths.js"),we=l("./src/utils/core.js"),be=l("./src/utils/tensor.js");async function xe(A,_e){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const Me=await(await(0,x.getFile)(A)).arrayBuffer(),Ce=new AudioContext({sampleRate:_e});typeof _e>"u"&&console.warn(`No sampling rate provided, using default of ${Ce.sampleRate}Hz.`);const ke=await Ce.decodeAudioData(Me);let De;if(ke.numberOfChannels===2){const Je=Math.sqrt(2),Ue=ke.getChannelData(0),bt=ke.getChannelData(1);De=new Float32Array(Ue.length);for(let ge=0;ge<ke.length;++ge)De[ge]=Je*(Ue[ge]+bt[ge])/2}else De=ke.getChannelData(0);return De}function B(A,_e){if(A<1)return new Float64Array;if(A===1)return new Float64Array([1]);const Me=1-_e,Ce=2*Math.PI/(A-1),ke=new Float64Array(A);for(let De=0;De<A;++De)ke[De]=_e-Me*Math.cos(De*Ce);return ke}function $(A){return B(A,.5)}function N(A){return B(A,.54)}const P={htk:A=>2595*Math.log10(1+A/700),kaldi:A=>1127*Math.log(1+A/700),slaney:(A,_e=1e3,Me=15,Ce=27/Math.log(6.4))=>A>=_e?Me+Math.log(A/_e)*Ce:3*A/200};function ee(A,_e="htk"){const Me=P[_e];if(!Me)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof A=="number"?Me(A):A.map(Ce=>Me(Ce))}const Z={htk:A=>700*(10**(A/2595)-1),kaldi:A=>700*(Math.exp(A/1127)-1),slaney:(A,_e=1e3,Me=15,Ce=Math.log(6.4)/27)=>A>=Me?_e*Math.exp(Ce*(A-Me)):200*A/3};function ie(A,_e="htk"){const Me=Z[_e];if(!Me)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof A=="number"?Me(A):A.map(Ce=>Me(Ce))}function ae(A,_e){const Me=Float64Array.from({length:_e.length-1},(Je,Ue)=>_e[Ue+1]-_e[Ue]),Ce=Array.from({length:A.length},()=>new Array(_e.length));for(let Je=0;Je<A.length;++Je){const Ue=Ce[Je];for(let bt=0;bt<_e.length;++bt)Ue[bt]=_e[bt]-A[Je]}const ke=_e.length-2,De=Array.from({length:ke},()=>new Array(A.length));for(let Je=0;Je<A.length;++Je){const Ue=Ce[Je];for(let bt=0;bt<ke;++bt){const ge=-Ue[bt]/Me[bt],V=Ue[bt+2]/Me[bt+1];De[bt][Je]=Math.max(0,Math.min(ge,V))}}return De}function z(A,_e,Me){const Ce=(_e-A)/(Me-1);return Float64Array.from({length:Me},(ke,De)=>A+Ce*De)}function te(A,_e,Me,Ce,ke,De=null,Je="htk",Ue=!1){if(De!==null&&De!=="slaney")throw new Error('norm must be one of null or "slaney"');const bt=ee(Me,Je),ge=ee(Ce,Je),V=z(bt,ge,_e+2);let he=ie(V,Je),$e;if(Ue){const Ke=ke/(A*2);$e=ee(Float64Array.from({length:A},(ct,rt)=>rt*Ke),Je),he=V}else $e=z(0,Math.floor(ke/2),A);const ne=ae($e,he);if(De!==null&&De==="slaney")for(let Ke=0;Ke<_e;++Ke){const ct=ne[Ke],rt=2/(he[Ke+2]-he[Ke]);for(let ot=0;ot<A;++ot)ct[ot]*=rt}return ne}function G(A,_e,Me){const Ce=new A.constructor(A.length+_e+Me),ke=A.length-1;for(let De=0;De<A.length;++De)Ce[_e+De]=A[De];for(let De=1;De<=_e;++De)Ce[_e-De]=A[(0,we.calculateReflectOffset)(De,ke)];for(let De=1;De<=Me;++De)Ce[ke+_e+De]=A[(0,we.calculateReflectOffset)(ke-De,ke)];return Ce}function re(A,_e,Me,Ce,ke){if(Me<=0)throw new Error("reference must be greater than zero");if(Ce<=0)throw new Error("min_value must be greater than zero");Me=Math.max(Ce,Me);const De=Math.log10(Me);for(let Je=0;Je<A.length;++Je)A[Je]=_e*Math.log10(Math.max(Ce,A[Je])-De);if(ke!==null){if(ke<=0)throw new Error("db_range must be greater than zero");const Je=(0,H.max)(A)[0]-ke;for(let Ue=0;Ue<A.length;++Ue)A[Ue]=Math.max(A[Ue],Je)}return A}function pe(A,_e=1,Me=1e-5,Ce=null){return re(A,20,_e,Me,Ce)}function L(A,_e=1,Me=1e-10,Ce=null){return re(A,10,_e,Me,Ce)}async function O(A,_e,Me,Ce,{fft_length:ke=null,power:De=1,center:Je=!0,pad_mode:Ue="reflect",onesided:bt=!0,preemphasis:ge=null,mel_filters:V=null,mel_floor:he=1e-10,log_mel:$e=null,reference:ne=1,min_value:Ke=1e-10,db_range:ct=null,remove_dc_offset:rt=null,min_num_frames:ot=null,max_num_frames:Re=null,do_pad:st=!0,transpose:Tt=!1}={}){const ze=_e.length;if(ke===null&&(ke=Me),Me>ke)throw Error(`frame_length (${Me}) may not be larger than fft_length (${ke})`);if(ze!==Me)throw new Error(`Length of the window (${ze}) must equal frame_length (${Me})`);if(Ce<=0)throw new Error("hop_length must be greater than zero");if(De===null&&V!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(Je){if(Ue!=="reflect")throw new Error(`pad_mode="${Ue}" not implemented yet.`);const W=Math.floor((ke-1)/2)+1;A=G(A,W,W)}let se=Math.floor(1+Math.floor((A.length-Me)/Ce));ot!==null&&se<ot&&(se=ot);const Ee=bt?Math.floor(ke/2)+1:ke;let je=se,qe=se;Re!==null&&(Re>se?st&&(qe=Re):qe=je=Re);const Ve=new H.FFT(ke),Xe=new Float64Array(ke),lt=new Float64Array(Ve.outputBufferSize),ft=new Float32Array(Ee*qe);for(let W=0;W<je;++W){const S=W*Ce,Q=Math.min(A.length-S,Me);Q!==Me&&Xe.fill(0,0,Me);for(let fe=0;fe<Q;++fe)Xe[fe]=A[S+fe];if(rt){let fe=0;for(let et=0;et<Q;++et)fe+=Xe[et];const Ye=fe/Q;for(let et=0;et<Q;++et)Xe[et]-=Ye}if(ge!==null){for(let fe=Q-1;fe>=1;--fe)Xe[fe]-=ge*Xe[fe-1];Xe[0]*=1-ge}for(let fe=0;fe<_e.length;++fe)Xe[fe]*=_e[fe];Ve.realTransform(lt,Xe);for(let fe=0;fe<Ee;++fe){const Ye=fe<<1;ft[fe*qe+W]=lt[Ye]**2+lt[Ye+1]**2}}if(De!==null&&De!==2){const W=2/De;for(let S=0;S<ft.length;++S)ft[S]**=W}const gt=V.length;let vt=await(0,be.matmul)(new be.Tensor("float32",V.flat(),[gt,Ee]),new be.Tensor("float32",ft,[Ee,qe]));Tt&&(vt=vt.transpose(1,0));const M=vt.data;for(let W=0;W<M.length;++W)M[W]=Math.max(he,M[W]);if(De!==null&&$e!==null){const W=Math.min(M.length,je*gt);switch($e){case"log":for(let S=0;S<W;++S)M[S]=Math.log(M[S]);break;case"log10":for(let S=0;S<W;++S)M[S]=Math.log10(M[S]);break;case"dB":if(De===1)pe(M,ne,Ke,ct);else if(De===2)L(M,ne,Ke,ct);else throw new Error(`Cannot use log_mel option '${$e}' with power ${De}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${$e}'`)}}return vt}function j(A,_e,{periodic:Me=!0,frame_length:Ce=null,center:ke=!0}={}){const De=Me?A+1:A;let Je;switch(_e){case"boxcar":Je=new Float64Array(De).fill(1);break;case"hann":case"hann_window":Je=$(De);break;case"hamming":Je=N(De);break;case"povey":Je=$(De).map(Ue=>Math.pow(Ue,.85));break;default:throw new Error(`Unknown window type ${_e}.`)}if(Me&&(Je=Je.subarray(0,A)),Ce===null)return Je;if(A>Ce)throw new Error(`Length of the window (${A}) may not be larger than frame_length (${Ce})`);return Je}},"./src/utils/constants.js":(xt,me,l)=>{l.r(me),l.d(me,{GITHUB_ISSUE_URL:()=>x});const x="https://github.com/xenova/transformers.js/issues/new/choose"},"./src/utils/core.js":(xt,me,l)=>{l.r(me),l.d(me,{calculateDimensions:()=>B,calculateReflectOffset:()=>ee,dispatchCallback:()=>x,escapeRegExp:()=>we,isIntegralNumber:()=>xe,isTypedArray:()=>be,mergeArrays:()=>N,pick:()=>Z,pop:()=>$,product:()=>P,reverseDictionary:()=>H});function x(ie,ae){ie&&ie(ae)}function H(ie){return Object.fromEntries(Object.entries(ie).map(([ae,z])=>[z,ae]))}function we(ie){return ie.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function be(ie){var ae,z,te;return((te=(z=(ae=ie==null?void 0:ie.prototype)==null?void 0:ae.__proto__)==null?void 0:z.constructor)==null?void 0:te.name)==="TypedArray"}function xe(ie){return Number.isInteger(ie)||typeof ie=="bigint"}function B(ie){const ae=[];let z=ie;for(;Array.isArray(z);)ae.push(z.length),z=z[0];return ae}function $(ie,ae,z=void 0){const te=ie[ae];if(te!==void 0)return delete ie[ae],te;if(z===void 0)throw Error(`Key ${ae} does not exist in object.`);return z}function N(...ie){return Array.prototype.concat.apply([],ie)}function P(...ie){return ie.reduce((ae,z)=>ae.flatMap(te=>z.map(G=>[te,G])))}function ee(ie,ae){return Math.abs((ie+ae)%(2*ae)-ae)}function Z(ie,ae){return Object.assign({},...ae.map(z=>{if(ie[z]!==void 0)return{[z]:ie[z]}}))}},"./src/utils/data-structures.js":(xt,me,l)=>{l.r(me),l.d(me,{CharTrie:()=>H,PriorityQueue:()=>x,TokenLattice:()=>be});class x{constructor($=(P,ee)=>P>ee,N=1/0){this._heap=[],this._comparator=$,this._maxSize=N}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...$){return this.extend($)}extend($){for(const N of $)if(this.size<this._maxSize)this._heap.push(N),this._siftUp();else{const P=this._smallest();this._comparator(N,this._heap[P])&&(this._heap[P]=N,this._siftUpFrom(P))}return this.size}pop(){const $=this.peek(),N=this.size-1;return N>0&&this._swap(0,N),this._heap.pop(),this._siftDown(),$}replace($){const N=this.peek();return this._heap[0]=$,this._siftDown(),N}_parent($){return($+1>>>1)-1}_left($){return($<<1)+1}_right($){return $+1<<1}_greater($,N){return this._comparator(this._heap[$],this._heap[N])}_swap($,N){const P=this._heap[$];this._heap[$]=this._heap[N],this._heap[N]=P}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom($){for(;$>0&&this._greater($,this._parent($));)this._swap($,this._parent($)),$=this._parent($)}_siftDown(){let $=0;for(;this._left($)<this.size&&this._greater(this._left($),$)||this._right($)<this.size&&this._greater(this._right($),$);){const N=this._right($)<this.size&&this._greater(this._right($),this._left($))?this._right($):this._left($);this._swap($,N),$=N}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class H{constructor(){this.root=we.default()}extend($){for(let N of $)this.push(N)}push($){let N=this.root;for(let P of $){let ee=N.children.get(P);ee===void 0&&(ee=we.default(),N.children.set(P,ee)),N=ee}N.isLeaf=!0}*commonPrefixSearch($){let N=this.root,P="";for(let ee=0;ee<$.length&&N!==void 0;++ee){const Z=$[ee];P+=Z,N=N.children.get(Z),N!==void 0&&N.isLeaf&&(yield P)}}}class we{constructor($,N){this.isLeaf=$,this.children=N}static default(){return new we(!1,new Map)}}class be{constructor($,N,P){this.sentence=$,this.len=$.length,this.bosTokenId=N,this.eosTokenId=P,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const ee=new xe(this.bosTokenId,0,0,0,0),Z=new xe(this.eosTokenId,1,this.len,0,0);this.nodes.push(ee.clone()),this.nodes.push(Z.clone()),this.beginNodes[this.len].push(Z),this.endNodes[0].push(ee)}insert($,N,P,ee){const Z=this.nodes.length,ie=new xe(ee,Z,$,N,P);this.beginNodes[$].push(ie),this.endNodes[$+N].push(ie),this.nodes.push(ie)}viterbi(){const $=this.len;let N=0;for(;N<=$;){if(this.beginNodes[N].length==0)return[];for(let ae of this.beginNodes[N]){ae.prev=null;let z=0,te=null;for(let G of this.endNodes[N]){const re=G.backtraceScore+ae.score;(te===null||re>z)&&(te=G.clone(),z=re)}if(te!==null)ae.prev=te,ae.backtraceScore=z;else return[]}++N}const P=[],Z=this.beginNodes[$][0].prev;if(Z===null)return[];let ie=Z.clone();for(;ie.prev!==null;)P.push(ie.clone()),ie=ie.clone().prev.clone();return P.reverse(),P}piece($){return this.sentence.slice($.pos,$.pos+$.length)}tokens(){return this.viterbi().map(N=>this.piece(N))}tokenIds(){return this.viterbi().map(N=>N.tokenId)}}class xe{constructor($,N,P,ee,Z){this.tokenId=$,this.nodeId=N,this.pos=P,this.length=ee,this.score=Z,this.prev=null,this.backtraceScore=0}clone(){const $=new xe(this.tokenId,this.nodeId,this.pos,this.length,this.score);return $.prev=this.prev,$.backtraceScore=this.backtraceScore,$}}},"./src/utils/devices.js":(xt,me,l)=>{l.r(me),l.d(me,{DEVICE_TYPES:()=>x});const x=Object.freeze({cpu:"cpu",gpu:"gpu",wasm:"wasm",webgpu:"webgpu"})},"./src/utils/dtypes.js":(xt,me,l)=>{l.r(me),l.d(me,{DATA_TYPES:()=>be,DEFAULT_DEVICE_DTYPE_MAPPING:()=>xe,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>B,isWebGpuFp16Supported:()=>we});var x=l("./src/env.js"),H=l("./src/utils/devices.js");const we=function(){let $;return async function(){if($===void 0)if(!x.apis.IS_WEBGPU_AVAILABLE)$=!1;else try{$=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{$=!1}return $}}(),be=Object.freeze({fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),xe=Object.freeze({[H.DEVICE_TYPES.cpu]:be.q8,[H.DEVICE_TYPES.gpu]:be.fp32,[H.DEVICE_TYPES.wasm]:be.q8,[H.DEVICE_TYPES.webgpu]:be.fp32}),B=Object.freeze({[be.fp32]:"",[be.fp16]:"_fp16",[be.int8]:"_int8",[be.uint8]:"_uint8",[be.q8]:"_quantized",[be.q4]:"_q4",[be.q4f16]:"_q4f16",[be.bnb4]:"_bnb4"})},"./src/utils/generic.js":(xt,me,l)=>{l.r(me),l.d(me,{Callable:()=>x});const x=class{constructor(){let H=function(...we){return H._call(...we)};return Object.setPrototypeOf(H,new.target.prototype)}_call(...H){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(xt,me,l)=>{l.r(me),l.d(me,{getFile:()=>$,getModelFile:()=>ie,getModelJSON:()=>ae});var x=l("?7a2c"),H=l("?a42a"),we=l("./src/env.js"),be=l("./src/utils/core.js");class xe{constructor(re){Te(this,"_CONTENT_TYPE_MAP",{txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"});if(this.filePath=re,this.headers=new Headers,this.exists=x.existsSync(re),this.exists){this.status=200,this.statusText="OK";let pe=x.statSync(re);this.headers.set("content-length",pe.size.toString()),this.updateContentType();let L=this;this.body=new ReadableStream({start(O){L.arrayBuffer().then(j=>{O.enqueue(new Uint8Array(j)),O.close()})}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const re=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",this._CONTENT_TYPE_MAP[re]??"application/octet-stream")}clone(){let re=new xe(this.filePath);return re.exists=this.exists,re.status=this.status,re.statusText=this.statusText,re.headers=new Headers(this.headers),re}async arrayBuffer(){return(await x.promises.readFile(this.filePath)).buffer}async blob(){const re=await x.promises.readFile(this.filePath);return new Blob([re],{type:this.headers.get("content-type")})}async text(){return await x.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function B(G,re=null,pe=null){let L;try{L=new URL(G)}catch{return!1}return!(re&&!re.includes(L.protocol)||pe&&!pe.includes(L.hostname))}async function $(G){var re,pe,L,O;if(we.env.useFS&&!B(G,["http:","https:","blob:"]))return new xe(G);if(typeof process<"u"&&((re=process==null?void 0:process.release)==null?void 0:re.name)==="node"){const j=!!((pe=process.env)!=null&&pe.TESTING_REMOTELY),A=we.env.version,_e=new Headers;if(_e.set("User-Agent",`transformers.js/${A}; is_ci/${j};`),B(G,["http:","https:"],["huggingface.co","hf.co"])){const Ce=((L=process.env)==null?void 0:L.HF_TOKEN)??((O=process.env)==null?void 0:O.HF_ACCESS_TOKEN);Ce&&_e.set("Authorization",`Bearer ${Ce}`)}return fetch(G,{headers:_e})}else return fetch(G)}const N={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function P(G,re,pe){if(!pe)return null;const L=N[G]??`Error (${G}) occurred while trying to load file`;throw Error(`${L}: "${re}".`)}class ee{constructor(re){this.path=re}async match(re){let pe=H.join(this.path,re),L=new xe(pe);if(L.exists)return L}async put(re,pe){const L=Buffer.from(await pe.arrayBuffer());let O=H.join(this.path,re);try{await x.promises.mkdir(H.dirname(O),{recursive:!0}),await x.promises.writeFile(O,L)}catch(j){console.warn("An error occurred while writing the file to cache:",j)}}}async function Z(G,...re){for(let pe of re)try{let L=await G.match(pe);if(L)return L}catch{continue}}async function ie(G,re,pe=!0,L={}){if(!we.env.allowLocalModels){if(L.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!we.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,be.dispatchCallback)(L.progress_callback,{status:"initiate",name:G,file:re});let O;if(!O&&we.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{O=await caches.open("transformers-cache")}catch(he){console.warn("An error occurred while opening the browser cache:",he)}}if(!O&&we.env.useFSCache&&(O=new ee(L.cache_dir??we.env.cacheDir)),!O&&we.env.useCustomCache){if(!we.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!we.env.customCache.match||!we.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");O=we.env.customCache}const j=L.revision??"main";let A=te(G,re),_e=te(we.env.localModelPath,A),Me=te(we.env.remoteHost,we.env.remotePathTemplate.replaceAll("{model}",G).replaceAll("{revision}",encodeURIComponent(j)),re),Ce=j==="main"?A:te(G,j,re),ke,De=O instanceof ee?Ce:Me,Je=!1,Ue;O&&(Ue=await Z(O,_e,De));const bt=Ue!==void 0;if(Ue===void 0){if(we.env.allowLocalModels)if(B(A,["http:","https:"])){if(L.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${A}.`);if(!we.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${A}.`)}else try{Ue=await $(_e),ke=_e}catch($e){console.warn(`Unable to load from local path "${_e}": "${$e}"`)}if(Ue===void 0||Ue.status===404){if(L.local_files_only||!we.env.allowRemoteModels){if(pe)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${_e}".`);return null}if(Ue=await $(Me),Ue.status!==200)return P(Ue.status,Me,pe);ke=De}Je=O&&typeof Response<"u"&&Ue instanceof Response&&Ue.status===200}(0,be.dispatchCallback)(L.progress_callback,{status:"download",name:G,file:re});const ge={status:"progress",name:G,file:re};let V;return L.progress_callback?bt&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(V=new Uint8Array(await Ue.arrayBuffer()),(0,be.dispatchCallback)(L.progress_callback,{...ge,progress:100,loaded:V.length,total:V.length})):V=await z(Ue,he=>{(0,be.dispatchCallback)(L.progress_callback,{...ge,...he})}):V=new Uint8Array(await Ue.arrayBuffer()),Je&&ke&&await O.match(ke)===void 0&&await O.put(ke,new Response(V,{headers:Ue.headers})).catch(he=>{console.warn(`Unable to add response to browser cache: ${he}.`)}),(0,be.dispatchCallback)(L.progress_callback,{status:"done",name:G,file:re}),V}async function ae(G,re,pe=!0,L={}){let O=await ie(G,re,pe,L);if(O===null)return{};let A=new TextDecoder("utf-8").decode(O);return JSON.parse(A)}async function z(G,re){const pe=G.headers.get("Content-Length");pe===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let L=parseInt(pe??"0"),O=new Uint8Array(L),j=0;const A=G.body.getReader();async function _e(){const{done:Me,value:Ce}=await A.read();if(Me)return;let ke=j+Ce.length;if(ke>L){L=ke;let Je=new Uint8Array(L);Je.set(O),O=Je}O.set(Ce,j),j=ke;const De=j/L*100;return re({progress:De,loaded:j,total:L}),_e()}return await _e(),O}function te(...G){return G=G.map((re,pe)=>(pe&&(re=re.replace(new RegExp("^/"),"")),pe!==G.length-1&&(re=re.replace(new RegExp("/$"),"")),re)),G.join("/")}},"./src/utils/image.js":(xt,me,l)=>{l.r(me),l.d(me,{RawImage:()=>ie});var x=l("./src/utils/hub.js"),H=l("./src/env.js"),we=l("./src/utils/tensor.js"),be=l("?2b25");const xe=typeof self<"u",B=xe&&self.constructor.name==="DedicatedWorkerGlobalScope";let $,N,P;if(xe)$=(ae,z)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(ae,z)},P=self.createImageBitmap,N=self.ImageData;else if(be)P=async ae=>{const te=(await ae.metadata()).channels,{data:G,info:re}=await ae.rotate().raw().toBuffer({resolveWithObject:!0}),pe=new ie(new Uint8ClampedArray(G),re.width,re.height,re.channels);return te!==void 0&&te!==re.channels&&pe.convert(te),pe};else throw new Error("Unable to load image processing library.");const ee={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},Z=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class ie{constructor(z,te,G,re){this.data=z,this.width=te,this.height=G,this.channels=re}get size(){return[this.width,this.height]}static async read(z){if(z instanceof ie)return z;if(typeof z=="string"||z instanceof URL)return await this.fromURL(z);throw new Error(`Unsupported input type: ${typeof z}`)}static fromCanvas(z){if(!xe)throw new Error("fromCanvas() is only supported in browser environments.");const G=z.getContext("2d").getImageData(0,0,z.width,z.height).data;return new ie(G,z.width,z.height,4)}static async fromURL(z){const te=await(0,x.getFile)(z);if(te.status!==200)throw new Error(`Unable to read image from "${z}" (${te.status} ${te.statusText})`);const G=await te.blob();return this.fromBlob(G)}static async fromBlob(z){if(xe){const te=await P(z),G=$(te.width,te.height).getContext("2d");return G.drawImage(te,0,0),new this(G.getImageData(0,0,te.width,te.height).data,te.width,te.height,4)}else{const te=be(await z.arrayBuffer());return await P(te)}}static fromTensor(z,te="CHW"){if(z.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${z.dims.length} dimensions.`);if(te==="CHW")z=z.transpose(1,2,0);else if(te!=="HWC")throw new Error(`Unsupported channel format: ${te}`);if(!(z.data instanceof Uint8ClampedArray||z.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${z.type}`);switch(z.dims[2]){case 1:case 2:case 3:case 4:return new ie(z.data,z.dims[1],z.dims[0],z.dims[2]);default:throw new Error(`Unsupported number of channels: ${z.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const z=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let te=0,G=0;te<this.data.length;te+=this.channels){const re=this.data[te],pe=this.data[te+1],L=this.data[te+2];z[G++]=Math.round(.2989*re+.587*pe+.114*L)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(z,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const z=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let te=0,G=0;te<this.data.length;++te)z[G++]=this.data[te],z[G++]=this.data[te],z[G++]=this.data[te];break;case 4:for(let te=0,G=0;te<this.data.length;te+=4)z[G++]=this.data[te],z[G++]=this.data[te+1],z[G++]=this.data[te+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(z,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const z=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let te=0,G=0;te<this.data.length;++te)z[G++]=this.data[te],z[G++]=this.data[te],z[G++]=this.data[te],z[G++]=255;break;case 3:for(let te=0,G=0;te<this.data.length;te+=3)z[G++]=this.data[te],z[G++]=this.data[te+1],z[G++]=this.data[te+2],z[G++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(z,this.width,this.height,4)}async resize(z,te,{resample:G=2}={}){let re=ee[G]??G;if(xe){const pe=this.channels,L=this.toCanvas(),O=$(z,te).getContext("2d");return O.drawImage(L,0,0,z,te),new ie(O.getImageData(0,0,z,te).data,z,te,4).convert(pe)}else{let pe=this.toSharp();switch(re){case"box":case"hamming":(re==="box"||re==="hamming")&&(console.warn(`Resampling method ${re} is not yet supported. Using bilinear instead.`),re="bilinear");case"nearest":case"bilinear":case"bicubic":pe=pe.affine([z/this.width,0,0,te/this.height],{interpolator:re});break;case"lanczos":pe=pe.resize({width:z,height:te,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${re} is not supported.`)}return await P(pe)}}async pad([z,te,G,re]){if(z=Math.max(z,0),te=Math.max(te,0),G=Math.max(G,0),re=Math.max(re,0),z===0&&te===0&&G===0&&re===0)return this;if(xe){const pe=this.channels,L=this.toCanvas(),O=this.width+z+te,j=this.height+G+re,A=$(O,j).getContext("2d");return A.drawImage(L,0,0,this.width,this.height,z,G,O,j),new ie(A.getImageData(0,0,O,j).data,O,j,4).convert(pe)}else{const pe=this.toSharp().extend({left:z,right:te,top:G,bottom:re});return await P(pe)}}async crop([z,te,G,re]){if(z=Math.max(z,0),te=Math.max(te,0),G=Math.min(G,this.width-1),re=Math.min(re,this.height-1),z===0&&te===0&&G===this.width-1&&re===this.height-1)return this;const pe=G-z+1,L=re-te+1;if(xe){const O=this.channels,j=this.toCanvas(),A=$(pe,L).getContext("2d");return A.drawImage(j,z,te,pe,L,0,0,pe,L),new ie(A.getImageData(0,0,pe,L).data,pe,L,4).convert(O)}else{const O=this.toSharp().extract({left:z,top:te,width:pe,height:L});return await P(O)}}async center_crop(z,te){if(this.width===z&&this.height===te)return this;const G=(this.width-z)/2,re=(this.height-te)/2;if(xe){const pe=this.channels,L=this.toCanvas(),O=$(z,te).getContext("2d");let j=0,A=0,_e=0,Me=0;return G>=0?j=G:_e=-G,re>=0?A=re:Me=-re,O.drawImage(L,j,A,z,te,_e,Me,z,te),new ie(O.getImageData(0,0,z,te).data,z,te,4).convert(pe)}else{let pe=this.toSharp();if(G>=0&&re>=0)pe=pe.extract({left:Math.floor(G),top:Math.floor(re),width:z,height:te});else if(G<=0&&re<=0){const L=Math.floor(-re),O=Math.floor(-G);pe=pe.extend({top:L,left:O,right:z-this.width-O,bottom:te-this.height-L})}else{let L=[0,0],O=0;re<0?(L[0]=Math.floor(-re),L[1]=te-this.height-L[0]):O=Math.floor(re);let j=[0,0],A=0;G<0?(j[0]=Math.floor(-G),j[1]=z-this.width-j[0]):A=Math.floor(G),pe=pe.extend({top:L[0],bottom:L[1],left:j[0],right:j[1]}).extract({left:A,top:O,width:z,height:te})}return await P(pe)}}async toBlob(z="image/png",te=1){if(!xe)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:z,quality:te})}toTensor(z="CHW"){let te=new we.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(z!=="HWC")if(z==="CHW")te=te.permute(2,0,1);else throw new Error(`Unsupported channel format: ${z}`);return te}toCanvas(){if(!xe)throw new Error("toCanvas() is only supported in browser environments.");const z=this.clone().rgba(),te=$(z.width,z.height),G=new N(z.data,z.width,z.height);return te.getContext("2d").putImageData(G,0,0),te}_update(z,te,G,re=null){return this.data=z,this.width=te,this.height=G,re!==null&&(this.channels=re),this}clone(){return new ie(this.data.slice(),this.width,this.height,this.channels)}convert(z){if(this.channels===z)return this;switch(z){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(z){if(xe){if(B)throw new Error("Unable to save an image from a Web Worker.");const te=z.split(".").pop().toLowerCase(),G=Z.get(te)??"image/png",re=await this.toBlob(G),pe=URL.createObjectURL(re),L=document.createElement("a");L.href=pe,L.download=z,L.click(),L.remove()}else{if(H.env.useFS)return await this.toSharp().toFile(z);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(xe)throw new Error("toSharp() is only supported in server-side environments.");return be(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}},"./src/utils/maths.js":(xt,me,l)=>{l.r(me),l.d(me,{FFT:()=>ae,bankers_round:()=>G,cos_sim:()=>B,dot:()=>xe,dynamic_time_warping:()=>re,interpolate_data:()=>x,log_softmax:()=>be,magnitude:()=>$,max:()=>P,medianFilter:()=>z,min:()=>N,permute_data:()=>H,round:()=>te,softmax:()=>we});function x(pe,[L,O,j],[A,_e],Me="bilinear",Ce=!1){const ke=_e/j,De=A/O,Je=new pe.constructor(A*_e*L),Ue=O*j,bt=A*_e;for(let ge=0;ge<A;++ge)for(let V=0;V<_e;++V){const he=ge*_e+V,$e=(V+.5)/ke-.5,ne=(ge+.5)/De-.5;let Ke=Math.floor($e),ct=Math.floor(ne);const rt=Math.min(Ke+1,j-1),ot=Math.min(ct+1,O-1);Ke=Math.max(Ke,0),ct=Math.max(ct,0);const Re=$e-Ke,st=ne-ct,Tt=(1-Re)*(1-st),ze=Re*(1-st),se=(1-Re)*st,Ee=Re*st,je=ct*j,qe=ot*j,Ve=je+Ke,Xe=je+rt,lt=qe+Ke,ft=qe+rt;for(let gt=0;gt<L;++gt){const vt=gt*Ue;Je[gt*bt+he]=Tt*pe[vt+Ve]+ze*pe[vt+Xe]+se*pe[vt+lt]+Ee*pe[vt+ft]}}return Je}function H(pe,L,O){const j=new Array(O.length),A=new Array(O.length);for(let Ce=O.length-1,ke=1;Ce>=0;--Ce)A[Ce]=ke,j[Ce]=L[O[Ce]],ke*=j[Ce];const _e=O.map((Ce,ke)=>A[O.indexOf(ke)]),Me=new pe.constructor(pe.length);for(let Ce=0;Ce<pe.length;++Ce){let ke=0;for(let De=L.length-1,Je=Ce;De>=0;--De)ke+=Je%L[De]*_e[De],Je=Math.floor(Je/L[De]);Me[ke]=pe[Ce]}return[Me,j]}function we(pe){const L=P(pe)[0],O=pe.map(_e=>Math.exp(_e-L)),j=O.reduce((_e,Me)=>_e+Me,0);return O.map(_e=>_e/j)}function be(pe){const L=P(pe)[0];let O=0;for(let _e=0;_e<pe.length;++_e)O+=Math.exp(pe[_e]-L);const j=Math.log(O);return pe.map(_e=>_e-L-j)}function xe(pe,L){let O=0;for(let j=0;j<pe.length;++j)O+=pe[j]*L[j];return O}function B(pe,L){const O=xe(pe,L),j=$(pe),A=$(L);return O/(j*A)}function $(pe){return Math.sqrt(pe.reduce((L,O)=>L+O*O,0))}function N(pe){if(pe.length===0)throw Error("Array must not be empty");let L=pe[0],O=0;for(let j=1;j<pe.length;++j)pe[j]<L&&(L=pe[j],O=j);return[L,O]}function P(pe){if(pe.length===0)throw Error("Array must not be empty");let L=pe[0],O=0;for(let j=1;j<pe.length;++j)pe[j]>L&&(L=pe[j],O=j);return[Number(L),O]}function ee(pe){return pe>0&&(pe&pe-1)===0}class Z{constructor(L){if(this.size=L|0,this.size<=1||!ee(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=L<<1,this.table=new Float64Array(this.size*2);for(let j=0;j<this.table.length;j+=2){const A=Math.PI*j/this.size;this.table[j]=Math.cos(A),this.table[j+1]=-Math.sin(A)}let O=0;for(let j=1;this.size>j;j<<=1)++O;this._width=O%2===0?O-1:O,this._bitrev=new Int32Array(1<<this._width);for(let j=0;j<this._bitrev.length;++j){this._bitrev[j]=0;for(let A=0;A<this._width;A+=2){const _e=this._width-A-2;this._bitrev[j]|=(j>>>A&3)<<_e}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(L,O){const j=O||new Array(L.length>>>1);for(let A=0;A<L.length;A+=2)j[A>>>1]=L[A];return j}toComplexArray(L,O){const j=O||this.createComplexArray();for(let A=0;A<j.length;A+=2)j[A]=L[A>>>1],j[A+1]=0;return j}transform(L,O){if(L===O)throw new Error("Input and output buffers must be different");this._transform4(L,O,1)}realTransform(L,O){if(L===O)throw new Error("Input and output buffers must be different");this._realTransform4(L,O,1)}inverseTransform(L,O){if(L===O)throw new Error("Input and output buffers must be different");this._transform4(L,O,-1);for(let j=0;j<L.length;++j)L[j]/=this.size}_transform4(L,O,j){const A=this._csize;let Me=1<<this._width,Ce=A/Me<<1,ke,De;const Je=this._bitrev;if(Ce===4)for(ke=0,De=0;ke<A;ke+=Ce,++De){const bt=Je[De];this._singleTransform2(O,L,ke,bt,Me)}else for(ke=0,De=0;ke<A;ke+=Ce,++De){const bt=Je[De];this._singleTransform4(O,L,ke,bt,Me,j)}const Ue=this.table;for(Me>>=2;Me>=2;Me>>=2){Ce=A/Me<<1;const bt=Ce>>>2;for(ke=0;ke<A;ke+=Ce){const ge=ke+bt-1;for(let V=ke,he=0;V<ge;V+=2,he+=Me){const $e=V,ne=$e+bt,Ke=ne+bt,ct=Ke+bt,rt=L[$e],ot=L[$e+1],Re=L[ne],st=L[ne+1],Tt=L[Ke],ze=L[Ke+1],se=L[ct],Ee=L[ct+1],je=Ue[he],qe=j*Ue[he+1],Ve=Re*je-st*qe,Xe=Re*qe+st*je,lt=Ue[2*he],ft=j*Ue[2*he+1],gt=Tt*lt-ze*ft,vt=Tt*ft+ze*lt,M=Ue[3*he],W=j*Ue[3*he+1],S=se*M-Ee*W,Q=se*W+Ee*M,fe=rt+gt,Ye=ot+vt,et=rt-gt,At=ot-vt,mt=Ve+S,Se=Xe+Q,E=j*(Ve-S),X=j*(Xe-Q);L[$e]=fe+mt,L[$e+1]=Ye+Se,L[ne]=et+X,L[ne+1]=At-E,L[Ke]=fe-mt,L[Ke+1]=Ye-Se,L[ct]=et-X,L[ct+1]=At+E}}}}_singleTransform2(L,O,j,A,_e){const Me=L[A],Ce=L[A+1],ke=L[A+_e],De=L[A+_e+1];O[j]=Me+ke,O[j+1]=Ce+De,O[j+2]=Me-ke,O[j+3]=Ce-De}_singleTransform4(L,O,j,A,_e,Me){const Ce=_e*2,ke=_e*3,De=L[A],Je=L[A+1],Ue=L[A+_e],bt=L[A+_e+1],ge=L[A+Ce],V=L[A+Ce+1],he=L[A+ke],$e=L[A+ke+1],ne=De+ge,Ke=Je+V,ct=De-ge,rt=Je-V,ot=Ue+he,Re=bt+$e,st=Me*(Ue-he),Tt=Me*(bt-$e);O[j]=ne+ot,O[j+1]=Ke+Re,O[j+2]=ct+Tt,O[j+3]=rt-st,O[j+4]=ne-ot,O[j+5]=Ke-Re,O[j+6]=ct-Tt,O[j+7]=rt+st}_realTransform4(L,O,j){const A=this._csize;let Me=1<<this._width,Ce=A/Me<<1,ke,De;const Je=this._bitrev;if(Ce===4)for(ke=0,De=0;ke<A;ke+=Ce,++De){const ge=Je[De];this._singleRealTransform2(O,L,ke,ge>>>1,Me>>>1)}else for(ke=0,De=0;ke<A;ke+=Ce,++De){const ge=Je[De];this._singleRealTransform4(O,L,ke,ge>>>1,Me>>>1,j)}const Ue=this.table;for(Me>>=2;Me>=2;Me>>=2){Ce=A/Me<<1;const ge=Ce>>>1,V=ge>>>1,he=V>>>1;for(ke=0;ke<A;ke+=Ce)for(let $e=0,ne=0;$e<=he;$e+=2,ne+=Me){const Ke=ke+$e,ct=Ke+V,rt=ct+V,ot=rt+V,Re=L[Ke],st=L[Ke+1],Tt=L[ct],ze=L[ct+1],se=L[rt],Ee=L[rt+1],je=L[ot],qe=L[ot+1],Ve=Re,Xe=st,lt=Ue[ne],ft=j*Ue[ne+1],gt=Tt*lt-ze*ft,vt=Tt*ft+ze*lt,M=Ue[2*ne],W=j*Ue[2*ne+1],S=se*M-Ee*W,Q=se*W+Ee*M,fe=Ue[3*ne],Ye=j*Ue[3*ne+1],et=je*fe-qe*Ye,At=je*Ye+qe*fe,mt=Ve+S,Se=Xe+Q,E=Ve-S,X=Xe-Q,ye=gt+et,Be=vt+At,Ae=j*(gt-et),Ne=j*(vt-At);if(L[Ke]=mt+ye,L[Ke+1]=Se+Be,L[ct]=E+Ne,L[ct+1]=X-Ae,$e===0){L[rt]=mt-ye,L[rt+1]=Se-Be;continue}if($e===he)continue;const ut=ke+V-$e,nt=ke+ge-$e;L[ut]=E-j*Ne,L[ut+1]=-X-j*Ae,L[nt]=mt-j*ye,L[nt+1]=-Se+j*Be}}const bt=A>>>1;for(let ge=2;ge<bt;ge+=2)L[A-ge]=L[ge],L[A-ge+1]=-L[ge+1]}_singleRealTransform2(L,O,j,A,_e){const Me=L[A],Ce=L[A+_e];O[j]=Me+Ce,O[j+1]=0,O[j+2]=Me-Ce,O[j+3]=0}_singleRealTransform4(L,O,j,A,_e,Me){const Ce=_e*2,ke=_e*3,De=L[A],Je=L[A+_e],Ue=L[A+Ce],bt=L[A+ke],ge=De+Ue,V=De-Ue,he=Je+bt,$e=Me*(Je-bt);O[j]=ge+he,O[j+1]=0,O[j+2]=V,O[j+3]=-$e,O[j+4]=ge-he,O[j+5]=0,O[j+6]=V,O[j+7]=$e}}class ie{constructor(L){const O=2*(L-1),j=2*(2*L-1),A=2**Math.ceil(Math.log2(j));this.bufferSize=A,this._a=O;const _e=new Float64Array(j),Me=new Float64Array(A);this._chirpBuffer=new Float64Array(A),this._buffer1=new Float64Array(A),this._buffer2=new Float64Array(A),this._outBuffer1=new Float64Array(A),this._outBuffer2=new Float64Array(A);const Ce=-2*Math.PI/L,ke=Math.cos(Ce),De=Math.sin(Ce);for(let Je=0;Je<j>>1;++Je){const Ue=(Je+1-L)**2/2,bt=Math.sqrt(ke**2+De**2)**Ue,ge=Ue*Math.atan2(De,ke),V=2*Je;_e[V]=bt*Math.cos(ge),_e[V+1]=bt*Math.sin(ge),Me[V]=_e[V],Me[V+1]=-_e[V+1]}this._slicedChirpBuffer=_e.subarray(O,j),this._f=new Z(A>>1),this._f.transform(this._chirpBuffer,Me)}_transform(L,O,j){const A=this._buffer1,_e=this._buffer2,Me=this._outBuffer1,Ce=this._outBuffer2,ke=this._chirpBuffer,De=this._slicedChirpBuffer,Je=this._a;if(j)for(let Ue=0;Ue<De.length;Ue+=2){const bt=Ue+1,ge=Ue>>1,V=O[ge];A[Ue]=V*De[Ue],A[bt]=V*De[bt]}else for(let Ue=0;Ue<De.length;Ue+=2){const bt=Ue+1;A[Ue]=O[Ue]*De[Ue]-O[bt]*De[bt],A[bt]=O[Ue]*De[bt]+O[bt]*De[Ue]}this._f.transform(Me,A);for(let Ue=0;Ue<ke.length;Ue+=2){const bt=Ue+1;_e[Ue]=Me[Ue]*ke[Ue]-Me[bt]*ke[bt],_e[bt]=Me[Ue]*ke[bt]+Me[bt]*ke[Ue]}this._f.inverseTransform(Ce,_e);for(let Ue=0;Ue<Ce.length;Ue+=2){const bt=Ce[Ue+Je],ge=Ce[Ue+Je+1],V=De[Ue],he=De[Ue+1];L[Ue]=bt*V-ge*he,L[Ue+1]=bt*he+ge*V}}transform(L,O){this._transform(L,O,!1)}realTransform(L,O){this._transform(L,O,!0)}}class ae{constructor(L){this.fft_length=L,this.isPowerOfTwo=ee(L),this.isPowerOfTwo?(this.fft=new Z(L),this.outputBufferSize=2*L):(this.fft=new ie(L),this.outputBufferSize=this.fft.bufferSize)}realTransform(L,O){this.fft.realTransform(L,O)}transform(L,O){this.fft.transform(L,O)}}function z(pe,L){if(L%2===0||L<=0)throw new Error("Window size must be a positive odd number");const O=new pe.constructor(pe.length),j=new pe.constructor(L),A=Math.floor(L/2);for(let _e=0;_e<pe.length;++_e){let Me=0;for(let Ce=-A;Ce<=A;++Ce){let ke=_e+Ce;ke<0?ke=Math.abs(ke):ke>=pe.length&&(ke=2*(pe.length-1)-ke),j[Me++]=pe[ke]}j.sort(),O[_e]=j[A]}return O}function te(pe,L){const O=Math.pow(10,L);return Math.round(pe*O)/O}function G(pe){const L=Math.round(pe);return Math.abs(pe)%1===.5?L%2===0?L:L-1:L}function re(pe){const L=pe.length,O=pe[0].length,j=[L+1,O+1],A=Array.from({length:j[0]},()=>Array(j[1]).fill(1/0));A[0][0]=0;const _e=Array.from({length:j[0]},()=>Array(j[1]).fill(-1));for(let Je=1;Je<j[1];++Je)for(let Ue=1;Ue<j[0];++Ue){const bt=A[Ue-1][Je-1],ge=A[Ue-1][Je],V=A[Ue][Je-1];let he,$e;bt<ge&&bt<V?(he=bt,$e=0):ge<bt&&ge<V?(he=ge,$e=1):(he=V,$e=2),A[Ue][Je]=pe[Ue-1][Je-1]+he,_e[Ue][Je]=$e}for(let Je=0;Je<j[1];++Je)_e[0][Je]=2;for(let Je=0;Je<j[0];++Je)_e[Je][0]=1;let Me=L,Ce=O,ke=[],De=[];for(;Me>0||Ce>0;)switch(ke.push(Me-1),De.push(Ce-1),_e[Me][Ce]){case 0:--Me,--Ce;break;case 1:--Me;break;case 2:--Ce;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${Me}, ${Ce}]. Please file a bug report.`)}return ke.reverse(),De.reverse(),[ke,De]}},"./src/utils/tensor.js":(xt,me,l)=>{l.r(me),l.d(me,{Tensor:()=>xe,cat:()=>pe,full:()=>Me,full_like:()=>Ce,interpolate:()=>N,interpolate_4d:()=>P,layer_norm:()=>z,matmul:()=>ee,mean:()=>j,mean_pooling:()=>ae,ones:()=>ke,ones_like:()=>De,permute:()=>$,quantize_embeddings:()=>bt,rfft:()=>Z,stack:()=>L,std_mean:()=>O,topk:()=>ie,zeros:()=>Je,zeros_like:()=>Ue});var x=l("./src/utils/maths.js"),H=l("./src/backends/onnx.js"),we=l("./src/ops/registry.js");const be=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array});class xe{constructor(...V){Te(this,"ort_tensor");return(0,H.isONNXTensor)(V[0])?this.ort_tensor=V[0]:this.ort_tensor=new H.Tensor(V[0],V[1],V[2]),new Proxy(this,{get:(he,$e)=>{if(typeof $e=="string"){let ne=Number($e);if(Number.isInteger(ne))return he._getitem(ne)}return he[$e]},set:(he,$e,ne)=>he[$e]=ne})}get dims(){return this.ort_tensor.dims}set dims(V){this.ort_tensor.dims=V}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[V,...he]=this.dims;if(he.length>0){const $e=he.reduce((ne,Ke)=>ne*Ke);for(let ne=0;ne<V;++ne)yield this._subarray(ne,$e,he)}else yield*this.data}_getitem(V){const[he,...$e]=this.dims;if(V=re(V,he),$e.length>0){const ne=$e.reduce((Ke,ct)=>Ke*ct);return this._subarray(V,ne,$e)}else return new xe(this.type,[this.data[V]],$e)}indexOf(V){const he=this.data;for(let $e=0;$e<he.length;++$e)if(he[$e]==V)return $e;return-1}_subarray(V,he,$e){const ne=V*he,Ke=(V+1)*he,ct="subarray"in this.data?this.data.subarray(ne,Ke):this.data.slice(ne,Ke);return new xe(this.type,ct,$e)}item(){const V=this.data;if(V.length!==1)throw new Error(`a Tensor with ${V.length} elements cannot be converted to Scalar`);return V[0]}tolist(){return B(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const V=this.data;for(let he=0;he<V.length;++he)V[he]=1/(1+Math.exp(-V[he]));return this}mul(V){return this.clone().mul_(V)}mul_(V){const he=this.data;for(let $e=0;$e<he.length;++$e)he[$e]*=V;return this}div(V){return this.clone().div_(V)}div_(V){const he=this.data;for(let $e=0;$e<he.length;++$e)he[$e]/=V;return this}add(V){return this.clone().add_(V)}add_(V){const he=this.data;for(let $e=0;$e<he.length;++$e)he[$e]+=V;return this}clone(){return new xe(this.type,this.data.slice(),this.dims.slice())}slice(...V){const he=[],$e=[];for(let Re=0;Re<this.dims.length;++Re){let st=V[Re];if(st==null)$e.push([0,this.dims[Re]]),he.push(this.dims[Re]);else if(typeof st=="number")st=re(st,this.dims[Re],Re),$e.push([st,st+1]);else if(Array.isArray(st)&&st.length===2){let[Tt,ze]=st;if(Tt=Tt===null?0:re(Tt,this.dims[Re],Re,!1),ze=ze===null?this.dims[Re]:re(ze,this.dims[Re],Re,!1),Tt>ze)throw new Error(`Invalid slice: ${st}`);const se=[Math.max(Tt,0),Math.min(ze,this.dims[Re])];$e.push(se),he.push(se[1]-se[0])}else throw new Error(`Invalid slice: ${st}`)}const ne=$e.map(([Re,st])=>st-Re),Ke=ne.reduce((Re,st)=>Re*st),ct=this.data,rt=new ct.constructor(Ke),ot=this.stride();for(let Re=0;Re<Ke;++Re){let st=0;for(let Tt=ne.length-1,ze=Re;Tt>=0;--Tt){const se=ne[Tt];st+=(ze%se+$e[Tt][0])*ot[Tt],ze=Math.floor(ze/se)}rt[Re]=ct[st]}return new xe(this.type,rt,he)}permute(...V){return $(this,V)}transpose(...V){return this.permute(...V)}sum(V=null,he=!1){return this.norm(1,V,he)}norm(V="fro",he=null,$e=!1){if(V==="fro")V=2;else if(typeof V=="string")throw Error(`Unsupported norm: ${V}`);const ne=this.data;if(he===null){let rt=ne.reduce((ot,Re)=>ot+Re**V,0)**(1/V);return new xe(this.type,[rt],[])}he=re(he,this.dims.length);const Ke=this.dims.slice();Ke[he]=1;const ct=new ne.constructor(ne.length/this.dims[he]);for(let rt=0;rt<ne.length;++rt){let ot=0;for(let Re=this.dims.length-1,st=rt,Tt=1;Re>=0;--Re){const ze=this.dims[Re];if(Re!==he){const se=st%ze;ot+=se*Tt,Tt*=Ke[Re]}st=Math.floor(st/ze)}ct[ot]+=ne[rt]**V}if(V!==1)for(let rt=0;rt<ct.length;++rt)ct[rt]=ct[rt]**(1/V);return $e||Ke.splice(he,1),new xe(this.type,ct,Ke)}normalize_(V=2,he=1){he=re(he,this.dims.length);const $e=this.norm(V,he,!0),ne=this.data,Ke=$e.data;for(let ct=0;ct<ne.length;++ct){let rt=0;for(let ot=this.dims.length-1,Re=ct,st=1;ot>=0;--ot){const Tt=this.dims[ot];if(ot!==he){const ze=Re%Tt;rt+=ze*st,st*=this.dims[ot]}Re=Math.floor(Re/Tt)}ne[ct]/=Ke[rt]}return this}normalize(V=2,he=1){return this.clone().normalize_(V,he)}stride(){return A(this.dims)}squeeze(V=null){return new xe(this.type,this.data,te(this.dims,V))}squeeze_(V=null){return this.dims=te(this.dims,V),this}unsqueeze(V=null){return new xe(this.type,this.data,G(this.dims,V))}unsqueeze_(V=null){return this.dims=G(this.dims,V),this}flatten_(V=0,he=-1){he=(he+this.dims.length)%this.dims.length;let $e=this.dims.slice(0,V),ne=this.dims.slice(V,he+1),Ke=this.dims.slice(he+1);return this.dims=[...$e,ne.reduce((ct,rt)=>ct*rt,1),...Ke],this}flatten(V=0,he=-1){return this.clone().flatten_(V,he)}view(...V){let he=-1;for(let ne=0;ne<V.length;++ne)if(V[ne]===-1){if(he!==-1)throw new Error("Only one dimension can be inferred");he=ne}const $e=this.data;if(he!==-1){const ne=V.reduce((Ke,ct,rt)=>rt!==he?Ke*ct:Ke,1);V[he]=$e.length/ne}return new xe(this.type,$e,V)}neg_(){const V=this.data;for(let he=0;he<V.length;++he)V[he]=-V[he];return this}neg(){return this.clone().neg_()}clamp_(V,he){const $e=this.data;for(let ne=0;ne<$e.length;++ne)$e[ne]=Math.min(Math.max($e[ne],V),he);return this}clamp(V,he){return this.clone().clamp_(V,he)}round_(){const V=this.data;for(let he=0;he<V.length;++he)V[he]=Math.round(V[he]);return this}round(){return this.clone().round_()}mean(V=null,he=!1){return j(this,V,he)}to(V){if(this.type===V)return this;if(!be.hasOwnProperty(V))throw new Error(`Unsupported type: ${V}`);return new xe(V,be[V].from(this.data),this.dims)}}function B(ge,V){const he=ge.length,$e=V.reduce((Ke,ct)=>Ke*ct);if(he!==$e)throw Error(`cannot reshape array of size ${he} into shape (${V})`);let ne=ge;for(let Ke=V.length-1;Ke>=0;Ke--)ne=ne.reduce((ct,rt)=>{let ot=ct[ct.length-1];return ot.length<V[Ke]?ot.push(rt):ct.push([rt]),ct},[[]]);return ne[0]}function $(ge,V){const[he,$e]=(0,x.permute_data)(ge.data,ge.dims,V);return new xe(ge.type,he,$e)}function N(ge,[V,he],$e="bilinear",ne=!1){const Ke=ge.dims.at(-3)??1,ct=ge.dims.at(-2),rt=ge.dims.at(-1);let ot=(0,x.interpolate_data)(ge.data,[Ke,ct,rt],[V,he],$e,ne);return new xe(ge.type,ot,[Ke,V,he])}async function P(ge,{size:V=null,mode:he="bilinear"}={}){if(ge.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!V)throw new Error("`interpolate_4d` requires a `size` argument.");let $e;if(V.length===2)$e=[...ge.dims.slice(0,2),...V];else if(V.length===3)$e=[ge.dims[0],...V];else if(V.length===4)$e=V;else throw new Error("`size` must be of length 2, 3, or 4.");let ne;if(he==="bilinear")ne=await we.TensorOpRegistry.bilinear_interpolate_4d;else if(he==="bicubic")ne=await we.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${he}`);const Ke=new xe("int64",new BigInt64Array($e.map(BigInt)),[$e.length]);return await ne({x:ge,s:Ke})}async function ee(ge,V){return await(await we.TensorOpRegistry.matmul)({a:ge,b:V})}async function Z(ge,V){return await(await we.TensorOpRegistry.rfft)({x:ge,a:V})}async function ie(ge,V){const he=await we.TensorOpRegistry.top_k;return V===null?V=ge.dims.at(-1):V=Math.min(V,ge.dims.at(-1)),await he({x:ge,k:new xe("int64",[BigInt(V)],[1])})}function ae(ge,V){const he=ge.data,$e=V.data,ne=[ge.dims[0],ge.dims[2]],Ke=new he.constructor(ne[0]*ne[1]),[ct,rt,ot]=ge.dims;let Re=0;for(let st=0;st<ct;++st){const Tt=st*ot*rt;for(let ze=0;ze<ot;++ze){let se=0,Ee=0;const je=st*rt,qe=Tt+ze;for(let Xe=0;Xe<rt;++Xe){const lt=Number($e[je+Xe]);Ee+=lt,se+=he[qe+Xe*ot]*lt}const Ve=se/Ee;Ke[Re++]=Ve}}return new xe(ge.type,Ke,ne)}function z(ge,V,{eps:he=1e-5}={}){if(ge.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[$e,ne]=ge.dims;if(V.length!==1&&V[0]!==ne)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[Ke,ct]=O(ge,1,0,!0),rt=Ke.data,ot=ct.data,Re=ge.data,st=new Re.constructor(Re.length);for(let Tt=0;Tt<$e;++Tt){const ze=Tt*ne;for(let se=0;se<ne;++se){const Ee=ze+se;st[Ee]=(Re[Ee]-ot[Tt])/(rt[Tt]+he)}}return new xe(ge.type,st,ge.dims)}function te(ge,V){return ge=ge.slice(),V===null?ge=ge.filter(he=>he!==1):typeof V=="number"?ge[V]===1&&ge.splice(V,1):Array.isArray(V)&&(ge=ge.filter((he,$e)=>he!==1||!V.includes($e))),ge}function G(ge,V){return V=re(V,ge.length+1),ge=ge.slice(),ge.splice(V,0,1),ge}function re(ge,V,he=null,$e=!0){if($e&&(ge<-V||ge>=V))throw new Error(`IndexError: index ${ge} is out of bounds for dimension${he===null?"":" "+he} with size ${V}`);return ge<0&&(ge=(ge%V+V)%V),ge}function pe(ge,V=0){V=re(V,ge[0].dims.length);const he=ge[0].dims.slice();he[V]=ge.reduce((ct,rt)=>ct+rt.dims[V],0);const $e=he.reduce((ct,rt)=>ct*rt,1),ne=new ge[0].data.constructor($e),Ke=ge[0].type;if(V===0){let ct=0;for(const rt of ge){const ot=rt.data;ne.set(ot,ct),ct+=ot.length}}else{let ct=0;for(let rt=0;rt<ge.length;++rt){const{data:ot,dims:Re}=ge[rt];for(let st=0;st<ot.length;++st){let Tt=0;for(let ze=Re.length-1,se=st,Ee=1;ze>=0;--ze){const je=Re[ze];let qe=se%je;ze===V&&(qe+=ct),Tt+=qe*Ee,Ee*=he[ze],se=Math.floor(se/je)}ne[Tt]=ot[st]}ct+=Re[V]}}return new xe(Ke,ne,he)}function L(ge,V=0){return pe(ge.map(he=>he.unsqueeze(V)),V)}function O(ge,V=null,he=1,$e=!1){const ne=ge.data,Ke=ge.dims;if(V===null){const ze=ne.reduce((qe,Ve)=>qe+Ve,0)/ne.length,se=Math.sqrt(ne.reduce((qe,Ve)=>qe+(Ve-ze)**2,0)/(ne.length-he)),Ee=new xe(ge.type,[ze],[]);return[new xe(ge.type,[se],[]),Ee]}V=re(V,Ke.length);const ct=j(ge,V,$e),rt=ct.data,ot=Ke.slice();ot[V]=1;const Re=new ne.constructor(ne.length/Ke[V]);for(let Tt=0;Tt<ne.length;++Tt){let ze=0;for(let se=Ke.length-1,Ee=Tt,je=1;se>=0;--se){const qe=Ke[se];if(se!==V){const Ve=Ee%qe;ze+=Ve*je,je*=ot[se]}Ee=Math.floor(Ee/qe)}Re[ze]+=(ne[Tt]-rt[ze])**2}for(let Tt=0;Tt<Re.length;++Tt)Re[Tt]=Math.sqrt(Re[Tt]/(Ke[V]-he));return $e||ot.splice(V,1),[new xe(ge.type,Re,ot),ct]}function j(ge,V=null,he=!1){const $e=ge.data;if(V===null){const rt=$e.reduce((ot,Re)=>ot+Re,0);return new xe(ge.type,[rt/$e.length],[])}const ne=ge.dims;V=re(V,ne.length);const Ke=ne.slice();Ke[V]=1;const ct=new $e.constructor($e.length/ne[V]);for(let rt=0;rt<$e.length;++rt){let ot=0;for(let Re=ne.length-1,st=rt,Tt=1;Re>=0;--Re){const ze=ne[Re];if(Re!==V){const se=st%ze;ot+=se*Tt,Tt*=Ke[Re]}st=Math.floor(st/ze)}ct[ot]+=$e[rt]}if(ne[V]!==1)for(let rt=0;rt<ct.length;++rt)ct[rt]=ct[rt]/ne[V];return he||Ke.splice(V,1),new xe(ge.type,ct,Ke)}function A(ge){const V=new Array(ge.length);for(let he=ge.length-1,$e=1;he>=0;--he)V[he]=$e,$e*=ge[he];return V}function _e(ge,V,he,$e){const ne=ge.reduce((Ke,ct)=>Ke*ct,1);return new xe(he,new $e(ne).fill(V),ge)}function Me(ge,V){let he,$e;if(typeof V=="number")he="float32",$e=Float32Array;else if(typeof V=="bigint")he="int64",$e=BigInt64Array;else throw new Error(`Unsupported data type: ${typeof V}`);return _e(ge,V,he,$e)}function Ce(ge,V){return Me(ge.dims,V)}function ke(ge){return _e(ge,1n,"int64",BigInt64Array)}function De(ge){return ke(ge.dims)}function Je(ge){return _e(ge,0n,"int64",BigInt64Array)}function Ue(ge){return Je(ge.dims)}function bt(ge,V){if(ge.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(ge.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(V))throw new Error("The precision must be either 'binary' or 'ubinary'");const he=V==="binary",$e=he?"int8":"uint8",ne=he?Int8Array:Uint8Array,Ke=ge.data,ct=new ne(Ke.length/8);for(let rt=0;rt<Ke.length;++rt){const ot=Ke[rt]>0?1:0,Re=Math.floor(rt/8),st=rt%8;ct[Re]|=ot<<7-st,he&&st===0&&(ct[Re]-=128)}return new xe($e,ct,[ge.dims[0],ge.dims[1]/8])}}},Hn={};function Or(xt){var me=Hn[xt];if(me!==void 0)return me.exports;var l=Hn[xt]={exports:{}};return js[xt](l,l.exports,Or),l.exports}(()=>{var xt=Object.getPrototypeOf?l=>Object.getPrototypeOf(l):l=>l.__proto__,me;Or.t=function(l,x){if(x&1&&(l=this(l)),x&8||typeof l=="object"&&l&&(x&4&&l.__esModule||x&16&&typeof l.then=="function"))return l;var H=Object.create(null);Or.r(H);var we={};me=me||[null,xt({}),xt([]),xt(xt)];for(var be=x&2&&l;typeof be=="object"&&!~me.indexOf(be);be=xt(be))Object.getOwnPropertyNames(be).forEach(xe=>we[xe]=()=>l[xe]);return we.default=()=>l,Or.d(H,we),H}})(),Or.d=(xt,me)=>{for(var l in me)Or.o(me,l)&&!Or.o(xt,l)&&Object.defineProperty(xt,l,{enumerable:!0,get:me[l]})},Or.o=(xt,me)=>Object.prototype.hasOwnProperty.call(xt,me),Or.r=xt=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(xt,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(xt,"__esModule",{value:!0})},(()=>{var xt;if(typeof self.location.href=="string"&&(xt=self.location.href),!xt)throw new Error("Automatic publicPath is not supported in this browser");xt=xt.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),Or.p=xt})(),Or.b=void 0;var p={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/Or.r(p),Or.d(p,{ASTFeatureExtractor:()=>H.ASTFeatureExtractor,ASTForAudioClassification:()=>l.ASTForAudioClassification,ASTModel:()=>l.ASTModel,ASTPreTrainedModel:()=>l.ASTPreTrainedModel,AlbertForMaskedLM:()=>l.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>l.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>l.AlbertForSequenceClassification,AlbertModel:()=>l.AlbertModel,AlbertPreTrainedModel:()=>l.AlbertPreTrainedModel,AlbertTokenizer:()=>x.AlbertTokenizer,AudioClassificationPipeline:()=>me.AudioClassificationPipeline,AutoConfig:()=>we.AutoConfig,AutoModel:()=>l.AutoModel,AutoModelForAudioClassification:()=>l.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>l.AutoModelForAudioFrameClassification,AutoModelForCTC:()=>l.AutoModelForCTC,AutoModelForCausalLM:()=>l.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>l.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>l.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>l.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>l.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>l.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>l.AutoModelForImageSegmentation,AutoModelForImageToImage:()=>l.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>l.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>l.AutoModelForMaskedLM,AutoModelForObjectDetection:()=>l.AutoModelForObjectDetection,AutoModelForQuestionAnswering:()=>l.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>l.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>l.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>l.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>l.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>l.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>l.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>l.AutoModelForTokenClassification,AutoModelForVision2Seq:()=>l.AutoModelForVision2Seq,AutoModelForXVector:()=>l.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>l.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>H.AutoProcessor,AutoTokenizer:()=>x.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>me.AutomaticSpeechRecognitionPipeline,BartForConditionalGeneration:()=>l.BartForConditionalGeneration,BartForSequenceClassification:()=>l.BartForSequenceClassification,BartModel:()=>l.BartModel,BartPretrainedModel:()=>l.BartPretrainedModel,BartTokenizer:()=>x.BartTokenizer,BaseModelOutput:()=>l.BaseModelOutput,BaseStreamer:()=>N.BaseStreamer,BeitFeatureExtractor:()=>H.BeitFeatureExtractor,BeitForImageClassification:()=>l.BeitForImageClassification,BeitModel:()=>l.BeitModel,BeitPreTrainedModel:()=>l.BeitPreTrainedModel,BertForMaskedLM:()=>l.BertForMaskedLM,BertForQuestionAnswering:()=>l.BertForQuestionAnswering,BertForSequenceClassification:()=>l.BertForSequenceClassification,BertForTokenClassification:()=>l.BertForTokenClassification,BertModel:()=>l.BertModel,BertPreTrainedModel:()=>l.BertPreTrainedModel,BertTokenizer:()=>x.BertTokenizer,BitImageProcessor:()=>H.BitImageProcessor,BlenderbotForConditionalGeneration:()=>l.BlenderbotForConditionalGeneration,BlenderbotModel:()=>l.BlenderbotModel,BlenderbotPreTrainedModel:()=>l.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>l.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>l.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>l.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>x.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>x.BlenderbotTokenizer,BloomForCausalLM:()=>l.BloomForCausalLM,BloomModel:()=>l.BloomModel,BloomPreTrainedModel:()=>l.BloomPreTrainedModel,BloomTokenizer:()=>x.BloomTokenizer,CLIPFeatureExtractor:()=>H.CLIPFeatureExtractor,CLIPImageProcessor:()=>H.CLIPImageProcessor,CLIPModel:()=>l.CLIPModel,CLIPPreTrainedModel:()=>l.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>l.CLIPSegForImageSegmentation,CLIPSegModel:()=>l.CLIPSegModel,CLIPSegPreTrainedModel:()=>l.CLIPSegPreTrainedModel,CLIPTextModel:()=>l.CLIPTextModel,CLIPTextModelWithProjection:()=>l.CLIPTextModelWithProjection,CLIPTokenizer:()=>x.CLIPTokenizer,CLIPVisionModel:()=>l.CLIPVisionModel,CLIPVisionModelWithProjection:()=>l.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>l.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>l.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>l.CamembertForSequenceClassification,CamembertForTokenClassification:()=>l.CamembertForTokenClassification,CamembertModel:()=>l.CamembertModel,CamembertPreTrainedModel:()=>l.CamembertPreTrainedModel,CamembertTokenizer:()=>x.CamembertTokenizer,CausalLMOutput:()=>l.CausalLMOutput,CausalLMOutputWithPast:()=>l.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>H.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>l.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>l.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>l.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>H.ClapFeatureExtractor,ClapModel:()=>l.ClapModel,ClapPreTrainedModel:()=>l.ClapPreTrainedModel,ClapTextModelWithProjection:()=>l.ClapTextModelWithProjection,CodeGenForCausalLM:()=>l.CodeGenForCausalLM,CodeGenModel:()=>l.CodeGenModel,CodeGenPreTrainedModel:()=>l.CodeGenPreTrainedModel,CodeGenTokenizer:()=>x.CodeGenTokenizer,CodeLlamaTokenizer:()=>x.CodeLlamaTokenizer,CohereForCausalLM:()=>l.CohereForCausalLM,CohereModel:()=>l.CohereModel,CoherePreTrainedModel:()=>l.CoherePreTrainedModel,CohereTokenizer:()=>x.CohereTokenizer,ConvBertForMaskedLM:()=>l.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>l.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>l.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>l.ConvBertForTokenClassification,ConvBertModel:()=>l.ConvBertModel,ConvBertPreTrainedModel:()=>l.ConvBertPreTrainedModel,ConvBertTokenizer:()=>x.ConvBertTokenizer,ConvNextFeatureExtractor:()=>H.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>l.ConvNextForImageClassification,ConvNextImageProcessor:()=>H.ConvNextImageProcessor,ConvNextModel:()=>l.ConvNextModel,ConvNextPreTrainedModel:()=>l.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>l.ConvNextV2ForImageClassification,ConvNextV2Model:()=>l.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>l.ConvNextV2PreTrainedModel,DPTFeatureExtractor:()=>H.DPTFeatureExtractor,DPTForDepthEstimation:()=>l.DPTForDepthEstimation,DPTImageProcessor:()=>H.DPTImageProcessor,DPTModel:()=>l.DPTModel,DPTPreTrainedModel:()=>l.DPTPreTrainedModel,DebertaForMaskedLM:()=>l.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>l.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>l.DebertaForSequenceClassification,DebertaForTokenClassification:()=>l.DebertaForTokenClassification,DebertaModel:()=>l.DebertaModel,DebertaPreTrainedModel:()=>l.DebertaPreTrainedModel,DebertaTokenizer:()=>x.DebertaTokenizer,DebertaV2ForMaskedLM:()=>l.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>l.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>l.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>l.DebertaV2ForTokenClassification,DebertaV2Model:()=>l.DebertaV2Model,DebertaV2PreTrainedModel:()=>l.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>x.DebertaV2Tokenizer,DeiTFeatureExtractor:()=>H.DeiTFeatureExtractor,DeiTForImageClassification:()=>l.DeiTForImageClassification,DeiTModel:()=>l.DeiTModel,DeiTPreTrainedModel:()=>l.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>l.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>l.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>me.DepthEstimationPipeline,DetrFeatureExtractor:()=>H.DetrFeatureExtractor,DetrForObjectDetection:()=>l.DetrForObjectDetection,DetrForSegmentation:()=>l.DetrForSegmentation,DetrModel:()=>l.DetrModel,DetrObjectDetectionOutput:()=>l.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>l.DetrPreTrainedModel,DetrSegmentationOutput:()=>l.DetrSegmentationOutput,Dinov2ForImageClassification:()=>l.Dinov2ForImageClassification,Dinov2Model:()=>l.Dinov2Model,Dinov2PreTrainedModel:()=>l.Dinov2PreTrainedModel,DistilBertForMaskedLM:()=>l.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>l.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>l.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>l.DistilBertForTokenClassification,DistilBertModel:()=>l.DistilBertModel,DistilBertPreTrainedModel:()=>l.DistilBertPreTrainedModel,DistilBertTokenizer:()=>x.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>me.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>H.DonutFeatureExtractor,DonutSwinModel:()=>l.DonutSwinModel,DonutSwinPreTrainedModel:()=>l.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>l.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>H.EfficientNetImageProcessor,EfficientNetModel:()=>l.EfficientNetModel,EfficientNetPreTrainedModel:()=>l.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>l.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>l.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>l.ElectraForSequenceClassification,ElectraForTokenClassification:()=>l.ElectraForTokenClassification,ElectraModel:()=>l.ElectraModel,ElectraPreTrainedModel:()=>l.ElectraPreTrainedModel,ElectraTokenizer:()=>x.ElectraTokenizer,EosTokenCriteria:()=>P.EosTokenCriteria,EsmForMaskedLM:()=>l.EsmForMaskedLM,EsmForSequenceClassification:()=>l.EsmForSequenceClassification,EsmForTokenClassification:()=>l.EsmForTokenClassification,EsmModel:()=>l.EsmModel,EsmPreTrainedModel:()=>l.EsmPreTrainedModel,EsmTokenizer:()=>x.EsmTokenizer,FFT:()=>$.FFT,FalconForCausalLM:()=>l.FalconForCausalLM,FalconModel:()=>l.FalconModel,FalconPreTrainedModel:()=>l.FalconPreTrainedModel,FalconTokenizer:()=>x.FalconTokenizer,FastViTForImageClassification:()=>l.FastViTForImageClassification,FastViTModel:()=>l.FastViTModel,FastViTPreTrainedModel:()=>l.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>me.FeatureExtractionPipeline,FeatureExtractor:()=>H.FeatureExtractor,FillMaskPipeline:()=>me.FillMaskPipeline,Florence2ForConditionalGeneration:()=>l.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>l.Florence2PreTrainedModel,Florence2Processor:()=>H.Florence2Processor,GLPNFeatureExtractor:()=>H.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>l.GLPNForDepthEstimation,GLPNModel:()=>l.GLPNModel,GLPNPreTrainedModel:()=>l.GLPNPreTrainedModel,GPT2LMHeadModel:()=>l.GPT2LMHeadModel,GPT2Model:()=>l.GPT2Model,GPT2PreTrainedModel:()=>l.GPT2PreTrainedModel,GPT2Tokenizer:()=>x.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>l.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>l.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>l.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>l.GPTJForCausalLM,GPTJModel:()=>l.GPTJModel,GPTJPreTrainedModel:()=>l.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>l.GPTNeoForCausalLM,GPTNeoModel:()=>l.GPTNeoModel,GPTNeoPreTrainedModel:()=>l.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>l.GPTNeoXForCausalLM,GPTNeoXModel:()=>l.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>l.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>x.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>l.Gemma2ForCausalLM,Gemma2Model:()=>l.Gemma2Model,Gemma2PreTrainedModel:()=>l.Gemma2PreTrainedModel,GemmaForCausalLM:()=>l.GemmaForCausalLM,GemmaModel:()=>l.GemmaModel,GemmaPreTrainedModel:()=>l.GemmaPreTrainedModel,GemmaTokenizer:()=>x.GemmaTokenizer,Grok1Tokenizer:()=>x.Grok1Tokenizer,HerbertTokenizer:()=>x.HerbertTokenizer,HubertForCTC:()=>l.HubertForCTC,HubertForSequenceClassification:()=>l.HubertForSequenceClassification,HubertModel:()=>l.HubertModel,HubertPreTrainedModel:()=>l.HubertPreTrainedModel,ImageClassificationPipeline:()=>me.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>me.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>H.ImageFeatureExtractor,ImageMattingOutput:()=>l.ImageMattingOutput,ImageSegmentationPipeline:()=>me.ImageSegmentationPipeline,ImageToImagePipeline:()=>me.ImageToImagePipeline,ImageToTextPipeline:()=>me.ImageToTextPipeline,InterruptableStoppingCriteria:()=>P.InterruptableStoppingCriteria,LlamaForCausalLM:()=>l.LlamaForCausalLM,LlamaModel:()=>l.LlamaModel,LlamaPreTrainedModel:()=>l.LlamaPreTrainedModel,LlamaTokenizer:()=>x.LlamaTokenizer,LlavaForConditionalGeneration:()=>l.LlavaForConditionalGeneration,LlavaPreTrainedModel:()=>l.LlavaPreTrainedModel,LongT5ForConditionalGeneration:()=>l.LongT5ForConditionalGeneration,LongT5Model:()=>l.LongT5Model,LongT5PreTrainedModel:()=>l.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>l.M2M100ForConditionalGeneration,M2M100Model:()=>l.M2M100Model,M2M100PreTrainedModel:()=>l.M2M100PreTrainedModel,M2M100Tokenizer:()=>x.M2M100Tokenizer,MBart50Tokenizer:()=>x.MBart50Tokenizer,MBartForCausalLM:()=>l.MBartForCausalLM,MBartForConditionalGeneration:()=>l.MBartForConditionalGeneration,MBartForSequenceClassification:()=>l.MBartForSequenceClassification,MBartModel:()=>l.MBartModel,MBartPreTrainedModel:()=>l.MBartPreTrainedModel,MBartTokenizer:()=>x.MBartTokenizer,MPNetForMaskedLM:()=>l.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>l.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>l.MPNetForSequenceClassification,MPNetForTokenClassification:()=>l.MPNetForTokenClassification,MPNetModel:()=>l.MPNetModel,MPNetPreTrainedModel:()=>l.MPNetPreTrainedModel,MPNetTokenizer:()=>x.MPNetTokenizer,MT5ForConditionalGeneration:()=>l.MT5ForConditionalGeneration,MT5Model:()=>l.MT5Model,MT5PreTrainedModel:()=>l.MT5PreTrainedModel,MarianMTModel:()=>l.MarianMTModel,MarianModel:()=>l.MarianModel,MarianPreTrainedModel:()=>l.MarianPreTrainedModel,MarianTokenizer:()=>x.MarianTokenizer,MaskedLMOutput:()=>l.MaskedLMOutput,MaxLengthCriteria:()=>P.MaxLengthCriteria,MistralForCausalLM:()=>l.MistralForCausalLM,MistralModel:()=>l.MistralModel,MistralPreTrainedModel:()=>l.MistralPreTrainedModel,MobileBertForMaskedLM:()=>l.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>l.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>l.MobileBertForSequenceClassification,MobileBertModel:()=>l.MobileBertModel,MobileBertPreTrainedModel:()=>l.MobileBertPreTrainedModel,MobileBertTokenizer:()=>x.MobileBertTokenizer,MobileNetV1FeatureExtractor:()=>H.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>l.MobileNetV1ForImageClassification,MobileNetV1Model:()=>l.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>l.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>H.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>l.MobileNetV2ForImageClassification,MobileNetV2Model:()=>l.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>l.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>H.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>l.MobileNetV3ForImageClassification,MobileNetV3Model:()=>l.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>l.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>H.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>l.MobileNetV4ForImageClassification,MobileNetV4Model:()=>l.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>l.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>H.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>l.MobileViTForImageClassification,MobileViTImageProcessor:()=>H.MobileViTImageProcessor,MobileViTModel:()=>l.MobileViTModel,MobileViTPreTrainedModel:()=>l.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>l.MobileViTV2ForImageClassification,MobileViTV2Model:()=>l.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>l.MobileViTV2PreTrainedModel,ModelOutput:()=>l.ModelOutput,Moondream1ForConditionalGeneration:()=>l.Moondream1ForConditionalGeneration,MptForCausalLM:()=>l.MptForCausalLM,MptModel:()=>l.MptModel,MptPreTrainedModel:()=>l.MptPreTrainedModel,MusicgenForCausalLM:()=>l.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>l.MusicgenForConditionalGeneration,MusicgenModel:()=>l.MusicgenModel,MusicgenPreTrainedModel:()=>l.MusicgenPreTrainedModel,NllbTokenizer:()=>x.NllbTokenizer,NomicBertModel:()=>l.NomicBertModel,NomicBertPreTrainedModel:()=>l.NomicBertPreTrainedModel,NougatImageProcessor:()=>H.NougatImageProcessor,NougatTokenizer:()=>x.NougatTokenizer,OPTForCausalLM:()=>l.OPTForCausalLM,OPTModel:()=>l.OPTModel,OPTPreTrainedModel:()=>l.OPTPreTrainedModel,ObjectDetectionPipeline:()=>me.ObjectDetectionPipeline,OpenELMForCausalLM:()=>l.OpenELMForCausalLM,OpenELMModel:()=>l.OpenELMModel,OpenELMPreTrainedModel:()=>l.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>H.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>l.OwlViTForObjectDetection,OwlViTModel:()=>l.OwlViTModel,OwlViTPreTrainedModel:()=>l.OwlViTPreTrainedModel,OwlViTProcessor:()=>H.OwlViTProcessor,Owlv2ForObjectDetection:()=>l.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>H.Owlv2ImageProcessor,Owlv2Model:()=>l.Owlv2Model,Owlv2PreTrainedModel:()=>l.Owlv2PreTrainedModel,Phi3ForCausalLM:()=>l.Phi3ForCausalLM,Phi3Model:()=>l.Phi3Model,Phi3PreTrainedModel:()=>l.Phi3PreTrainedModel,PhiForCausalLM:()=>l.PhiForCausalLM,PhiModel:()=>l.PhiModel,PhiPreTrainedModel:()=>l.PhiPreTrainedModel,Pipeline:()=>me.Pipeline,PreTrainedModel:()=>l.PreTrainedModel,PreTrainedTokenizer:()=>x.PreTrainedTokenizer,PretrainedConfig:()=>we.PretrainedConfig,PretrainedMixin:()=>l.PretrainedMixin,Processor:()=>H.Processor,PyAnnoteFeatureExtractor:()=>H.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>l.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>l.PyAnnoteModel,PyAnnotePreTrainedModel:()=>l.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>H.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>l.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>me.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>l.Qwen2ForCausalLM,Qwen2Model:()=>l.Qwen2Model,Qwen2PreTrainedModel:()=>l.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>x.Qwen2Tokenizer,RTDetrForObjectDetection:()=>l.RTDetrForObjectDetection,RTDetrImageProcessor:()=>H.RTDetrImageProcessor,RTDetrModel:()=>l.RTDetrModel,RTDetrObjectDetectionOutput:()=>l.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>l.RTDetrPreTrainedModel,RawImage:()=>xe.RawImage,ResNetForImageClassification:()=>l.ResNetForImageClassification,ResNetModel:()=>l.ResNetModel,ResNetPreTrainedModel:()=>l.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>l.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>l.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>l.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>l.RoFormerForTokenClassification,RoFormerModel:()=>l.RoFormerModel,RoFormerPreTrainedModel:()=>l.RoFormerPreTrainedModel,RoFormerTokenizer:()=>x.RoFormerTokenizer,RobertaForMaskedLM:()=>l.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>l.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>l.RobertaForSequenceClassification,RobertaForTokenClassification:()=>l.RobertaForTokenClassification,RobertaModel:()=>l.RobertaModel,RobertaPreTrainedModel:()=>l.RobertaPreTrainedModel,RobertaTokenizer:()=>x.RobertaTokenizer,SamImageProcessor:()=>H.SamImageProcessor,SamImageSegmentationOutput:()=>l.SamImageSegmentationOutput,SamModel:()=>l.SamModel,SamPreTrainedModel:()=>l.SamPreTrainedModel,SamProcessor:()=>H.SamProcessor,SeamlessM4TFeatureExtractor:()=>H.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>H.SegformerFeatureExtractor,SegformerForImageClassification:()=>l.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>l.SegformerForSemanticSegmentation,SegformerModel:()=>l.SegformerModel,SegformerPreTrainedModel:()=>l.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>l.Seq2SeqLMOutput,SequenceClassifierOutput:()=>l.SequenceClassifierOutput,SiglipImageProcessor:()=>H.SiglipImageProcessor,SiglipModel:()=>l.SiglipModel,SiglipPreTrainedModel:()=>l.SiglipPreTrainedModel,SiglipTextModel:()=>l.SiglipTextModel,SiglipTokenizer:()=>x.SiglipTokenizer,SiglipVisionModel:()=>l.SiglipVisionModel,SpeechT5FeatureExtractor:()=>H.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>l.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>l.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>l.SpeechT5HifiGan,SpeechT5Model:()=>l.SpeechT5Model,SpeechT5PreTrainedModel:()=>l.SpeechT5PreTrainedModel,SpeechT5Processor:()=>H.SpeechT5Processor,SpeechT5Tokenizer:()=>x.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>l.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>l.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>l.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>l.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>l.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>x.SqueezeBertTokenizer,StableLmForCausalLM:()=>l.StableLmForCausalLM,StableLmModel:()=>l.StableLmModel,StableLmPreTrainedModel:()=>l.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>l.Starcoder2ForCausalLM,Starcoder2Model:()=>l.Starcoder2Model,Starcoder2PreTrainedModel:()=>l.Starcoder2PreTrainedModel,StoppingCriteria:()=>P.StoppingCriteria,StoppingCriteriaList:()=>P.StoppingCriteriaList,SummarizationPipeline:()=>me.SummarizationPipeline,Swin2SRForImageSuperResolution:()=>l.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>H.Swin2SRImageProcessor,Swin2SRModel:()=>l.Swin2SRModel,Swin2SRPreTrainedModel:()=>l.Swin2SRPreTrainedModel,SwinForImageClassification:()=>l.SwinForImageClassification,SwinModel:()=>l.SwinModel,SwinPreTrainedModel:()=>l.SwinPreTrainedModel,T5ForConditionalGeneration:()=>l.T5ForConditionalGeneration,T5Model:()=>l.T5Model,T5PreTrainedModel:()=>l.T5PreTrainedModel,T5Tokenizer:()=>x.T5Tokenizer,TableTransformerForObjectDetection:()=>l.TableTransformerForObjectDetection,TableTransformerModel:()=>l.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>l.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>l.TableTransformerPreTrainedModel,Tensor:()=>B.Tensor,Text2TextGenerationPipeline:()=>me.Text2TextGenerationPipeline,TextClassificationPipeline:()=>me.TextClassificationPipeline,TextGenerationPipeline:()=>me.TextGenerationPipeline,TextStreamer:()=>N.TextStreamer,TextToAudioPipeline:()=>me.TextToAudioPipeline,TokenClassificationPipeline:()=>me.TokenClassificationPipeline,TokenClassifierOutput:()=>l.TokenClassifierOutput,TokenizerModel:()=>x.TokenizerModel,TrOCRForCausalLM:()=>l.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>l.TrOCRPreTrainedModel,TranslationPipeline:()=>me.TranslationPipeline,UniSpeechForCTC:()=>l.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>l.UniSpeechForSequenceClassification,UniSpeechModel:()=>l.UniSpeechModel,UniSpeechPreTrainedModel:()=>l.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>l.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>l.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>l.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>l.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>l.UniSpeechSatPreTrainedModel,ViTFeatureExtractor:()=>H.ViTFeatureExtractor,ViTForImageClassification:()=>l.ViTForImageClassification,ViTImageProcessor:()=>H.ViTImageProcessor,ViTModel:()=>l.ViTModel,ViTPreTrainedModel:()=>l.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>l.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>l.VitMatteForImageMatting,VitMatteImageProcessor:()=>H.VitMatteImageProcessor,VitMattePreTrainedModel:()=>l.VitMattePreTrainedModel,VitsModel:()=>l.VitsModel,VitsModelOutput:()=>l.VitsModelOutput,VitsPreTrainedModel:()=>l.VitsPreTrainedModel,VitsTokenizer:()=>x.VitsTokenizer,Wav2Vec2BertForCTC:()=>l.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>l.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>l.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>l.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>x.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>H.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>l.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>l.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>l.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>l.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>l.Wav2Vec2PreTrainedModel,Wav2Vec2ProcessorWithLM:()=>H.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>l.WavLMForAudioFrameClassification,WavLMForCTC:()=>l.WavLMForCTC,WavLMForSequenceClassification:()=>l.WavLMForSequenceClassification,WavLMForXVector:()=>l.WavLMForXVector,WavLMModel:()=>l.WavLMModel,WavLMPreTrainedModel:()=>l.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>H.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>l.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>l.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>H.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>l.WhisperForConditionalGeneration,WhisperModel:()=>l.WhisperModel,WhisperPreTrainedModel:()=>l.WhisperPreTrainedModel,WhisperProcessor:()=>H.WhisperProcessor,WhisperTextStreamer:()=>N.WhisperTextStreamer,WhisperTokenizer:()=>x.WhisperTokenizer,XLMForQuestionAnswering:()=>l.XLMForQuestionAnswering,XLMForSequenceClassification:()=>l.XLMForSequenceClassification,XLMForTokenClassification:()=>l.XLMForTokenClassification,XLMModel:()=>l.XLMModel,XLMPreTrainedModel:()=>l.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>l.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>l.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>l.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>l.XLMRobertaForTokenClassification,XLMRobertaModel:()=>l.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>l.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>x.XLMRobertaTokenizer,XLMTokenizer:()=>x.XLMTokenizer,XLMWithLMHeadModel:()=>l.XLMWithLMHeadModel,XVectorOutput:()=>l.XVectorOutput,YolosFeatureExtractor:()=>H.YolosFeatureExtractor,YolosForObjectDetection:()=>l.YolosForObjectDetection,YolosModel:()=>l.YolosModel,YolosObjectDetectionOutput:()=>l.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>l.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>me.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>me.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>me.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>me.ZeroShotObjectDetectionPipeline,bankers_round:()=>$.bankers_round,cat:()=>B.cat,cos_sim:()=>$.cos_sim,dot:()=>$.dot,dynamic_time_warping:()=>$.dynamic_time_warping,env:()=>xt.env,full:()=>B.full,full_like:()=>B.full_like,getKeyValueShapes:()=>we.getKeyValueShapes,hamming:()=>be.hamming,hanning:()=>be.hanning,interpolate:()=>B.interpolate,interpolate_4d:()=>B.interpolate_4d,interpolate_data:()=>$.interpolate_data,is_chinese_char:()=>x.is_chinese_char,layer_norm:()=>B.layer_norm,log_softmax:()=>$.log_softmax,magnitude:()=>$.magnitude,matmul:()=>B.matmul,max:()=>$.max,mean:()=>B.mean,mean_pooling:()=>B.mean_pooling,medianFilter:()=>$.medianFilter,mel_filter_bank:()=>be.mel_filter_bank,min:()=>$.min,ones:()=>B.ones,ones_like:()=>B.ones_like,permute:()=>B.permute,permute_data:()=>$.permute_data,pipeline:()=>me.pipeline,quantize_embeddings:()=>B.quantize_embeddings,read_audio:()=>be.read_audio,rfft:()=>B.rfft,round:()=>$.round,softmax:()=>$.softmax,spectrogram:()=>be.spectrogram,stack:()=>B.stack,std_mean:()=>B.std_mean,topk:()=>B.topk,window_function:()=>be.window_function,zeros:()=>B.zeros,zeros_like:()=>B.zeros_like});var xt=Or("./src/env.js"),me=Or("./src/pipelines.js"),l=Or("./src/models.js"),x=Or("./src/tokenizers.js"),H=Or("./src/processors.js"),we=Or("./src/configs.js"),be=Or("./src/utils/audio.js"),xe=Or("./src/utils/image.js"),B=Or("./src/utils/tensor.js"),$=Or("./src/utils/maths.js"),N=Or("./src/generation/streamers.js"),P=Or("./src/generation/stopping_criteria.js")})(),p.ASTFeatureExtractor,p.ASTForAudioClassification,p.ASTModel,p.ASTPreTrainedModel,p.AlbertForMaskedLM,p.AlbertForQuestionAnswering,p.AlbertForSequenceClassification,p.AlbertModel,p.AlbertPreTrainedModel,p.AlbertTokenizer,p.AudioClassificationPipeline,p.AutoConfig,p.AutoModel,p.AutoModelForAudioClassification,p.AutoModelForAudioFrameClassification,p.AutoModelForCTC,p.AutoModelForCausalLM,p.AutoModelForDepthEstimation,p.AutoModelForDocumentQuestionAnswering,p.AutoModelForImageClassification,p.AutoModelForImageFeatureExtraction,p.AutoModelForImageMatting,p.AutoModelForImageSegmentation,p.AutoModelForImageToImage,p.AutoModelForMaskGeneration,p.AutoModelForMaskedLM,p.AutoModelForObjectDetection,p.AutoModelForQuestionAnswering,p.AutoModelForSemanticSegmentation,p.AutoModelForSeq2SeqLM,p.AutoModelForSequenceClassification,p.AutoModelForSpeechSeq2Seq,p.AutoModelForTextToSpectrogram,p.AutoModelForTextToWaveform,p.AutoModelForTokenClassification,p.AutoModelForVision2Seq,p.AutoModelForXVector,p.AutoModelForZeroShotObjectDetection,p.AutoProcessor,p.AutoTokenizer,p.AutomaticSpeechRecognitionPipeline,p.BartForConditionalGeneration,p.BartForSequenceClassification,p.BartModel,p.BartPretrainedModel,p.BartTokenizer,p.BaseModelOutput,p.BaseStreamer,p.BeitFeatureExtractor,p.BeitForImageClassification,p.BeitModel,p.BeitPreTrainedModel,p.BertForMaskedLM,p.BertForQuestionAnswering,p.BertForSequenceClassification,p.BertForTokenClassification,p.BertModel,p.BertPreTrainedModel,p.BertTokenizer,p.BitImageProcessor,p.BlenderbotForConditionalGeneration,p.BlenderbotModel,p.BlenderbotPreTrainedModel,p.BlenderbotSmallForConditionalGeneration,p.BlenderbotSmallModel,p.BlenderbotSmallPreTrainedModel,p.BlenderbotSmallTokenizer,p.BlenderbotTokenizer,p.BloomForCausalLM,p.BloomModel,p.BloomPreTrainedModel,p.BloomTokenizer,p.CLIPFeatureExtractor,p.CLIPImageProcessor,p.CLIPModel,p.CLIPPreTrainedModel,p.CLIPSegForImageSegmentation,p.CLIPSegModel,p.CLIPSegPreTrainedModel,p.CLIPTextModel,p.CLIPTextModelWithProjection,p.CLIPTokenizer,p.CLIPVisionModel,p.CLIPVisionModelWithProjection,p.CamembertForMaskedLM,p.CamembertForQuestionAnswering,p.CamembertForSequenceClassification,p.CamembertForTokenClassification,p.CamembertModel,p.CamembertPreTrainedModel,p.CamembertTokenizer,p.CausalLMOutput,p.CausalLMOutputWithPast,p.ChineseCLIPFeatureExtractor,p.ChineseCLIPModel,p.ChineseCLIPPreTrainedModel,p.ClapAudioModelWithProjection,p.ClapFeatureExtractor,p.ClapModel,p.ClapPreTrainedModel,p.ClapTextModelWithProjection,p.CodeGenForCausalLM,p.CodeGenModel,p.CodeGenPreTrainedModel,p.CodeGenTokenizer,p.CodeLlamaTokenizer,p.CohereForCausalLM,p.CohereModel,p.CoherePreTrainedModel,p.CohereTokenizer,p.ConvBertForMaskedLM,p.ConvBertForQuestionAnswering,p.ConvBertForSequenceClassification,p.ConvBertForTokenClassification,p.ConvBertModel,p.ConvBertPreTrainedModel,p.ConvBertTokenizer,p.ConvNextFeatureExtractor,p.ConvNextForImageClassification,p.ConvNextImageProcessor,p.ConvNextModel,p.ConvNextPreTrainedModel,p.ConvNextV2ForImageClassification,p.ConvNextV2Model,p.ConvNextV2PreTrainedModel,p.DPTFeatureExtractor,p.DPTForDepthEstimation,p.DPTImageProcessor,p.DPTModel,p.DPTPreTrainedModel,p.DebertaForMaskedLM,p.DebertaForQuestionAnswering,p.DebertaForSequenceClassification,p.DebertaForTokenClassification,p.DebertaModel,p.DebertaPreTrainedModel,p.DebertaTokenizer,p.DebertaV2ForMaskedLM,p.DebertaV2ForQuestionAnswering,p.DebertaV2ForSequenceClassification,p.DebertaV2ForTokenClassification,p.DebertaV2Model,p.DebertaV2PreTrainedModel,p.DebertaV2Tokenizer,p.DeiTFeatureExtractor,p.DeiTForImageClassification,p.DeiTModel,p.DeiTPreTrainedModel,p.DepthAnythingForDepthEstimation,p.DepthAnythingPreTrainedModel,p.DepthEstimationPipeline,p.DetrFeatureExtractor,p.DetrForObjectDetection,p.DetrForSegmentation,p.DetrModel,p.DetrObjectDetectionOutput,p.DetrPreTrainedModel,p.DetrSegmentationOutput,p.Dinov2ForImageClassification,p.Dinov2Model,p.Dinov2PreTrainedModel,p.DistilBertForMaskedLM,p.DistilBertForQuestionAnswering,p.DistilBertForSequenceClassification,p.DistilBertForTokenClassification,p.DistilBertModel,p.DistilBertPreTrainedModel,p.DistilBertTokenizer,p.DocumentQuestionAnsweringPipeline,p.DonutFeatureExtractor,p.DonutSwinModel,p.DonutSwinPreTrainedModel,p.EfficientNetForImageClassification,p.EfficientNetImageProcessor,p.EfficientNetModel,p.EfficientNetPreTrainedModel,p.ElectraForMaskedLM,p.ElectraForQuestionAnswering,p.ElectraForSequenceClassification,p.ElectraForTokenClassification,p.ElectraModel,p.ElectraPreTrainedModel,p.ElectraTokenizer,p.EosTokenCriteria,p.EsmForMaskedLM,p.EsmForSequenceClassification,p.EsmForTokenClassification,p.EsmModel,p.EsmPreTrainedModel,p.EsmTokenizer,p.FFT,p.FalconForCausalLM,p.FalconModel,p.FalconPreTrainedModel,p.FalconTokenizer,p.FastViTForImageClassification,p.FastViTModel,p.FastViTPreTrainedModel,p.FeatureExtractionPipeline,p.FeatureExtractor,p.FillMaskPipeline,p.Florence2ForConditionalGeneration,p.Florence2PreTrainedModel,p.Florence2Processor,p.GLPNFeatureExtractor,p.GLPNForDepthEstimation,p.GLPNModel,p.GLPNPreTrainedModel,p.GPT2LMHeadModel,p.GPT2Model,p.GPT2PreTrainedModel,p.GPT2Tokenizer,p.GPTBigCodeForCausalLM,p.GPTBigCodeModel,p.GPTBigCodePreTrainedModel,p.GPTJForCausalLM,p.GPTJModel,p.GPTJPreTrainedModel,p.GPTNeoForCausalLM,p.GPTNeoModel,p.GPTNeoPreTrainedModel,p.GPTNeoXForCausalLM,p.GPTNeoXModel,p.GPTNeoXPreTrainedModel,p.GPTNeoXTokenizer,p.Gemma2ForCausalLM,p.Gemma2Model,p.Gemma2PreTrainedModel,p.GemmaForCausalLM,p.GemmaModel,p.GemmaPreTrainedModel,p.GemmaTokenizer,p.Grok1Tokenizer,p.HerbertTokenizer,p.HubertForCTC,p.HubertForSequenceClassification,p.HubertModel,p.HubertPreTrainedModel,p.ImageClassificationPipeline,p.ImageFeatureExtractionPipeline,p.ImageFeatureExtractor,p.ImageMattingOutput,p.ImageSegmentationPipeline,p.ImageToImagePipeline,p.ImageToTextPipeline,p.InterruptableStoppingCriteria,p.LlamaForCausalLM,p.LlamaModel,p.LlamaPreTrainedModel,p.LlamaTokenizer,p.LlavaForConditionalGeneration,p.LlavaPreTrainedModel,p.LongT5ForConditionalGeneration,p.LongT5Model,p.LongT5PreTrainedModel,p.M2M100ForConditionalGeneration,p.M2M100Model,p.M2M100PreTrainedModel,p.M2M100Tokenizer,p.MBart50Tokenizer,p.MBartForCausalLM,p.MBartForConditionalGeneration,p.MBartForSequenceClassification,p.MBartModel,p.MBartPreTrainedModel,p.MBartTokenizer,p.MPNetForMaskedLM,p.MPNetForQuestionAnswering,p.MPNetForSequenceClassification,p.MPNetForTokenClassification,p.MPNetModel,p.MPNetPreTrainedModel,p.MPNetTokenizer,p.MT5ForConditionalGeneration,p.MT5Model,p.MT5PreTrainedModel,p.MarianMTModel,p.MarianModel,p.MarianPreTrainedModel,p.MarianTokenizer,p.MaskedLMOutput,p.MaxLengthCriteria,p.MistralForCausalLM,p.MistralModel,p.MistralPreTrainedModel,p.MobileBertForMaskedLM,p.MobileBertForQuestionAnswering,p.MobileBertForSequenceClassification,p.MobileBertModel,p.MobileBertPreTrainedModel,p.MobileBertTokenizer,p.MobileNetV1FeatureExtractor,p.MobileNetV1ForImageClassification,p.MobileNetV1Model,p.MobileNetV1PreTrainedModel,p.MobileNetV2FeatureExtractor,p.MobileNetV2ForImageClassification,p.MobileNetV2Model,p.MobileNetV2PreTrainedModel,p.MobileNetV3FeatureExtractor,p.MobileNetV3ForImageClassification,p.MobileNetV3Model,p.MobileNetV3PreTrainedModel,p.MobileNetV4FeatureExtractor,p.MobileNetV4ForImageClassification,p.MobileNetV4Model,p.MobileNetV4PreTrainedModel,p.MobileViTFeatureExtractor,p.MobileViTForImageClassification,p.MobileViTImageProcessor,p.MobileViTModel,p.MobileViTPreTrainedModel,p.MobileViTV2ForImageClassification,p.MobileViTV2Model,p.MobileViTV2PreTrainedModel,p.ModelOutput,p.Moondream1ForConditionalGeneration,p.MptForCausalLM,p.MptModel,p.MptPreTrainedModel,p.MusicgenForCausalLM,p.MusicgenForConditionalGeneration,p.MusicgenModel,p.MusicgenPreTrainedModel,p.NllbTokenizer,p.NomicBertModel,p.NomicBertPreTrainedModel,p.NougatImageProcessor,p.NougatTokenizer,p.OPTForCausalLM,p.OPTModel,p.OPTPreTrainedModel,p.ObjectDetectionPipeline,p.OpenELMForCausalLM,p.OpenELMModel,p.OpenELMPreTrainedModel,p.OwlViTFeatureExtractor,p.OwlViTForObjectDetection,p.OwlViTModel,p.OwlViTPreTrainedModel,p.OwlViTProcessor,p.Owlv2ForObjectDetection,p.Owlv2ImageProcessor,p.Owlv2Model,p.Owlv2PreTrainedModel,p.Phi3ForCausalLM,p.Phi3Model,p.Phi3PreTrainedModel,p.PhiForCausalLM,p.PhiModel,p.PhiPreTrainedModel,p.Pipeline,p.PreTrainedModel,p.PreTrainedTokenizer,p.PretrainedConfig,p.PretrainedMixin,p.Processor,p.PyAnnoteFeatureExtractor,p.PyAnnoteForAudioFrameClassification,p.PyAnnoteModel,p.PyAnnotePreTrainedModel,p.PyAnnoteProcessor,p.QuestionAnsweringModelOutput,p.QuestionAnsweringPipeline,p.Qwen2ForCausalLM,p.Qwen2Model,p.Qwen2PreTrainedModel,p.Qwen2Tokenizer,p.RTDetrForObjectDetection,p.RTDetrImageProcessor,p.RTDetrModel,p.RTDetrObjectDetectionOutput,p.RTDetrPreTrainedModel,p.RawImage,p.ResNetForImageClassification,p.ResNetModel,p.ResNetPreTrainedModel,p.RoFormerForMaskedLM,p.RoFormerForQuestionAnswering,p.RoFormerForSequenceClassification,p.RoFormerForTokenClassification,p.RoFormerModel,p.RoFormerPreTrainedModel,p.RoFormerTokenizer,p.RobertaForMaskedLM,p.RobertaForQuestionAnswering,p.RobertaForSequenceClassification,p.RobertaForTokenClassification,p.RobertaModel,p.RobertaPreTrainedModel,p.RobertaTokenizer,p.SamImageProcessor,p.SamImageSegmentationOutput,p.SamModel,p.SamPreTrainedModel,p.SamProcessor,p.SeamlessM4TFeatureExtractor,p.SegformerFeatureExtractor,p.SegformerForImageClassification,p.SegformerForSemanticSegmentation,p.SegformerModel,p.SegformerPreTrainedModel,p.Seq2SeqLMOutput,p.SequenceClassifierOutput,p.SiglipImageProcessor,p.SiglipModel,p.SiglipPreTrainedModel,p.SiglipTextModel,p.SiglipTokenizer,p.SiglipVisionModel,p.SpeechT5FeatureExtractor,p.SpeechT5ForSpeechToText,p.SpeechT5ForTextToSpeech,p.SpeechT5HifiGan,p.SpeechT5Model,p.SpeechT5PreTrainedModel,p.SpeechT5Processor,p.SpeechT5Tokenizer,p.SqueezeBertForMaskedLM,p.SqueezeBertForQuestionAnswering,p.SqueezeBertForSequenceClassification,p.SqueezeBertModel,p.SqueezeBertPreTrainedModel,p.SqueezeBertTokenizer,p.StableLmForCausalLM,p.StableLmModel,p.StableLmPreTrainedModel,p.Starcoder2ForCausalLM,p.Starcoder2Model,p.Starcoder2PreTrainedModel,p.StoppingCriteria,p.StoppingCriteriaList,p.SummarizationPipeline,p.Swin2SRForImageSuperResolution,p.Swin2SRImageProcessor,p.Swin2SRModel,p.Swin2SRPreTrainedModel,p.SwinForImageClassification,p.SwinModel,p.SwinPreTrainedModel,p.T5ForConditionalGeneration,p.T5Model,p.T5PreTrainedModel,p.T5Tokenizer,p.TableTransformerForObjectDetection,p.TableTransformerModel,p.TableTransformerObjectDetectionOutput,p.TableTransformerPreTrainedModel,p.Tensor,p.Text2TextGenerationPipeline,p.TextClassificationPipeline,p.TextGenerationPipeline,p.TextStreamer,p.TextToAudioPipeline,p.TokenClassificationPipeline,p.TokenClassifierOutput,p.TokenizerModel,p.TrOCRForCausalLM,p.TrOCRPreTrainedModel,p.TranslationPipeline,p.UniSpeechForCTC,p.UniSpeechForSequenceClassification,p.UniSpeechModel,p.UniSpeechPreTrainedModel,p.UniSpeechSatForAudioFrameClassification,p.UniSpeechSatForCTC,p.UniSpeechSatForSequenceClassification,p.UniSpeechSatModel,p.UniSpeechSatPreTrainedModel,p.ViTFeatureExtractor,p.ViTForImageClassification,p.ViTImageProcessor,p.ViTModel,p.ViTPreTrainedModel,p.VisionEncoderDecoderModel,p.VitMatteForImageMatting,p.VitMatteImageProcessor,p.VitMattePreTrainedModel,p.VitsModel,p.VitsModelOutput,p.VitsPreTrainedModel,p.VitsTokenizer,p.Wav2Vec2BertForCTC,p.Wav2Vec2BertForSequenceClassification,p.Wav2Vec2BertModel,p.Wav2Vec2BertPreTrainedModel,p.Wav2Vec2CTCTokenizer,p.Wav2Vec2FeatureExtractor,p.Wav2Vec2ForAudioFrameClassification,p.Wav2Vec2ForCTC,p.Wav2Vec2ForSequenceClassification,p.Wav2Vec2Model,p.Wav2Vec2PreTrainedModel,p.Wav2Vec2ProcessorWithLM,p.WavLMForAudioFrameClassification,p.WavLMForCTC,p.WavLMForSequenceClassification,p.WavLMForXVector,p.WavLMModel,p.WavLMPreTrainedModel,p.WeSpeakerFeatureExtractor,p.WeSpeakerResNetModel,p.WeSpeakerResNetPreTrainedModel,p.WhisperFeatureExtractor,p.WhisperForConditionalGeneration,p.WhisperModel,p.WhisperPreTrainedModel,p.WhisperProcessor;var Yh=p.WhisperTextStreamer;p.WhisperTokenizer,p.XLMForQuestionAnswering,p.XLMForSequenceClassification,p.XLMForTokenClassification,p.XLMModel,p.XLMPreTrainedModel,p.XLMRobertaForMaskedLM,p.XLMRobertaForQuestionAnswering,p.XLMRobertaForSequenceClassification,p.XLMRobertaForTokenClassification,p.XLMRobertaModel,p.XLMRobertaPreTrainedModel,p.XLMRobertaTokenizer,p.XLMTokenizer,p.XLMWithLMHeadModel,p.XVectorOutput,p.YolosFeatureExtractor,p.YolosForObjectDetection,p.YolosModel,p.YolosObjectDetectionOutput,p.YolosPreTrainedModel,p.ZeroShotAudioClassificationPipeline,p.ZeroShotClassificationPipeline,p.ZeroShotImageClassificationPipeline,p.ZeroShotObjectDetectionPipeline,p.bankers_round,p.cat,p.cos_sim,p.dot,p.dynamic_time_warping,p.env,p.full,p.full_like,p.getKeyValueShapes,p.hamming,p.hanning,p.interpolate,p.interpolate_4d,p.interpolate_data,p.is_chinese_char,p.layer_norm,p.log_softmax,p.magnitude,p.matmul,p.max,p.mean,p.mean_pooling,p.medianFilter,p.mel_filter_bank,p.min,p.ones,p.ones_like,p.permute,p.permute_data;var Zh=p.pipeline;p.quantize_embeddings,p.read_audio,p.rfft,p.round,p.softmax,p.spectrogram,p.stack,p.std_mean,p.topk,p.window_function,p.zeros,p.zeros_like;class za{constructor(me,l){this.tokenizer=me,this.model=l,this.device=device}static async getInstance(me=null){return this.instance===null&&(this.instance=Zh(this.task,this.model,{dtype:{encoder_model:"fp32",decoder_model_merged:"q4"},device:this.device,progress_callback:me})),this.instance}}Te(za,"task",null),Te(za,"model",null),Te(za,"device",null),Te(za,"instance",null),self.addEventListener("message",async xt=>{const me=xt.data,l=performance.now();let x=await Jh(me).catch(we=>{self.postMessage({status:"error",data:we})});const H=performance.now();x&&(self.postMessage({status:"complete",data:x}),self.postMessage({status:"execution-time",data:H-l}))});class Bu extends za{}Te(Bu,"task","automatic-speech-recognition"),Te(Bu,"model",null),Te(Bu,"device",null);const Jh=async({audio:xt,model:me,subtask:l,language:x,device:H})=>{const we=/^distil-whisper\//.test(me),be=/\.en$/.test(me),xe=Bu;(xe.model!==me||xe.device!==H)&&(xe.model=me,xe.device=H,xe.instance!==null&&((await xe.getInstance()).dispose(),xe.instance=null));const B=await xe.getInstance(re=>{self.postMessage(re)}),$=B.processor.feature_extractor.config.chunk_length/B.model.config.max_source_positions,N=[],P=we?20:30,ee=we?3:5;let Z=0,ie,ae=0,z;const te=new Yh(B.tokenizer,{time_precision:$,on_chunk_start:re=>{const pe=(P-ee)*Z;N.push({text:"",timestamp:[pe+re,null],finalised:!1,offset:pe})},token_callback_function:re=>{ie??(ie=performance.now()),ae++>0&&(z=ae/(performance.now()-ie)*1e3)},callback_function:re=>{N.length!==0&&(N.at(-1).text+=re,self.postMessage({status:"update",data:{text:"",chunks:N,tps:z}}))},on_chunk_end:re=>{const pe=N.at(-1);pe.timestamp[1]=re+pe.offset,pe.finalised=!0},on_finalize:()=>{ie=null,ae=0,++Z}}),G=await B(xt,{top_k:0,do_sample:!1,chunk_length_s:P,stride_length_s:ee,language:be?"":x,task:be?"":l,return_timestamps:!0,force_full_sequences:!1,streamer:te}).catch(re=>(console.error(re),self.postMessage({status:"error",data:re}),null));return{tps:z,...G}}})();
